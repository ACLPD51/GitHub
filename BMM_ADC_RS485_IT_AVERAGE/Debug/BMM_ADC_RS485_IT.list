
BMM_ADC_RS485_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044b8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004648  08004648  00014648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c0  080046c0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080046c0  080046c0  000146c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046c8  080046c8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080046d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00008e44  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008eb4  20008eb4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000efb1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cbe  00000000  00000000  0002f051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce0  00000000  00000000  00030d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c38  00000000  00000000  000319f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fad2  00000000  00000000  00032628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e7ae  00000000  00000000  000520fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000caae0  00000000  00000000  000608a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012b388  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a60  00000000  00000000  0012b3dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004630 	.word	0x08004630

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004630 	.word	0x08004630

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <SelectCh4>:
ADC_ChannelConfTypeDef sConfig = {0};
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SelectCh4 (void){
 8000568:	b580      	push	{r7, lr}
 800056a:	b084      	sub	sp, #16
 800056c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800056e:	463b      	mov	r3, r7
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_4;
 800057a:	2304      	movs	r3, #4
 800057c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800057e:	2301      	movs	r3, #1
 8000580:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000582:	2307      	movs	r3, #7
 8000584:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000586:	463b      	mov	r3, r7
 8000588:	4619      	mov	r1, r3
 800058a:	4806      	ldr	r0, [pc, #24]	; (80005a4 <SelectCh4+0x3c>)
 800058c:	f001 fad2 	bl	8001b34 <HAL_ADC_ConfigChannel>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SelectCh4+0x32>
	  {
	    Error_Handler();
 8000596:	f000 fe85 	bl	80012a4 <Error_Handler>
	  }
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	20002010 	.word	0x20002010

080005a8 <SelectCh5>:


void SelectCh5 (void){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b084      	sub	sp, #16
 80005ac:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80005ae:	463b      	mov	r3, r7
 80005b0:	2200      	movs	r2, #0
 80005b2:	601a      	str	r2, [r3, #0]
 80005b4:	605a      	str	r2, [r3, #4]
 80005b6:	609a      	str	r2, [r3, #8]
 80005b8:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_5;
 80005ba:	2305      	movs	r3, #5
 80005bc:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80005be:	2301      	movs	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80005c2:	2307      	movs	r3, #7
 80005c4:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005c6:	463b      	mov	r3, r7
 80005c8:	4619      	mov	r1, r3
 80005ca:	4806      	ldr	r0, [pc, #24]	; (80005e4 <SelectCh5+0x3c>)
 80005cc:	f001 fab2 	bl	8001b34 <HAL_ADC_ConfigChannel>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <SelectCh5+0x32>
	  {
	    Error_Handler();
 80005d6:	f000 fe65 	bl	80012a4 <Error_Handler>
	  }


}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20002010 	.word	0x20002010

080005e8 <SelectCh6>:

void SelectCh6 (void){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_6;
 80005fa:	2306      	movs	r3, #6
 80005fc:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80005fe:	2301      	movs	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000602:	2307      	movs	r3, #7
 8000604:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000606:	463b      	mov	r3, r7
 8000608:	4619      	mov	r1, r3
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <SelectCh6+0x3c>)
 800060c:	f001 fa92 	bl	8001b34 <HAL_ADC_ConfigChannel>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SelectCh6+0x32>
	  {
	    Error_Handler();
 8000616:	f000 fe45 	bl	80012a4 <Error_Handler>
	  }


}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	20002010 	.word	0x20002010

08000628 <SelectCh7>:


void SelectCh7 (void){
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800062e:	463b      	mov	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_7;
 800063a:	2307      	movs	r3, #7
 800063c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800063e:	2301      	movs	r3, #1
 8000640:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000642:	2307      	movs	r3, #7
 8000644:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000646:	463b      	mov	r3, r7
 8000648:	4619      	mov	r1, r3
 800064a:	4806      	ldr	r0, [pc, #24]	; (8000664 <SelectCh7+0x3c>)
 800064c:	f001 fa72 	bl	8001b34 <HAL_ADC_ConfigChannel>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SelectCh7+0x32>
	  {
	    Error_Handler();
 8000656:	f000 fe25 	bl	80012a4 <Error_Handler>
	  }

}
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20002010 	.word	0x20002010

08000668 <SelectCh8>:

void SelectCh8 (void){
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800066e:	463b      	mov	r3, r7
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_8;
 800067a:	2308      	movs	r3, #8
 800067c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800067e:	2301      	movs	r3, #1
 8000680:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000682:	2307      	movs	r3, #7
 8000684:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000686:	463b      	mov	r3, r7
 8000688:	4619      	mov	r1, r3
 800068a:	4806      	ldr	r0, [pc, #24]	; (80006a4 <SelectCh8+0x3c>)
 800068c:	f001 fa52 	bl	8001b34 <HAL_ADC_ConfigChannel>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SelectCh8+0x32>
	  {
	    Error_Handler();
 8000696:	f000 fe05 	bl	80012a4 <Error_Handler>
	  }

}
 800069a:	bf00      	nop
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20002010 	.word	0x20002010

080006a8 <SelectCh9>:
void SelectCh9 (void){
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80006ae:	463b      	mov	r3, r7
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_9;
 80006ba:	2309      	movs	r3, #9
 80006bc:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80006be:	2301      	movs	r3, #1
 80006c0:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80006c2:	2307      	movs	r3, #7
 80006c4:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006c6:	463b      	mov	r3, r7
 80006c8:	4619      	mov	r1, r3
 80006ca:	4806      	ldr	r0, [pc, #24]	; (80006e4 <SelectCh9+0x3c>)
 80006cc:	f001 fa32 	bl	8001b34 <HAL_ADC_ConfigChannel>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <SelectCh9+0x32>
	  {
	    Error_Handler();
 80006d6:	f000 fde5 	bl	80012a4 <Error_Handler>
	  }

}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20002010 	.word	0x20002010

080006e8 <SelectCh12>:

void SelectCh12 (void){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b084      	sub	sp, #16
 80006ec:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 80006ee:	463b      	mov	r3, r7
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_12;
 80006fa:	230c      	movs	r3, #12
 80006fc:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80006fe:	2301      	movs	r3, #1
 8000700:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000702:	2307      	movs	r3, #7
 8000704:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	4619      	mov	r1, r3
 800070a:	4806      	ldr	r0, [pc, #24]	; (8000724 <SelectCh12+0x3c>)
 800070c:	f001 fa12 	bl	8001b34 <HAL_ADC_ConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SelectCh12+0x32>
	  {
	    Error_Handler();
 8000716:	f000 fdc5 	bl	80012a4 <Error_Handler>
	  }

}
 800071a:	bf00      	nop
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20002010 	.word	0x20002010

08000728 <SelectCh14>:

void SelectCh14 (void){
 8000728:	b580      	push	{r7, lr}
 800072a:	b084      	sub	sp, #16
 800072c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800072e:	463b      	mov	r3, r7
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	605a      	str	r2, [r3, #4]
 8000736:	609a      	str	r2, [r3, #8]
 8000738:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_14;
 800073a:	230e      	movs	r3, #14
 800073c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800073e:	2301      	movs	r3, #1
 8000740:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000742:	2307      	movs	r3, #7
 8000744:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000746:	463b      	mov	r3, r7
 8000748:	4619      	mov	r1, r3
 800074a:	4806      	ldr	r0, [pc, #24]	; (8000764 <SelectCh14+0x3c>)
 800074c:	f001 f9f2 	bl	8001b34 <HAL_ADC_ConfigChannel>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SelectCh14+0x32>
	  {
	    Error_Handler();
 8000756:	f000 fda5 	bl	80012a4 <Error_Handler>
	  }

}
 800075a:	bf00      	nop
 800075c:	3710      	adds	r7, #16
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	20002010 	.word	0x20002010

08000768 <SelectCh15>:


void SelectCh15 (void){
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 800076e:	463b      	mov	r3, r7
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_15;
 800077a:	230f      	movs	r3, #15
 800077c:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 800077e:	2301      	movs	r3, #1
 8000780:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000782:	2307      	movs	r3, #7
 8000784:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000786:	463b      	mov	r3, r7
 8000788:	4619      	mov	r1, r3
 800078a:	4806      	ldr	r0, [pc, #24]	; (80007a4 <SelectCh15+0x3c>)
 800078c:	f001 f9d2 	bl	8001b34 <HAL_ADC_ConfigChannel>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <SelectCh15+0x32>
	  {
	    Error_Handler();
 8000796:	f000 fd85 	bl	80012a4 <Error_Handler>
	  }

}
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20002010 	.word	0x20002010

080007a8 <UART_BMM_INIT>:

void UART_BMM_INIT (void){
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0

	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007b2:	480e      	ldr	r0, [pc, #56]	; (80007ec <UART_BMM_INIT+0x44>)
 80007b4:	f001 fe8a 	bl	80024cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007be:	480c      	ldr	r0, [pc, #48]	; (80007f0 <UART_BMM_INIT+0x48>)
 80007c0:	f001 fe84 	bl	80024cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ca:	4809      	ldr	r0, [pc, #36]	; (80007f0 <UART_BMM_INIT+0x48>)
 80007cc:	f001 fe7e 	bl	80024cc <HAL_GPIO_WritePin>



	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 80007d0:	2201      	movs	r2, #1
 80007d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007d6:	4806      	ldr	r0, [pc, #24]	; (80007f0 <UART_BMM_INIT+0x48>)
 80007d8:	f001 fe78 	bl	80024cc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e2:	4803      	ldr	r0, [pc, #12]	; (80007f0 <UART_BMM_INIT+0x48>)
 80007e4:	f001 fe72 	bl	80024cc <HAL_GPIO_WritePin>
}
 80007e8:	bf00      	nop
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40020000 	.word	0x40020000
 80007f0:	40021000 	.word	0x40021000

080007f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fa:	f000 ff47 	bl	800168c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007fe:	f000 f9c9 	bl	8000b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000802:	f000 fb93 	bl	8000f2c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000806:	f000 fa2f 	bl	8000c68 <MX_ADC1_Init>
  MX_TIM2_Init();
 800080a:	f000 faef 	bl	8000dec <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800080e:	f000 fb39 	bl	8000e84 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000812:	f000 fb61 	bl	8000ed8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UART_BMM_INIT();	//inicializamos pins para rs485
 8000816:	f7ff ffc7 	bl	80007a8 <UART_BMM_INIT>

  HAL_TIM_Base_Start_IT(&htim2); // iniciamos timer2
 800081a:	48a4      	ldr	r0, [pc, #656]	; (8000aac <main+0x2b8>)
 800081c:	f002 fb32 	bl	8002e84 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (FLAG_ADC == 1) {
 8000820:	4ba3      	ldr	r3, [pc, #652]	; (8000ab0 <main+0x2bc>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d1fb      	bne.n	8000820 <main+0x2c>
			FLAG_ADC=0;
 8000828:	4ba1      	ldr	r3, [pc, #644]	; (8000ab0 <main+0x2bc>)
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800082e:	2201      	movs	r2, #1
 8000830:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000834:	489f      	ldr	r0, [pc, #636]	; (8000ab4 <main+0x2c0>)
 8000836:	f001 fe49 	bl	80024cc <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, "V1:", 3, 100);
 800083a:	2364      	movs	r3, #100	; 0x64
 800083c:	2203      	movs	r2, #3
 800083e:	499e      	ldr	r1, [pc, #632]	; (8000ab8 <main+0x2c4>)
 8000840:	489e      	ldr	r0, [pc, #632]	; (8000abc <main+0x2c8>)
 8000842:	f002 ffcc 	bl	80037de <HAL_UART_Transmit>
			for (int i = 0; i <= 999; i++) {
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
 800084a:	e012      	b.n	8000872 <main+0x7e>

				sprintf(DATA, ";%d", ADC_VAL[i]);
 800084c:	4a9c      	ldr	r2, [pc, #624]	; (8000ac0 <main+0x2cc>)
 800084e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000854:	461a      	mov	r2, r3
 8000856:	499b      	ldr	r1, [pc, #620]	; (8000ac4 <main+0x2d0>)
 8000858:	489b      	ldr	r0, [pc, #620]	; (8000ac8 <main+0x2d4>)
 800085a:	f003 fabb 	bl	8003dd4 <siprintf>

				HAL_UART_Transmit(&huart1, DATA, sizeof(DATA), HAL_MAX_DELAY);
 800085e:	f04f 33ff 	mov.w	r3, #4294967295
 8000862:	2205      	movs	r2, #5
 8000864:	4998      	ldr	r1, [pc, #608]	; (8000ac8 <main+0x2d4>)
 8000866:	4895      	ldr	r0, [pc, #596]	; (8000abc <main+0x2c8>)
 8000868:	f002 ffb9 	bl	80037de <HAL_UART_Transmit>
			for (int i = 0; i <= 999; i++) {
 800086c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800086e:	3301      	adds	r3, #1
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
 8000872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000874:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000878:	dbe8      	blt.n	800084c <main+0x58>

			}
			HAL_UART_Transmit(&huart1, "\n\r", 4, 100);
 800087a:	2364      	movs	r3, #100	; 0x64
 800087c:	2204      	movs	r2, #4
 800087e:	4993      	ldr	r1, [pc, #588]	; (8000acc <main+0x2d8>)
 8000880:	488e      	ldr	r0, [pc, #568]	; (8000abc <main+0x2c8>)
 8000882:	f002 ffac 	bl	80037de <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart1, "V2:", 3, 100);
 8000886:	2364      	movs	r3, #100	; 0x64
 8000888:	2203      	movs	r2, #3
 800088a:	4991      	ldr	r1, [pc, #580]	; (8000ad0 <main+0x2dc>)
 800088c:	488b      	ldr	r0, [pc, #556]	; (8000abc <main+0x2c8>)
 800088e:	f002 ffa6 	bl	80037de <HAL_UART_Transmit>
			for (int i = 0; i <= 999; i++) {
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
 8000896:	e012      	b.n	80008be <main+0xca>

				sprintf(DATA2, ";%d", ADC_VAL2[i]);
 8000898:	4a8e      	ldr	r2, [pc, #568]	; (8000ad4 <main+0x2e0>)
 800089a:	6a3b      	ldr	r3, [r7, #32]
 800089c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4988      	ldr	r1, [pc, #544]	; (8000ac4 <main+0x2d0>)
 80008a4:	488c      	ldr	r0, [pc, #560]	; (8000ad8 <main+0x2e4>)
 80008a6:	f003 fa95 	bl	8003dd4 <siprintf>

				HAL_UART_Transmit(&huart1, DATA2, sizeof(DATA2), HAL_MAX_DELAY);
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	2205      	movs	r2, #5
 80008b0:	4989      	ldr	r1, [pc, #548]	; (8000ad8 <main+0x2e4>)
 80008b2:	4882      	ldr	r0, [pc, #520]	; (8000abc <main+0x2c8>)
 80008b4:	f002 ff93 	bl	80037de <HAL_UART_Transmit>
			for (int i = 0; i <= 999; i++) {
 80008b8:	6a3b      	ldr	r3, [r7, #32]
 80008ba:	3301      	adds	r3, #1
 80008bc:	623b      	str	r3, [r7, #32]
 80008be:	6a3b      	ldr	r3, [r7, #32]
 80008c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80008c4:	dbe8      	blt.n	8000898 <main+0xa4>

			}
			HAL_UART_Transmit(&huart1, "\n\r", 4, 100);
 80008c6:	2364      	movs	r3, #100	; 0x64
 80008c8:	2204      	movs	r2, #4
 80008ca:	4980      	ldr	r1, [pc, #512]	; (8000acc <main+0x2d8>)
 80008cc:	487b      	ldr	r0, [pc, #492]	; (8000abc <main+0x2c8>)
 80008ce:	f002 ff86 	bl	80037de <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart1, "V3:", 3, 100);
 80008d2:	2364      	movs	r3, #100	; 0x64
 80008d4:	2203      	movs	r2, #3
 80008d6:	4981      	ldr	r1, [pc, #516]	; (8000adc <main+0x2e8>)
 80008d8:	4878      	ldr	r0, [pc, #480]	; (8000abc <main+0x2c8>)
 80008da:	f002 ff80 	bl	80037de <HAL_UART_Transmit>
			for (int i = 0; i <= 999; i++) {
 80008de:	2300      	movs	r3, #0
 80008e0:	61fb      	str	r3, [r7, #28]
 80008e2:	e012      	b.n	800090a <main+0x116>

				sprintf(DATA3, ";%d", ADC_VAL3[i]);
 80008e4:	4a7e      	ldr	r2, [pc, #504]	; (8000ae0 <main+0x2ec>)
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008ec:	461a      	mov	r2, r3
 80008ee:	4975      	ldr	r1, [pc, #468]	; (8000ac4 <main+0x2d0>)
 80008f0:	487c      	ldr	r0, [pc, #496]	; (8000ae4 <main+0x2f0>)
 80008f2:	f003 fa6f 	bl	8003dd4 <siprintf>

				HAL_UART_Transmit(&huart1, DATA3, sizeof(DATA3), HAL_MAX_DELAY);
 80008f6:	f04f 33ff 	mov.w	r3, #4294967295
 80008fa:	2205      	movs	r2, #5
 80008fc:	4979      	ldr	r1, [pc, #484]	; (8000ae4 <main+0x2f0>)
 80008fe:	486f      	ldr	r0, [pc, #444]	; (8000abc <main+0x2c8>)
 8000900:	f002 ff6d 	bl	80037de <HAL_UART_Transmit>
			for (int i = 0; i <= 999; i++) {
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	3301      	adds	r3, #1
 8000908:	61fb      	str	r3, [r7, #28]
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000910:	dbe8      	blt.n	80008e4 <main+0xf0>

			}
			HAL_UART_Transmit(&huart1, "\n\r", 4, 100);
 8000912:	2364      	movs	r3, #100	; 0x64
 8000914:	2204      	movs	r2, #4
 8000916:	496d      	ldr	r1, [pc, #436]	; (8000acc <main+0x2d8>)
 8000918:	4868      	ldr	r0, [pc, #416]	; (8000abc <main+0x2c8>)
 800091a:	f002 ff60 	bl	80037de <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart1, "V4:", 3, 100);
 800091e:	2364      	movs	r3, #100	; 0x64
 8000920:	2203      	movs	r2, #3
 8000922:	4971      	ldr	r1, [pc, #452]	; (8000ae8 <main+0x2f4>)
 8000924:	4865      	ldr	r0, [pc, #404]	; (8000abc <main+0x2c8>)
 8000926:	f002 ff5a 	bl	80037de <HAL_UART_Transmit>
			for (int i = 0; i <= 999; i++) {
 800092a:	2300      	movs	r3, #0
 800092c:	61bb      	str	r3, [r7, #24]
 800092e:	e012      	b.n	8000956 <main+0x162>

				sprintf(DATA4, ";%d", ADC_VAL4[i]);
 8000930:	4a6e      	ldr	r2, [pc, #440]	; (8000aec <main+0x2f8>)
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000938:	461a      	mov	r2, r3
 800093a:	4962      	ldr	r1, [pc, #392]	; (8000ac4 <main+0x2d0>)
 800093c:	486c      	ldr	r0, [pc, #432]	; (8000af0 <main+0x2fc>)
 800093e:	f003 fa49 	bl	8003dd4 <siprintf>

				HAL_UART_Transmit(&huart1, DATA4, sizeof(DATA4), HAL_MAX_DELAY);
 8000942:	f04f 33ff 	mov.w	r3, #4294967295
 8000946:	2205      	movs	r2, #5
 8000948:	4969      	ldr	r1, [pc, #420]	; (8000af0 <main+0x2fc>)
 800094a:	485c      	ldr	r0, [pc, #368]	; (8000abc <main+0x2c8>)
 800094c:	f002 ff47 	bl	80037de <HAL_UART_Transmit>
			for (int i = 0; i <= 999; i++) {
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	3301      	adds	r3, #1
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800095c:	dbe8      	blt.n	8000930 <main+0x13c>

			}
			HAL_UART_Transmit(&huart1, "\n\r", 4, 100);
 800095e:	2364      	movs	r3, #100	; 0x64
 8000960:	2204      	movs	r2, #4
 8000962:	495a      	ldr	r1, [pc, #360]	; (8000acc <main+0x2d8>)
 8000964:	4855      	ldr	r0, [pc, #340]	; (8000abc <main+0x2c8>)
 8000966:	f002 ff3a 	bl	80037de <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart1, "V5:", 3, 100);
 800096a:	2364      	movs	r3, #100	; 0x64
 800096c:	2203      	movs	r2, #3
 800096e:	4961      	ldr	r1, [pc, #388]	; (8000af4 <main+0x300>)
 8000970:	4852      	ldr	r0, [pc, #328]	; (8000abc <main+0x2c8>)
 8000972:	f002 ff34 	bl	80037de <HAL_UART_Transmit>
			for (int i = 0; i <= 999; i++) {
 8000976:	2300      	movs	r3, #0
 8000978:	617b      	str	r3, [r7, #20]
 800097a:	e012      	b.n	80009a2 <main+0x1ae>

				sprintf(DATA5, ";%d", ADC_VAL5[i]);
 800097c:	4a5e      	ldr	r2, [pc, #376]	; (8000af8 <main+0x304>)
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000984:	461a      	mov	r2, r3
 8000986:	494f      	ldr	r1, [pc, #316]	; (8000ac4 <main+0x2d0>)
 8000988:	485c      	ldr	r0, [pc, #368]	; (8000afc <main+0x308>)
 800098a:	f003 fa23 	bl	8003dd4 <siprintf>

				HAL_UART_Transmit(&huart1, DATA5, sizeof(DATA5), HAL_MAX_DELAY);
 800098e:	f04f 33ff 	mov.w	r3, #4294967295
 8000992:	2205      	movs	r2, #5
 8000994:	4959      	ldr	r1, [pc, #356]	; (8000afc <main+0x308>)
 8000996:	4849      	ldr	r0, [pc, #292]	; (8000abc <main+0x2c8>)
 8000998:	f002 ff21 	bl	80037de <HAL_UART_Transmit>
			for (int i = 0; i <= 999; i++) {
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	3301      	adds	r3, #1
 80009a0:	617b      	str	r3, [r7, #20]
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009a8:	dbe8      	blt.n	800097c <main+0x188>

			}
			HAL_UART_Transmit(&huart1, "\n\r", 4, 100);
 80009aa:	2364      	movs	r3, #100	; 0x64
 80009ac:	2204      	movs	r2, #4
 80009ae:	4947      	ldr	r1, [pc, #284]	; (8000acc <main+0x2d8>)
 80009b0:	4842      	ldr	r0, [pc, #264]	; (8000abc <main+0x2c8>)
 80009b2:	f002 ff14 	bl	80037de <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart1, "V6:", 3, 100);
 80009b6:	2364      	movs	r3, #100	; 0x64
 80009b8:	2203      	movs	r2, #3
 80009ba:	4951      	ldr	r1, [pc, #324]	; (8000b00 <main+0x30c>)
 80009bc:	483f      	ldr	r0, [pc, #252]	; (8000abc <main+0x2c8>)
 80009be:	f002 ff0e 	bl	80037de <HAL_UART_Transmit>
			for (int i = 0; i <= 999; i++) {
 80009c2:	2300      	movs	r3, #0
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	e012      	b.n	80009ee <main+0x1fa>

				sprintf(DATA6, ";%d", ADC_VAL6[i]);
 80009c8:	4a4e      	ldr	r2, [pc, #312]	; (8000b04 <main+0x310>)
 80009ca:	693b      	ldr	r3, [r7, #16]
 80009cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009d0:	461a      	mov	r2, r3
 80009d2:	493c      	ldr	r1, [pc, #240]	; (8000ac4 <main+0x2d0>)
 80009d4:	484c      	ldr	r0, [pc, #304]	; (8000b08 <main+0x314>)
 80009d6:	f003 f9fd 	bl	8003dd4 <siprintf>

				HAL_UART_Transmit(&huart1, DATA6, sizeof(DATA6), HAL_MAX_DELAY);
 80009da:	f04f 33ff 	mov.w	r3, #4294967295
 80009de:	2205      	movs	r2, #5
 80009e0:	4949      	ldr	r1, [pc, #292]	; (8000b08 <main+0x314>)
 80009e2:	4836      	ldr	r0, [pc, #216]	; (8000abc <main+0x2c8>)
 80009e4:	f002 fefb 	bl	80037de <HAL_UART_Transmit>
			for (int i = 0; i <= 999; i++) {
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	3301      	adds	r3, #1
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	693b      	ldr	r3, [r7, #16]
 80009f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009f4:	dbe8      	blt.n	80009c8 <main+0x1d4>

			}
			HAL_UART_Transmit(&huart1, "\n\r", 4, 100);
 80009f6:	2364      	movs	r3, #100	; 0x64
 80009f8:	2204      	movs	r2, #4
 80009fa:	4934      	ldr	r1, [pc, #208]	; (8000acc <main+0x2d8>)
 80009fc:	482f      	ldr	r0, [pc, #188]	; (8000abc <main+0x2c8>)
 80009fe:	f002 feee 	bl	80037de <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart1, "V7:", 3, 100);
 8000a02:	2364      	movs	r3, #100	; 0x64
 8000a04:	2203      	movs	r2, #3
 8000a06:	4941      	ldr	r1, [pc, #260]	; (8000b0c <main+0x318>)
 8000a08:	482c      	ldr	r0, [pc, #176]	; (8000abc <main+0x2c8>)
 8000a0a:	f002 fee8 	bl	80037de <HAL_UART_Transmit>
			for (int i = 0; i <= 999; i++) {
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	e012      	b.n	8000a3a <main+0x246>

				sprintf(DATA7, ";%d", ADC_VAL7[i]);
 8000a14:	4a3e      	ldr	r2, [pc, #248]	; (8000b10 <main+0x31c>)
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4929      	ldr	r1, [pc, #164]	; (8000ac4 <main+0x2d0>)
 8000a20:	483c      	ldr	r0, [pc, #240]	; (8000b14 <main+0x320>)
 8000a22:	f003 f9d7 	bl	8003dd4 <siprintf>

				HAL_UART_Transmit(&huart1, DATA7, sizeof(DATA7), HAL_MAX_DELAY);
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	2205      	movs	r2, #5
 8000a2c:	4939      	ldr	r1, [pc, #228]	; (8000b14 <main+0x320>)
 8000a2e:	4823      	ldr	r0, [pc, #140]	; (8000abc <main+0x2c8>)
 8000a30:	f002 fed5 	bl	80037de <HAL_UART_Transmit>
			for (int i = 0; i <= 999; i++) {
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	3301      	adds	r3, #1
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a40:	dbe8      	blt.n	8000a14 <main+0x220>

			}
			HAL_UART_Transmit(&huart1, "\n\r", 4, 100);
 8000a42:	2364      	movs	r3, #100	; 0x64
 8000a44:	2204      	movs	r2, #4
 8000a46:	4921      	ldr	r1, [pc, #132]	; (8000acc <main+0x2d8>)
 8000a48:	481c      	ldr	r0, [pc, #112]	; (8000abc <main+0x2c8>)
 8000a4a:	f002 fec8 	bl	80037de <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart1, "V8:", 3, 100);
 8000a4e:	2364      	movs	r3, #100	; 0x64
 8000a50:	2203      	movs	r2, #3
 8000a52:	4931      	ldr	r1, [pc, #196]	; (8000b18 <main+0x324>)
 8000a54:	4819      	ldr	r0, [pc, #100]	; (8000abc <main+0x2c8>)
 8000a56:	f002 fec2 	bl	80037de <HAL_UART_Transmit>
			for (int i = 0; i <= 999; i++) {
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60bb      	str	r3, [r7, #8]
 8000a5e:	e012      	b.n	8000a86 <main+0x292>

				sprintf(DATA8, ";%d", ADC_VAL8[i]);
 8000a60:	4a2e      	ldr	r2, [pc, #184]	; (8000b1c <main+0x328>)
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a68:	461a      	mov	r2, r3
 8000a6a:	4916      	ldr	r1, [pc, #88]	; (8000ac4 <main+0x2d0>)
 8000a6c:	482c      	ldr	r0, [pc, #176]	; (8000b20 <main+0x32c>)
 8000a6e:	f003 f9b1 	bl	8003dd4 <siprintf>

				HAL_UART_Transmit(&huart1, DATA8, sizeof(DATA8), HAL_MAX_DELAY);
 8000a72:	f04f 33ff 	mov.w	r3, #4294967295
 8000a76:	2205      	movs	r2, #5
 8000a78:	4929      	ldr	r1, [pc, #164]	; (8000b20 <main+0x32c>)
 8000a7a:	4810      	ldr	r0, [pc, #64]	; (8000abc <main+0x2c8>)
 8000a7c:	f002 feaf 	bl	80037de <HAL_UART_Transmit>
			for (int i = 0; i <= 999; i++) {
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	3301      	adds	r3, #1
 8000a84:	60bb      	str	r3, [r7, #8]
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a8c:	dbe8      	blt.n	8000a60 <main+0x26c>

			}
			HAL_UART_Transmit(&huart1, "\n\r", 4, 100);
 8000a8e:	2364      	movs	r3, #100	; 0x64
 8000a90:	2204      	movs	r2, #4
 8000a92:	490e      	ldr	r1, [pc, #56]	; (8000acc <main+0x2d8>)
 8000a94:	4809      	ldr	r0, [pc, #36]	; (8000abc <main+0x2c8>)
 8000a96:	f002 fea2 	bl	80037de <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart1, "V9", 3, 100);
 8000a9a:	2364      	movs	r3, #100	; 0x64
 8000a9c:	2203      	movs	r2, #3
 8000a9e:	4921      	ldr	r1, [pc, #132]	; (8000b24 <main+0x330>)
 8000aa0:	4806      	ldr	r0, [pc, #24]	; (8000abc <main+0x2c8>)
 8000aa2:	f002 fe9c 	bl	80037de <HAL_UART_Transmit>
			for (int i = 0; i <= 999; i++) {
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	607b      	str	r3, [r7, #4]
 8000aaa:	e050      	b.n	8000b4e <main+0x35a>
 8000aac:	20004f8c 	.word	0x20004f8c
 8000ab0:	2000008c 	.word	0x2000008c
 8000ab4:	40020000 	.word	0x40020000
 8000ab8:	08004648 	.word	0x08004648
 8000abc:	20002ff8 	.word	0x20002ff8
 8000ac0:	20003fdc 	.word	0x20003fdc
 8000ac4:	0800464c 	.word	0x0800464c
 8000ac8:	200000a0 	.word	0x200000a0
 8000acc:	08004650 	.word	0x08004650
 8000ad0:	08004654 	.word	0x08004654
 8000ad4:	20004fd4 	.word	0x20004fd4
 8000ad8:	20002000 	.word	0x20002000
 8000adc:	08004658 	.word	0x08004658
 8000ae0:	20002058 	.word	0x20002058
 8000ae4:	20001050 	.word	0x20001050
 8000ae8:	0800465c 	.word	0x0800465c
 8000aec:	20007f00 	.word	0x20007f00
 8000af0:	20004f7c 	.word	0x20004f7c
 8000af4:	08004660 	.word	0x08004660
 8000af8:	2000303c 	.word	0x2000303c
 8000afc:	200000a8 	.word	0x200000a8
 8000b00:	08004664 	.word	0x08004664
 8000b04:	20001060 	.word	0x20001060
 8000b08:	20002008 	.word	0x20002008
 8000b0c:	08004668 	.word	0x08004668
 8000b10:	20006f58 	.word	0x20006f58
 8000b14:	20001058 	.word	0x20001058
 8000b18:	0800466c 	.word	0x0800466c
 8000b1c:	20005fb8 	.word	0x20005fb8
 8000b20:	20004f84 	.word	0x20004f84
 8000b24:	08004670 	.word	0x08004670

				sprintf(DATA9, ";%d", ADC_VAL9[i]);
 8000b28:	4a13      	ldr	r2, [pc, #76]	; (8000b78 <main+0x384>)
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4912      	ldr	r1, [pc, #72]	; (8000b7c <main+0x388>)
 8000b34:	4812      	ldr	r0, [pc, #72]	; (8000b80 <main+0x38c>)
 8000b36:	f003 f94d 	bl	8003dd4 <siprintf>

				HAL_UART_Transmit(&huart1, DATA9, sizeof(DATA9), HAL_MAX_DELAY);
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3e:	2205      	movs	r2, #5
 8000b40:	490f      	ldr	r1, [pc, #60]	; (8000b80 <main+0x38c>)
 8000b42:	4810      	ldr	r0, [pc, #64]	; (8000b84 <main+0x390>)
 8000b44:	f002 fe4b 	bl	80037de <HAL_UART_Transmit>
			for (int i = 0; i <= 999; i++) {
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b54:	dbe8      	blt.n	8000b28 <main+0x334>

			}
			HAL_UART_Transmit(&huart1, "\n\r", 4, 100);
 8000b56:	2364      	movs	r3, #100	; 0x64
 8000b58:	2204      	movs	r2, #4
 8000b5a:	490b      	ldr	r1, [pc, #44]	; (8000b88 <main+0x394>)
 8000b5c:	4809      	ldr	r0, [pc, #36]	; (8000b84 <main+0x390>)
 8000b5e:	f002 fe3e 	bl	80037de <HAL_UART_Transmit>




		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b68:	4808      	ldr	r0, [pc, #32]	; (8000b8c <main+0x398>)
 8000b6a:	f001 fcaf 	bl	80024cc <HAL_GPIO_WritePin>
		  HAL_TIM_Base_Start_IT(&htim2);
 8000b6e:	4808      	ldr	r0, [pc, #32]	; (8000b90 <main+0x39c>)
 8000b70:	f002 f988 	bl	8002e84 <HAL_TIM_Base_Start_IT>
		if (FLAG_ADC == 1) {
 8000b74:	e654      	b.n	8000820 <main+0x2c>
 8000b76:	bf00      	nop
 8000b78:	200000b0 	.word	0x200000b0
 8000b7c:	0800464c 	.word	0x0800464c
 8000b80:	20007ef8 	.word	0x20007ef8
 8000b84:	20002ff8 	.word	0x20002ff8
 8000b88:	08004650 	.word	0x08004650
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	20004f8c 	.word	0x20004f8c

08000b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b094      	sub	sp, #80	; 0x50
 8000b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9a:	f107 0320 	add.w	r3, r7, #32
 8000b9e:	2230      	movs	r2, #48	; 0x30
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f003 f90e 	bl	8003dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba8:	f107 030c 	add.w	r3, r7, #12
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]
 8000bbc:	4b28      	ldr	r3, [pc, #160]	; (8000c60 <SystemClock_Config+0xcc>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	4a27      	ldr	r2, [pc, #156]	; (8000c60 <SystemClock_Config+0xcc>)
 8000bc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc8:	4b25      	ldr	r3, [pc, #148]	; (8000c60 <SystemClock_Config+0xcc>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	60bb      	str	r3, [r7, #8]
 8000bd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <SystemClock_Config+0xd0>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a21      	ldr	r2, [pc, #132]	; (8000c64 <SystemClock_Config+0xd0>)
 8000bde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000be2:	6013      	str	r3, [r2, #0]
 8000be4:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <SystemClock_Config+0xd0>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bec:	607b      	str	r3, [r7, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bfe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c04:	2308      	movs	r3, #8
 8000c06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000c08:	2354      	movs	r3, #84	; 0x54
 8000c0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c10:	2304      	movs	r3, #4
 8000c12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c14:	f107 0320 	add.w	r3, r7, #32
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f001 fc71 	bl	8002500 <HAL_RCC_OscConfig>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c24:	f000 fb3e 	bl	80012a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c28:	230f      	movs	r3, #15
 8000c2a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c40:	f107 030c 	add.w	r3, r7, #12
 8000c44:	2102      	movs	r1, #2
 8000c46:	4618      	mov	r0, r3
 8000c48:	f001 fed2 	bl	80029f0 <HAL_RCC_ClockConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c52:	f000 fb27 	bl	80012a4 <Error_Handler>
  }
}
 8000c56:	bf00      	nop
 8000c58:	3750      	adds	r7, #80	; 0x50
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40007000 	.word	0x40007000

08000c68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c6e:	463b      	mov	r3, r7
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
 8000c74:	605a      	str	r2, [r3, #4]
 8000c76:	609a      	str	r2, [r3, #8]
 8000c78:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c7a:	4b59      	ldr	r3, [pc, #356]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000c7c:	4a59      	ldr	r2, [pc, #356]	; (8000de4 <MX_ADC1_Init+0x17c>)
 8000c7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c80:	4b57      	ldr	r3, [pc, #348]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c86:	4b56      	ldr	r3, [pc, #344]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000c8c:	4b54      	ldr	r3, [pc, #336]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c92:	4b53      	ldr	r3, [pc, #332]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000c94:	2201      	movs	r2, #1
 8000c96:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c98:	4b51      	ldr	r3, [pc, #324]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca0:	4b4f      	ldr	r3, [pc, #316]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca6:	4b4e      	ldr	r3, [pc, #312]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000ca8:	4a4f      	ldr	r2, [pc, #316]	; (8000de8 <MX_ADC1_Init+0x180>)
 8000caa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cac:	4b4c      	ldr	r3, [pc, #304]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8000cb2:	4b4b      	ldr	r3, [pc, #300]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000cb4:	2209      	movs	r2, #9
 8000cb6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cb8:	4b49      	ldr	r3, [pc, #292]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cc0:	4b47      	ldr	r3, [pc, #284]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc6:	4846      	ldr	r0, [pc, #280]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000cc8:	f000 fd52 	bl	8001770 <HAL_ADC_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000cd2:	f000 fae7 	bl	80012a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000cde:	2307      	movs	r3, #7
 8000ce0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	483e      	ldr	r0, [pc, #248]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000ce8:	f000 ff24 	bl	8001b34 <HAL_ADC_ConfigChannel>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000cf2:	f000 fad7 	bl	80012a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000cf6:	2305      	movs	r3, #5
 8000cf8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cfe:	463b      	mov	r3, r7
 8000d00:	4619      	mov	r1, r3
 8000d02:	4837      	ldr	r0, [pc, #220]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000d04:	f000 ff16 	bl	8001b34 <HAL_ADC_ConfigChannel>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000d0e:	f000 fac9 	bl	80012a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d12:	2306      	movs	r3, #6
 8000d14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000d16:	2303      	movs	r3, #3
 8000d18:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d1a:	463b      	mov	r3, r7
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4830      	ldr	r0, [pc, #192]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000d20:	f000 ff08 	bl	8001b34 <HAL_ADC_ConfigChannel>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000d2a:	f000 fabb 	bl	80012a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d2e:	2307      	movs	r3, #7
 8000d30:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000d32:	2304      	movs	r3, #4
 8000d34:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d36:	463b      	mov	r3, r7
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4829      	ldr	r0, [pc, #164]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000d3c:	f000 fefa 	bl	8001b34 <HAL_ADC_ConfigChannel>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000d46:	f000 faad 	bl	80012a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d4a:	2308      	movs	r3, #8
 8000d4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000d4e:	2305      	movs	r3, #5
 8000d50:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	4619      	mov	r1, r3
 8000d56:	4822      	ldr	r0, [pc, #136]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000d58:	f000 feec 	bl	8001b34 <HAL_ADC_ConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000d62:	f000 fa9f 	bl	80012a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000d66:	2309      	movs	r3, #9
 8000d68:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000d6a:	2306      	movs	r3, #6
 8000d6c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d6e:	463b      	mov	r3, r7
 8000d70:	4619      	mov	r1, r3
 8000d72:	481b      	ldr	r0, [pc, #108]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000d74:	f000 fede 	bl	8001b34 <HAL_ADC_ConfigChannel>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8000d7e:	f000 fa91 	bl	80012a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000d82:	230c      	movs	r3, #12
 8000d84:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000d86:	2307      	movs	r3, #7
 8000d88:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d8a:	463b      	mov	r3, r7
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4814      	ldr	r0, [pc, #80]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000d90:	f000 fed0 	bl	8001b34 <HAL_ADC_ConfigChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8000d9a:	f000 fa83 	bl	80012a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000d9e:	230e      	movs	r3, #14
 8000da0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000da2:	2308      	movs	r3, #8
 8000da4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da6:	463b      	mov	r3, r7
 8000da8:	4619      	mov	r1, r3
 8000daa:	480d      	ldr	r0, [pc, #52]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000dac:	f000 fec2 	bl	8001b34 <HAL_ADC_ConfigChannel>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000db6:	f000 fa75 	bl	80012a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000dba:	230f      	movs	r3, #15
 8000dbc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8000dbe:	2309      	movs	r3, #9
 8000dc0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4806      	ldr	r0, [pc, #24]	; (8000de0 <MX_ADC1_Init+0x178>)
 8000dc8:	f000 feb4 	bl	8001b34 <HAL_ADC_ConfigChannel>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8000dd2:	f000 fa67 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	3710      	adds	r7, #16
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20002010 	.word	0x20002010
 8000de4:	40012000 	.word	0x40012000
 8000de8:	0f000001 	.word	0x0f000001

08000dec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000df2:	f107 0308 	add.w	r3, r7, #8
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e00:	463b      	mov	r3, r7
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e08:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <MX_TIM2_Init+0x94>)
 8000e0a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400;
 8000e10:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <MX_TIM2_Init+0x94>)
 8000e12:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000e16:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e18:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <MX_TIM2_Init+0x94>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <MX_TIM2_Init+0x94>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e24:	4b16      	ldr	r3, [pc, #88]	; (8000e80 <MX_TIM2_Init+0x94>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <MX_TIM2_Init+0x94>)
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e30:	4813      	ldr	r0, [pc, #76]	; (8000e80 <MX_TIM2_Init+0x94>)
 8000e32:	f001 ffd7 	bl	8002de4 <HAL_TIM_Base_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000e3c:	f000 fa32 	bl	80012a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e46:	f107 0308 	add.w	r3, r7, #8
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480c      	ldr	r0, [pc, #48]	; (8000e80 <MX_TIM2_Init+0x94>)
 8000e4e:	f002 f9c0 	bl	80031d2 <HAL_TIM_ConfigClockSource>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e58:	f000 fa24 	bl	80012a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e60:	2300      	movs	r3, #0
 8000e62:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e64:	463b      	mov	r3, r7
 8000e66:	4619      	mov	r1, r3
 8000e68:	4805      	ldr	r0, [pc, #20]	; (8000e80 <MX_TIM2_Init+0x94>)
 8000e6a:	f002 fbdb 	bl	8003624 <HAL_TIMEx_MasterConfigSynchronization>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e74:	f000 fa16 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	3718      	adds	r7, #24
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20004f8c 	.word	0x20004f8c

08000e84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000e8a:	4a12      	ldr	r2, [pc, #72]	; (8000ed4 <MX_USART1_UART_Init+0x50>)
 8000e8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8000e8e:	4b10      	ldr	r3, [pc, #64]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000e90:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8000e94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b0e      	ldr	r3, [pc, #56]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b0b      	ldr	r3, [pc, #44]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b08      	ldr	r3, [pc, #32]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eba:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_USART1_UART_Init+0x4c>)
 8000ebc:	f002 fc42 	bl	8003744 <HAL_UART_Init>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ec6:	f000 f9ed 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20002ff8 	.word	0x20002ff8
 8000ed4:	40011000 	.word	0x40011000

08000ed8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <MX_USART2_UART_Init+0x50>)
 8000ee0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000ee4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eea:	4b0e      	ldr	r3, [pc, #56]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000efc:	4b09      	ldr	r3, [pc, #36]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000efe:	220c      	movs	r2, #12
 8000f00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f02:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f08:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f0e:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_USART2_UART_Init+0x4c>)
 8000f10:	f002 fc18 	bl	8003744 <HAL_UART_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f1a:	f000 f9c3 	bl	80012a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20005f74 	.word	0x20005f74
 8000f28:	40004400 	.word	0x40004400

08000f2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08c      	sub	sp, #48	; 0x30
 8000f30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
 8000f3c:	609a      	str	r2, [r3, #8]
 8000f3e:	60da      	str	r2, [r3, #12]
 8000f40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
 8000f46:	4b54      	ldr	r3, [pc, #336]	; (8001098 <MX_GPIO_Init+0x16c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a53      	ldr	r2, [pc, #332]	; (8001098 <MX_GPIO_Init+0x16c>)
 8000f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b51      	ldr	r3, [pc, #324]	; (8001098 <MX_GPIO_Init+0x16c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f5a:	61bb      	str	r3, [r7, #24]
 8000f5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	4b4d      	ldr	r3, [pc, #308]	; (8001098 <MX_GPIO_Init+0x16c>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f66:	4a4c      	ldr	r2, [pc, #304]	; (8001098 <MX_GPIO_Init+0x16c>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6e:	4b4a      	ldr	r3, [pc, #296]	; (8001098 <MX_GPIO_Init+0x16c>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	617b      	str	r3, [r7, #20]
 8000f78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	4b46      	ldr	r3, [pc, #280]	; (8001098 <MX_GPIO_Init+0x16c>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a45      	ldr	r2, [pc, #276]	; (8001098 <MX_GPIO_Init+0x16c>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b43      	ldr	r3, [pc, #268]	; (8001098 <MX_GPIO_Init+0x16c>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	4b3f      	ldr	r3, [pc, #252]	; (8001098 <MX_GPIO_Init+0x16c>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a3e      	ldr	r2, [pc, #248]	; (8001098 <MX_GPIO_Init+0x16c>)
 8000fa0:	f043 0302 	orr.w	r3, r3, #2
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b3c      	ldr	r3, [pc, #240]	; (8001098 <MX_GPIO_Init+0x16c>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0302 	and.w	r3, r3, #2
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
 8000fb6:	4b38      	ldr	r3, [pc, #224]	; (8001098 <MX_GPIO_Init+0x16c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a37      	ldr	r2, [pc, #220]	; (8001098 <MX_GPIO_Init+0x16c>)
 8000fbc:	f043 0310 	orr.w	r3, r3, #16
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b35      	ldr	r3, [pc, #212]	; (8001098 <MX_GPIO_Init+0x16c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0310 	and.w	r3, r3, #16
 8000fca:	60bb      	str	r3, [r7, #8]
 8000fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	4b31      	ldr	r3, [pc, #196]	; (8001098 <MX_GPIO_Init+0x16c>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd6:	4a30      	ldr	r2, [pc, #192]	; (8001098 <MX_GPIO_Init+0x16c>)
 8000fd8:	f043 0308 	orr.w	r3, r3, #8
 8000fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fde:	4b2e      	ldr	r3, [pc, #184]	; (8001098 <MX_GPIO_Init+0x16c>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14
 8000fea:	2200      	movs	r2, #0
 8000fec:	f44f 4166 	mov.w	r1, #58880	; 0xe600
 8000ff0:	482a      	ldr	r0, [pc, #168]	; (800109c <MX_GPIO_Init+0x170>)
 8000ff2:	f001 fa6b 	bl	80024cc <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_12, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8000ffc:	4828      	ldr	r0, [pc, #160]	; (80010a0 <MX_GPIO_Init+0x174>)
 8000ffe:	f001 fa65 	bl	80024cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	2118      	movs	r1, #24
 8001006:	4827      	ldr	r0, [pc, #156]	; (80010a4 <MX_GPIO_Init+0x178>)
 8001008:	f001 fa60 	bl	80024cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001012:	4825      	ldr	r0, [pc, #148]	; (80010a8 <MX_GPIO_Init+0x17c>)
 8001014:	f001 fa5a 	bl	80024cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE9 PE10 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14
 8001018:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 800101c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	481a      	ldr	r0, [pc, #104]	; (800109c <MX_GPIO_Init+0x170>)
 8001032:	f001 f8af 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001036:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 800103a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	4814      	ldr	r0, [pc, #80]	; (80010a0 <MX_GPIO_Init+0x174>)
 8001050:	f001 f8a0 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001054:	2318      	movs	r3, #24
 8001056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001058:	2301      	movs	r3, #1
 800105a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001064:	f107 031c 	add.w	r3, r7, #28
 8001068:	4619      	mov	r1, r3
 800106a:	480e      	ldr	r0, [pc, #56]	; (80010a4 <MX_GPIO_Init+0x178>)
 800106c:	f001 f892 	bl	8002194 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001070:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001074:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	2301      	movs	r3, #1
 8001078:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	4807      	ldr	r0, [pc, #28]	; (80010a8 <MX_GPIO_Init+0x17c>)
 800108a:	f001 f883 	bl	8002194 <HAL_GPIO_Init>

}
 800108e:	bf00      	nop
 8001090:	3730      	adds	r7, #48	; 0x30
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40021000 	.word	0x40021000
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40020c00 	.word	0x40020c00
 80010a8:	40020400 	.word	0x40020400

080010ac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void 	HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]




		SelectCh4();
 80010b4:	f7ff fa58 	bl	8000568 <SelectCh4>
	  	  	HAL_ADC_Start(&hadc1);
 80010b8:	486d      	ldr	r0, [pc, #436]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80010ba:	f000 fb9d 	bl	80017f8 <HAL_ADC_Start>
	  	  	HAL_ADC_PollForConversion(&hadc1, 100);
 80010be:	2164      	movs	r1, #100	; 0x64
 80010c0:	486b      	ldr	r0, [pc, #428]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80010c2:	f000 fc9e 	bl	8001a02 <HAL_ADC_PollForConversion>
	  	    ADC_VAL[indice]=HAL_ADC_GetValue(&hadc1);
 80010c6:	486a      	ldr	r0, [pc, #424]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80010c8:	f000 fd26 	bl	8001b18 <HAL_ADC_GetValue>
 80010cc:	4602      	mov	r2, r0
 80010ce:	4b69      	ldr	r3, [pc, #420]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4611      	mov	r1, r2
 80010d4:	4a68      	ldr	r2, [pc, #416]	; (8001278 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80010d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	    HAL_ADC_Stop(&hadc1);
 80010da:	4865      	ldr	r0, [pc, #404]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80010dc:	f000 fc5e 	bl	800199c <HAL_ADC_Stop>

	  	  SelectCh5();
 80010e0:	f7ff fa62 	bl	80005a8 <SelectCh5>
	  	  	  	  	HAL_ADC_Start(&hadc1);
 80010e4:	4862      	ldr	r0, [pc, #392]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80010e6:	f000 fb87 	bl	80017f8 <HAL_ADC_Start>
	  	  	  	  	HAL_ADC_PollForConversion(&hadc1, 100);
 80010ea:	2164      	movs	r1, #100	; 0x64
 80010ec:	4860      	ldr	r0, [pc, #384]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80010ee:	f000 fc88 	bl	8001a02 <HAL_ADC_PollForConversion>
	  	  	  	    ADC_VAL2[indice]=HAL_ADC_GetValue(&hadc1);
 80010f2:	485f      	ldr	r0, [pc, #380]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80010f4:	f000 fd10 	bl	8001b18 <HAL_ADC_GetValue>
 80010f8:	4602      	mov	r2, r0
 80010fa:	4b5e      	ldr	r3, [pc, #376]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4611      	mov	r1, r2
 8001100:	4a5e      	ldr	r2, [pc, #376]	; (800127c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001102:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	  	  	    HAL_ADC_Stop(&hadc1);
 8001106:	485a      	ldr	r0, [pc, #360]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001108:	f000 fc48 	bl	800199c <HAL_ADC_Stop>
	  	  	  	SelectCh6();
 800110c:	f7ff fa6c 	bl	80005e8 <SelectCh6>
	  	  	  		  	  	HAL_ADC_Start(&hadc1);
 8001110:	4857      	ldr	r0, [pc, #348]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001112:	f000 fb71 	bl	80017f8 <HAL_ADC_Start>
	  	  	  		  	  	HAL_ADC_PollForConversion(&hadc1, 100);
 8001116:	2164      	movs	r1, #100	; 0x64
 8001118:	4855      	ldr	r0, [pc, #340]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800111a:	f000 fc72 	bl	8001a02 <HAL_ADC_PollForConversion>
	  	  	  		  	    ADC_VAL3[indice]=HAL_ADC_GetValue(&hadc1);
 800111e:	4854      	ldr	r0, [pc, #336]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001120:	f000 fcfa 	bl	8001b18 <HAL_ADC_GetValue>
 8001124:	4602      	mov	r2, r0
 8001126:	4b53      	ldr	r3, [pc, #332]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4611      	mov	r1, r2
 800112c:	4a54      	ldr	r2, [pc, #336]	; (8001280 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800112e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	  	  		  	    HAL_ADC_Stop(&hadc1);
 8001132:	484f      	ldr	r0, [pc, #316]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001134:	f000 fc32 	bl	800199c <HAL_ADC_Stop>
	  	  	  		  SelectCh7();
 8001138:	f7ff fa76 	bl	8000628 <SelectCh7>
	  	  	  		  	  	  	HAL_ADC_Start(&hadc1);
 800113c:	484c      	ldr	r0, [pc, #304]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800113e:	f000 fb5b 	bl	80017f8 <HAL_ADC_Start>
	  	  	  		  	  	  	HAL_ADC_PollForConversion(&hadc1, 100);
 8001142:	2164      	movs	r1, #100	; 0x64
 8001144:	484a      	ldr	r0, [pc, #296]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001146:	f000 fc5c 	bl	8001a02 <HAL_ADC_PollForConversion>
	  	  	  		  	  	    ADC_VAL4[indice]=HAL_ADC_GetValue(&hadc1);
 800114a:	4849      	ldr	r0, [pc, #292]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800114c:	f000 fce4 	bl	8001b18 <HAL_ADC_GetValue>
 8001150:	4602      	mov	r2, r0
 8001152:	4b48      	ldr	r3, [pc, #288]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4611      	mov	r1, r2
 8001158:	4a4a      	ldr	r2, [pc, #296]	; (8001284 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800115a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	  	  		  	  	    HAL_ADC_Stop(&hadc1);
 800115e:	4844      	ldr	r0, [pc, #272]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001160:	f000 fc1c 	bl	800199c <HAL_ADC_Stop>
	  	  	  		  	SelectCh8();
 8001164:	f7ff fa80 	bl	8000668 <SelectCh8>
	  	  	  		  		  	  	HAL_ADC_Start(&hadc1);
 8001168:	4841      	ldr	r0, [pc, #260]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800116a:	f000 fb45 	bl	80017f8 <HAL_ADC_Start>
	  	  	  		  		  	  	HAL_ADC_PollForConversion(&hadc1, 100);
 800116e:	2164      	movs	r1, #100	; 0x64
 8001170:	483f      	ldr	r0, [pc, #252]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001172:	f000 fc46 	bl	8001a02 <HAL_ADC_PollForConversion>
	  	  	  		  		  	    ADC_VAL5[indice]=HAL_ADC_GetValue(&hadc1);
 8001176:	483e      	ldr	r0, [pc, #248]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001178:	f000 fcce 	bl	8001b18 <HAL_ADC_GetValue>
 800117c:	4602      	mov	r2, r0
 800117e:	4b3d      	ldr	r3, [pc, #244]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4611      	mov	r1, r2
 8001184:	4a40      	ldr	r2, [pc, #256]	; (8001288 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001186:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	  	  		  		  	    HAL_ADC_Stop(&hadc1);
 800118a:	4839      	ldr	r0, [pc, #228]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800118c:	f000 fc06 	bl	800199c <HAL_ADC_Stop>
	  	  	  		  		SelectCh9();
 8001190:	f7ff fa8a 	bl	80006a8 <SelectCh9>
	  	  	  		  			  	  	HAL_ADC_Start(&hadc1);
 8001194:	4836      	ldr	r0, [pc, #216]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001196:	f000 fb2f 	bl	80017f8 <HAL_ADC_Start>
	  	  	  		  			  	  	HAL_ADC_PollForConversion(&hadc1, 100);
 800119a:	2164      	movs	r1, #100	; 0x64
 800119c:	4834      	ldr	r0, [pc, #208]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800119e:	f000 fc30 	bl	8001a02 <HAL_ADC_PollForConversion>
	  	  	  		  			  	    ADC_VAL6[indice]=HAL_ADC_GetValue(&hadc1);
 80011a2:	4833      	ldr	r0, [pc, #204]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80011a4:	f000 fcb8 	bl	8001b18 <HAL_ADC_GetValue>
 80011a8:	4602      	mov	r2, r0
 80011aa:	4b32      	ldr	r3, [pc, #200]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4611      	mov	r1, r2
 80011b0:	4a36      	ldr	r2, [pc, #216]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80011b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	  	  		  			  	    HAL_ADC_Stop(&hadc1);
 80011b6:	482e      	ldr	r0, [pc, #184]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80011b8:	f000 fbf0 	bl	800199c <HAL_ADC_Stop>
	  	  	  		  			SelectCh12();
 80011bc:	f7ff fa94 	bl	80006e8 <SelectCh12>
	  	  	  		  				  	  	HAL_ADC_Start(&hadc1);
 80011c0:	482b      	ldr	r0, [pc, #172]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80011c2:	f000 fb19 	bl	80017f8 <HAL_ADC_Start>
	  	  	  		  				  	  	HAL_ADC_PollForConversion(&hadc1, 100);
 80011c6:	2164      	movs	r1, #100	; 0x64
 80011c8:	4829      	ldr	r0, [pc, #164]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80011ca:	f000 fc1a 	bl	8001a02 <HAL_ADC_PollForConversion>
	  	  	  		  				  	    ADC_VAL7[indice]=HAL_ADC_GetValue(&hadc1);
 80011ce:	4828      	ldr	r0, [pc, #160]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80011d0:	f000 fca2 	bl	8001b18 <HAL_ADC_GetValue>
 80011d4:	4602      	mov	r2, r0
 80011d6:	4b27      	ldr	r3, [pc, #156]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4611      	mov	r1, r2
 80011dc:	4a2c      	ldr	r2, [pc, #176]	; (8001290 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80011de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	  	  		  				  	    HAL_ADC_Stop(&hadc1);
 80011e2:	4823      	ldr	r0, [pc, #140]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80011e4:	f000 fbda 	bl	800199c <HAL_ADC_Stop>
	  	  	  		  				SelectCh14();
 80011e8:	f7ff fa9e 	bl	8000728 <SelectCh14>
	  	  	  		  					  	  	HAL_ADC_Start(&hadc1);
 80011ec:	4820      	ldr	r0, [pc, #128]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80011ee:	f000 fb03 	bl	80017f8 <HAL_ADC_Start>
	  	  	  		  					  	  	HAL_ADC_PollForConversion(&hadc1, 100);
 80011f2:	2164      	movs	r1, #100	; 0x64
 80011f4:	481e      	ldr	r0, [pc, #120]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80011f6:	f000 fc04 	bl	8001a02 <HAL_ADC_PollForConversion>
	  	  	  		  					  	    ADC_VAL8[indice]=HAL_ADC_GetValue(&hadc1);
 80011fa:	481d      	ldr	r0, [pc, #116]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80011fc:	f000 fc8c 	bl	8001b18 <HAL_ADC_GetValue>
 8001200:	4602      	mov	r2, r0
 8001202:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4611      	mov	r1, r2
 8001208:	4a22      	ldr	r2, [pc, #136]	; (8001294 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 800120a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	  	  		  					  	    HAL_ADC_Stop(&hadc1);
 800120e:	4818      	ldr	r0, [pc, #96]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001210:	f000 fbc4 	bl	800199c <HAL_ADC_Stop>


	  	  	  		  					SelectCh15();
 8001214:	f7ff faa8 	bl	8000768 <SelectCh15>
	  	  	  		  						  	  	HAL_ADC_Start(&hadc1);
 8001218:	4815      	ldr	r0, [pc, #84]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800121a:	f000 faed 	bl	80017f8 <HAL_ADC_Start>
	  	  	  		  						  	  	HAL_ADC_PollForConversion(&hadc1, 100);
 800121e:	2164      	movs	r1, #100	; 0x64
 8001220:	4813      	ldr	r0, [pc, #76]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001222:	f000 fbee 	bl	8001a02 <HAL_ADC_PollForConversion>
	  	  	  		  						  	    ADC_VAL9[indice]=HAL_ADC_GetValue(&hadc1);
 8001226:	4812      	ldr	r0, [pc, #72]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001228:	f000 fc76 	bl	8001b18 <HAL_ADC_GetValue>
 800122c:	4602      	mov	r2, r0
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4611      	mov	r1, r2
 8001234:	4a18      	ldr	r2, [pc, #96]	; (8001298 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001236:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	  	  		  						  	    HAL_ADC_Stop(&hadc1);
 800123a:	480d      	ldr	r0, [pc, #52]	; (8001270 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800123c:	f000 fbae 	bl	800199c <HAL_ADC_Stop>





	  	    indice++;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	3301      	adds	r3, #1
 8001246:	4a0b      	ldr	r2, [pc, #44]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001248:	6013      	str	r3, [r2, #0]
	  	    if (indice>=buffer){
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001252:	db08      	blt.n	8001266 <HAL_TIM_PeriodElapsedCallback+0x1ba>
	  	    	HAL_TIM_Base_Stop_IT(&htim2);
 8001254:	4811      	ldr	r0, [pc, #68]	; (800129c <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001256:	f001 fe85 	bl	8002f64 <HAL_TIM_Base_Stop_IT>
	  	    	FLAG_ADC=1;
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]
 	  	    		indice=0;
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001262:	2200      	movs	r2, #0
 8001264:	601a      	str	r2, [r3, #0]
	  	    }
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20002010 	.word	0x20002010
 8001274:	20000090 	.word	0x20000090
 8001278:	20003fdc 	.word	0x20003fdc
 800127c:	20004fd4 	.word	0x20004fd4
 8001280:	20002058 	.word	0x20002058
 8001284:	20007f00 	.word	0x20007f00
 8001288:	2000303c 	.word	0x2000303c
 800128c:	20001060 	.word	0x20001060
 8001290:	20006f58 	.word	0x20006f58
 8001294:	20005fb8 	.word	0x20005fb8
 8001298:	200000b0 	.word	0x200000b0
 800129c:	20004f8c 	.word	0x20004f8c
 80012a0:	2000008c 	.word	0x2000008c

080012a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a8:	b672      	cpsid	i
}
 80012aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ac:	e7fe      	b.n	80012ac <Error_Handler+0x8>
	...

080012b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	607b      	str	r3, [r7, #4]
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <HAL_MspInit+0x4c>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	4a0f      	ldr	r2, [pc, #60]	; (80012fc <HAL_MspInit+0x4c>)
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c4:	6453      	str	r3, [r2, #68]	; 0x44
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <HAL_MspInit+0x4c>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	603b      	str	r3, [r7, #0]
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <HAL_MspInit+0x4c>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	4a08      	ldr	r2, [pc, #32]	; (80012fc <HAL_MspInit+0x4c>)
 80012dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e0:	6413      	str	r3, [r2, #64]	; 0x40
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <HAL_MspInit+0x4c>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800

08001300 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	; 0x30
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a31      	ldr	r2, [pc, #196]	; (80013e4 <HAL_ADC_MspInit+0xe4>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d15b      	bne.n	80013da <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
 8001326:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <HAL_ADC_MspInit+0xe8>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	4a2f      	ldr	r2, [pc, #188]	; (80013e8 <HAL_ADC_MspInit+0xe8>)
 800132c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001330:	6453      	str	r3, [r2, #68]	; 0x44
 8001332:	4b2d      	ldr	r3, [pc, #180]	; (80013e8 <HAL_ADC_MspInit+0xe8>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133a:	61bb      	str	r3, [r7, #24]
 800133c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	4b29      	ldr	r3, [pc, #164]	; (80013e8 <HAL_ADC_MspInit+0xe8>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	4a28      	ldr	r2, [pc, #160]	; (80013e8 <HAL_ADC_MspInit+0xe8>)
 8001348:	f043 0304 	orr.w	r3, r3, #4
 800134c:	6313      	str	r3, [r2, #48]	; 0x30
 800134e:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <HAL_ADC_MspInit+0xe8>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
 800135e:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <HAL_ADC_MspInit+0xe8>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a21      	ldr	r2, [pc, #132]	; (80013e8 <HAL_ADC_MspInit+0xe8>)
 8001364:	f043 0301 	orr.w	r3, r3, #1
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b1f      	ldr	r3, [pc, #124]	; (80013e8 <HAL_ADC_MspInit+0xe8>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <HAL_ADC_MspInit+0xe8>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	4a1a      	ldr	r2, [pc, #104]	; (80013e8 <HAL_ADC_MspInit+0xe8>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6313      	str	r3, [r2, #48]	; 0x30
 8001386:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <HAL_ADC_MspInit+0xe8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8001392:	2334      	movs	r3, #52	; 0x34
 8001394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001396:	2303      	movs	r3, #3
 8001398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	4811      	ldr	r0, [pc, #68]	; (80013ec <HAL_ADC_MspInit+0xec>)
 80013a6:	f000 fef5 	bl	8002194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80013aa:	23f0      	movs	r3, #240	; 0xf0
 80013ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ae:	2303      	movs	r3, #3
 80013b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <HAL_ADC_MspInit+0xf0>)
 80013be:	f000 fee9 	bl	8002194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013c2:	2303      	movs	r3, #3
 80013c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c6:	2303      	movs	r3, #3
 80013c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4619      	mov	r1, r3
 80013d4:	4807      	ldr	r0, [pc, #28]	; (80013f4 <HAL_ADC_MspInit+0xf4>)
 80013d6:	f000 fedd 	bl	8002194 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80013da:	bf00      	nop
 80013dc:	3730      	adds	r7, #48	; 0x30
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40012000 	.word	0x40012000
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40020800 	.word	0x40020800
 80013f0:	40020000 	.word	0x40020000
 80013f4:	40020400 	.word	0x40020400

080013f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001408:	d115      	bne.n	8001436 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
 800140e:	4b0c      	ldr	r3, [pc, #48]	; (8001440 <HAL_TIM_Base_MspInit+0x48>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a0b      	ldr	r2, [pc, #44]	; (8001440 <HAL_TIM_Base_MspInit+0x48>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b09      	ldr	r3, [pc, #36]	; (8001440 <HAL_TIM_Base_MspInit+0x48>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60fb      	str	r3, [r7, #12]
 8001424:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	201c      	movs	r0, #28
 800142c:	f000 fe7b 	bl	8002126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001430:	201c      	movs	r0, #28
 8001432:	f000 fe94 	bl	800215e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40023800 	.word	0x40023800

08001444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08c      	sub	sp, #48	; 0x30
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	f107 031c 	add.w	r3, r7, #28
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	605a      	str	r2, [r3, #4]
 8001456:	609a      	str	r2, [r3, #8]
 8001458:	60da      	str	r2, [r3, #12]
 800145a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a32      	ldr	r2, [pc, #200]	; (800152c <HAL_UART_MspInit+0xe8>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d12d      	bne.n	80014c2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
 800146a:	4b31      	ldr	r3, [pc, #196]	; (8001530 <HAL_UART_MspInit+0xec>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	4a30      	ldr	r2, [pc, #192]	; (8001530 <HAL_UART_MspInit+0xec>)
 8001470:	f043 0310 	orr.w	r3, r3, #16
 8001474:	6453      	str	r3, [r2, #68]	; 0x44
 8001476:	4b2e      	ldr	r3, [pc, #184]	; (8001530 <HAL_UART_MspInit+0xec>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	61bb      	str	r3, [r7, #24]
 8001480:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	4b2a      	ldr	r3, [pc, #168]	; (8001530 <HAL_UART_MspInit+0xec>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a29      	ldr	r2, [pc, #164]	; (8001530 <HAL_UART_MspInit+0xec>)
 800148c:	f043 0301 	orr.w	r3, r3, #1
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b27      	ldr	r3, [pc, #156]	; (8001530 <HAL_UART_MspInit+0xec>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	617b      	str	r3, [r7, #20]
 800149c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800149e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2302      	movs	r3, #2
 80014a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ac:	2303      	movs	r3, #3
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014b0:	2307      	movs	r3, #7
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	f107 031c 	add.w	r3, r7, #28
 80014b8:	4619      	mov	r1, r3
 80014ba:	481e      	ldr	r0, [pc, #120]	; (8001534 <HAL_UART_MspInit+0xf0>)
 80014bc:	f000 fe6a 	bl	8002194 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014c0:	e030      	b.n	8001524 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a1c      	ldr	r2, [pc, #112]	; (8001538 <HAL_UART_MspInit+0xf4>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d12b      	bne.n	8001524 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
 80014d0:	4b17      	ldr	r3, [pc, #92]	; (8001530 <HAL_UART_MspInit+0xec>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	4a16      	ldr	r2, [pc, #88]	; (8001530 <HAL_UART_MspInit+0xec>)
 80014d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014da:	6413      	str	r3, [r2, #64]	; 0x40
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <HAL_UART_MspInit+0xec>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	60fb      	str	r3, [r7, #12]
 80014ec:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_UART_MspInit+0xec>)
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <HAL_UART_MspInit+0xec>)
 80014f2:	f043 0308 	orr.w	r3, r3, #8
 80014f6:	6313      	str	r3, [r2, #48]	; 0x30
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <HAL_UART_MspInit+0xec>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001504:	2360      	movs	r3, #96	; 0x60
 8001506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001508:	2302      	movs	r3, #2
 800150a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001510:	2303      	movs	r3, #3
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001514:	2307      	movs	r3, #7
 8001516:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	4619      	mov	r1, r3
 800151e:	4807      	ldr	r0, [pc, #28]	; (800153c <HAL_UART_MspInit+0xf8>)
 8001520:	f000 fe38 	bl	8002194 <HAL_GPIO_Init>
}
 8001524:	bf00      	nop
 8001526:	3730      	adds	r7, #48	; 0x30
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40011000 	.word	0x40011000
 8001530:	40023800 	.word	0x40023800
 8001534:	40020000 	.word	0x40020000
 8001538:	40004400 	.word	0x40004400
 800153c:	40020c00 	.word	0x40020c00

08001540 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001544:	e7fe      	b.n	8001544 <NMI_Handler+0x4>

08001546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001546:	b480      	push	{r7}
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800154a:	e7fe      	b.n	800154a <HardFault_Handler+0x4>

0800154c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001550:	e7fe      	b.n	8001550 <MemManage_Handler+0x4>

08001552 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001556:	e7fe      	b.n	8001556 <BusFault_Handler+0x4>

08001558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800155c:	e7fe      	b.n	800155c <UsageFault_Handler+0x4>

0800155e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800155e:	b480      	push	{r7}
 8001560:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001562:	bf00      	nop
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800158c:	f000 f8d0 	bl	8001730 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}

08001594 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001598:	4802      	ldr	r0, [pc, #8]	; (80015a4 <TIM2_IRQHandler+0x10>)
 800159a:	f001 fd12 	bl	8002fc2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20004f8c 	.word	0x20004f8c

080015a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015b0:	4a14      	ldr	r2, [pc, #80]	; (8001604 <_sbrk+0x5c>)
 80015b2:	4b15      	ldr	r3, [pc, #84]	; (8001608 <_sbrk+0x60>)
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015bc:	4b13      	ldr	r3, [pc, #76]	; (800160c <_sbrk+0x64>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d102      	bne.n	80015ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015c4:	4b11      	ldr	r3, [pc, #68]	; (800160c <_sbrk+0x64>)
 80015c6:	4a12      	ldr	r2, [pc, #72]	; (8001610 <_sbrk+0x68>)
 80015c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <_sbrk+0x64>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d207      	bcs.n	80015e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015d8:	f002 fbca 	bl	8003d70 <__errno>
 80015dc:	4603      	mov	r3, r0
 80015de:	220c      	movs	r2, #12
 80015e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295
 80015e6:	e009      	b.n	80015fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015e8:	4b08      	ldr	r3, [pc, #32]	; (800160c <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ee:	4b07      	ldr	r3, [pc, #28]	; (800160c <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	4a05      	ldr	r2, [pc, #20]	; (800160c <_sbrk+0x64>)
 80015f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015fa:	68fb      	ldr	r3, [r7, #12]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}
 8001604:	20020000 	.word	0x20020000
 8001608:	00000400 	.word	0x00000400
 800160c:	20000094 	.word	0x20000094
 8001610:	20008eb8 	.word	0x20008eb8

08001614 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <SystemInit+0x20>)
 800161a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <SystemInit+0x20>)
 8001620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001624:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001638:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001670 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800163c:	480d      	ldr	r0, [pc, #52]	; (8001674 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800163e:	490e      	ldr	r1, [pc, #56]	; (8001678 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001640:	4a0e      	ldr	r2, [pc, #56]	; (800167c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001644:	e002      	b.n	800164c <LoopCopyDataInit>

08001646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800164a:	3304      	adds	r3, #4

0800164c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800164c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800164e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001650:	d3f9      	bcc.n	8001646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001652:	4a0b      	ldr	r2, [pc, #44]	; (8001680 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001654:	4c0b      	ldr	r4, [pc, #44]	; (8001684 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001658:	e001      	b.n	800165e <LoopFillZerobss>

0800165a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800165a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800165c:	3204      	adds	r2, #4

0800165e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800165e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001660:	d3fb      	bcc.n	800165a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001662:	f7ff ffd7 	bl	8001614 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001666:	f002 fb89 	bl	8003d7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800166a:	f7ff f8c3 	bl	80007f4 <main>
  bx  lr    
 800166e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001670:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001678:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800167c:	080046d0 	.word	0x080046d0
  ldr r2, =_sbss
 8001680:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001684:	20008eb4 	.word	0x20008eb4

08001688 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001688:	e7fe      	b.n	8001688 <ADC_IRQHandler>
	...

0800168c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001690:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_Init+0x40>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a0d      	ldr	r2, [pc, #52]	; (80016cc <HAL_Init+0x40>)
 8001696:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800169a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800169c:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <HAL_Init+0x40>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0a      	ldr	r2, [pc, #40]	; (80016cc <HAL_Init+0x40>)
 80016a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <HAL_Init+0x40>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a07      	ldr	r2, [pc, #28]	; (80016cc <HAL_Init+0x40>)
 80016ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b4:	2003      	movs	r0, #3
 80016b6:	f000 fd2b 	bl	8002110 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ba:	200f      	movs	r0, #15
 80016bc:	f000 f808 	bl	80016d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c0:	f7ff fdf6 	bl	80012b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40023c00 	.word	0x40023c00

080016d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_InitTick+0x54>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <HAL_InitTick+0x58>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	4619      	mov	r1, r3
 80016e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 fd43 	bl	800217a <HAL_SYSTICK_Config>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00e      	b.n	800171c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2b0f      	cmp	r3, #15
 8001702:	d80a      	bhi.n	800171a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001704:	2200      	movs	r2, #0
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	f04f 30ff 	mov.w	r0, #4294967295
 800170c:	f000 fd0b 	bl	8002126 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001710:	4a06      	ldr	r2, [pc, #24]	; (800172c <HAL_InitTick+0x5c>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
 8001718:	e000      	b.n	800171c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
}
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000000 	.word	0x20000000
 8001728:	20000008 	.word	0x20000008
 800172c:	20000004 	.word	0x20000004

08001730 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <HAL_IncTick+0x20>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_IncTick+0x24>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4413      	add	r3, r2
 8001740:	4a04      	ldr	r2, [pc, #16]	; (8001754 <HAL_IncTick+0x24>)
 8001742:	6013      	str	r3, [r2, #0]
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	20000008 	.word	0x20000008
 8001754:	20008ea0 	.word	0x20008ea0

08001758 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  return uwTick;
 800175c:	4b03      	ldr	r3, [pc, #12]	; (800176c <HAL_GetTick+0x14>)
 800175e:	681b      	ldr	r3, [r3, #0]
}
 8001760:	4618      	mov	r0, r3
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20008ea0 	.word	0x20008ea0

08001770 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001778:	2300      	movs	r3, #0
 800177a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e033      	b.n	80017ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f7ff fdb6 	bl	8001300 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d118      	bne.n	80017e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80017b6:	f023 0302 	bic.w	r3, r3, #2
 80017ba:	f043 0202 	orr.w	r2, r3, #2
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f000 fad8 	bl	8001d78 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d2:	f023 0303 	bic.w	r3, r3, #3
 80017d6:	f043 0201 	orr.w	r2, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	641a      	str	r2, [r3, #64]	; 0x40
 80017de:	e001      	b.n	80017e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001800:	2300      	movs	r3, #0
 8001802:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800180a:	2b01      	cmp	r3, #1
 800180c:	d101      	bne.n	8001812 <HAL_ADC_Start+0x1a>
 800180e:	2302      	movs	r3, #2
 8001810:	e0b2      	b.n	8001978 <HAL_ADC_Start+0x180>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f003 0301 	and.w	r3, r3, #1
 8001824:	2b01      	cmp	r3, #1
 8001826:	d018      	beq.n	800185a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689a      	ldr	r2, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f042 0201 	orr.w	r2, r2, #1
 8001836:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001838:	4b52      	ldr	r3, [pc, #328]	; (8001984 <HAL_ADC_Start+0x18c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a52      	ldr	r2, [pc, #328]	; (8001988 <HAL_ADC_Start+0x190>)
 800183e:	fba2 2303 	umull	r2, r3, r2, r3
 8001842:	0c9a      	lsrs	r2, r3, #18
 8001844:	4613      	mov	r3, r2
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4413      	add	r3, r2
 800184a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800184c:	e002      	b.n	8001854 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	3b01      	subs	r3, #1
 8001852:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1f9      	bne.n	800184e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b01      	cmp	r3, #1
 8001866:	d17a      	bne.n	800195e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001870:	f023 0301 	bic.w	r3, r3, #1
 8001874:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001886:	2b00      	cmp	r3, #0
 8001888:	d007      	beq.n	800189a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001892:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018a6:	d106      	bne.n	80018b6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ac:	f023 0206 	bic.w	r2, r3, #6
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	645a      	str	r2, [r3, #68]	; 0x44
 80018b4:	e002      	b.n	80018bc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018c4:	4b31      	ldr	r3, [pc, #196]	; (800198c <HAL_ADC_Start+0x194>)
 80018c6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80018d0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f003 031f 	and.w	r3, r3, #31
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d12a      	bne.n	8001934 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a2b      	ldr	r2, [pc, #172]	; (8001990 <HAL_ADC_Start+0x198>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d015      	beq.n	8001914 <HAL_ADC_Start+0x11c>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a29      	ldr	r2, [pc, #164]	; (8001994 <HAL_ADC_Start+0x19c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d105      	bne.n	80018fe <HAL_ADC_Start+0x106>
 80018f2:	4b26      	ldr	r3, [pc, #152]	; (800198c <HAL_ADC_Start+0x194>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 031f 	and.w	r3, r3, #31
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00a      	beq.n	8001914 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a25      	ldr	r2, [pc, #148]	; (8001998 <HAL_ADC_Start+0x1a0>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d136      	bne.n	8001976 <HAL_ADC_Start+0x17e>
 8001908:	4b20      	ldr	r3, [pc, #128]	; (800198c <HAL_ADC_Start+0x194>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0310 	and.w	r3, r3, #16
 8001910:	2b00      	cmp	r3, #0
 8001912:	d130      	bne.n	8001976 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800191e:	2b00      	cmp	r3, #0
 8001920:	d129      	bne.n	8001976 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	e020      	b.n	8001976 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a15      	ldr	r2, [pc, #84]	; (8001990 <HAL_ADC_Start+0x198>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d11b      	bne.n	8001976 <HAL_ADC_Start+0x17e>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d114      	bne.n	8001976 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	e00b      	b.n	8001976 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001962:	f043 0210 	orr.w	r2, r3, #16
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f043 0201 	orr.w	r2, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001976:	2300      	movs	r3, #0
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	20000000 	.word	0x20000000
 8001988:	431bde83 	.word	0x431bde83
 800198c:	40012300 	.word	0x40012300
 8001990:	40012000 	.word	0x40012000
 8001994:	40012100 	.word	0x40012100
 8001998:	40012200 	.word	0x40012200

0800199c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_ADC_Stop+0x16>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e021      	b.n	80019f6 <HAL_ADC_Stop+0x5a>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0201 	bic.w	r2, r2, #1
 80019c8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0301 	and.w	r3, r3, #1
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d109      	bne.n	80019ec <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019e0:	f023 0301 	bic.w	r3, r3, #1
 80019e4:	f043 0201 	orr.w	r2, r3, #1
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b084      	sub	sp, #16
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	6078      	str	r0, [r7, #4]
 8001a0a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a1e:	d113      	bne.n	8001a48 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a2e:	d10b      	bne.n	8001a48 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a34:	f043 0220 	orr.w	r2, r3, #32
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001a44:	2301      	movs	r3, #1
 8001a46:	e063      	b.n	8001b10 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001a48:	f7ff fe86 	bl	8001758 <HAL_GetTick>
 8001a4c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a4e:	e021      	b.n	8001a94 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a56:	d01d      	beq.n	8001a94 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d007      	beq.n	8001a6e <HAL_ADC_PollForConversion+0x6c>
 8001a5e:	f7ff fe7b 	bl	8001758 <HAL_GetTick>
 8001a62:	4602      	mov	r2, r0
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d212      	bcs.n	8001a94 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0302 	and.w	r3, r3, #2
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d00b      	beq.n	8001a94 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	f043 0204 	orr.w	r2, r3, #4
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e03d      	b.n	8001b10 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d1d6      	bne.n	8001a50 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f06f 0212 	mvn.w	r2, #18
 8001aaa:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d123      	bne.n	8001b0e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d11f      	bne.n	8001b0e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d006      	beq.n	8001aea <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d111      	bne.n	8001b0e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d105      	bne.n	8001b0e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	f043 0201 	orr.w	r2, r3, #1
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d101      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x1c>
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	e105      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x228>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2201      	movs	r2, #1
 8001b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b09      	cmp	r3, #9
 8001b5e:	d925      	bls.n	8001bac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68d9      	ldr	r1, [r3, #12]
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4613      	mov	r3, r2
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	4413      	add	r3, r2
 8001b74:	3b1e      	subs	r3, #30
 8001b76:	2207      	movs	r2, #7
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43da      	mvns	r2, r3
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	400a      	ands	r2, r1
 8001b84:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68d9      	ldr	r1, [r3, #12]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	4618      	mov	r0, r3
 8001b98:	4603      	mov	r3, r0
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4403      	add	r3, r0
 8001b9e:	3b1e      	subs	r3, #30
 8001ba0:	409a      	lsls	r2, r3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	e022      	b.n	8001bf2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6919      	ldr	r1, [r3, #16]
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4613      	mov	r3, r2
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	4413      	add	r3, r2
 8001bc0:	2207      	movs	r2, #7
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43da      	mvns	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	400a      	ands	r2, r1
 8001bce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6919      	ldr	r1, [r3, #16]
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	689a      	ldr	r2, [r3, #8]
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	b29b      	uxth	r3, r3
 8001be0:	4618      	mov	r0, r3
 8001be2:	4603      	mov	r3, r0
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	4403      	add	r3, r0
 8001be8:	409a      	lsls	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b06      	cmp	r3, #6
 8001bf8:	d824      	bhi.n	8001c44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	3b05      	subs	r3, #5
 8001c0c:	221f      	movs	r2, #31
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43da      	mvns	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	400a      	ands	r2, r1
 8001c1a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	4618      	mov	r0, r3
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	3b05      	subs	r3, #5
 8001c36:	fa00 f203 	lsl.w	r2, r0, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	430a      	orrs	r2, r1
 8001c40:	635a      	str	r2, [r3, #52]	; 0x34
 8001c42:	e04c      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b0c      	cmp	r3, #12
 8001c4a:	d824      	bhi.n	8001c96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	685a      	ldr	r2, [r3, #4]
 8001c56:	4613      	mov	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	3b23      	subs	r3, #35	; 0x23
 8001c5e:	221f      	movs	r2, #31
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43da      	mvns	r2, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	400a      	ands	r2, r1
 8001c6c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	b29b      	uxth	r3, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685a      	ldr	r2, [r3, #4]
 8001c80:	4613      	mov	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	4413      	add	r3, r2
 8001c86:	3b23      	subs	r3, #35	; 0x23
 8001c88:	fa00 f203 	lsl.w	r2, r0, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	430a      	orrs	r2, r1
 8001c92:	631a      	str	r2, [r3, #48]	; 0x30
 8001c94:	e023      	b.n	8001cde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685a      	ldr	r2, [r3, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4413      	add	r3, r2
 8001ca6:	3b41      	subs	r3, #65	; 0x41
 8001ca8:	221f      	movs	r2, #31
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	400a      	ands	r2, r1
 8001cb6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	4413      	add	r3, r2
 8001cd0:	3b41      	subs	r3, #65	; 0x41
 8001cd2:	fa00 f203 	lsl.w	r2, r0, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cde:	4b22      	ldr	r3, [pc, #136]	; (8001d68 <HAL_ADC_ConfigChannel+0x234>)
 8001ce0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a21      	ldr	r2, [pc, #132]	; (8001d6c <HAL_ADC_ConfigChannel+0x238>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d109      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x1cc>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b12      	cmp	r3, #18
 8001cf2:	d105      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a19      	ldr	r2, [pc, #100]	; (8001d6c <HAL_ADC_ConfigChannel+0x238>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d123      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x21e>
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2b10      	cmp	r3, #16
 8001d10:	d003      	beq.n	8001d1a <HAL_ADC_ConfigChannel+0x1e6>
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b11      	cmp	r3, #17
 8001d18:	d11b      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2b10      	cmp	r3, #16
 8001d2c:	d111      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d2e:	4b10      	ldr	r3, [pc, #64]	; (8001d70 <HAL_ADC_ConfigChannel+0x23c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <HAL_ADC_ConfigChannel+0x240>)
 8001d34:	fba2 2303 	umull	r2, r3, r2, r3
 8001d38:	0c9a      	lsrs	r2, r3, #18
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	4413      	add	r3, r2
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d44:	e002      	b.n	8001d4c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f9      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	40012300 	.word	0x40012300
 8001d6c:	40012000 	.word	0x40012000
 8001d70:	20000000 	.word	0x20000000
 8001d74:	431bde83 	.word	0x431bde83

08001d78 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d80:	4b79      	ldr	r3, [pc, #484]	; (8001f68 <ADC_Init+0x1f0>)
 8001d82:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	431a      	orrs	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001dac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	021a      	lsls	r2, r3, #8
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dd0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	6859      	ldr	r1, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001df2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6899      	ldr	r1, [r3, #8]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68da      	ldr	r2, [r3, #12]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0a:	4a58      	ldr	r2, [pc, #352]	; (8001f6c <ADC_Init+0x1f4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d022      	beq.n	8001e56 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689a      	ldr	r2, [r3, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e1e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6899      	ldr	r1, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	689a      	ldr	r2, [r3, #8]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6899      	ldr	r1, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	e00f      	b.n	8001e76 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e74:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0202 	bic.w	r2, r2, #2
 8001e84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6899      	ldr	r1, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7e1b      	ldrb	r3, [r3, #24]
 8001e90:	005a      	lsls	r2, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d01b      	beq.n	8001edc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	685a      	ldr	r2, [r3, #4]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001eb2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ec2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6859      	ldr	r1, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	035a      	lsls	r2, r3, #13
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	e007      	b.n	8001eec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685a      	ldr	r2, [r3, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001eea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001efa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69db      	ldr	r3, [r3, #28]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	051a      	lsls	r2, r3, #20
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689a      	ldr	r2, [r3, #8]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6899      	ldr	r1, [r3, #8]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f2e:	025a      	lsls	r2, r3, #9
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	689a      	ldr	r2, [r3, #8]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6899      	ldr	r1, [r3, #8]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	029a      	lsls	r2, r3, #10
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	609a      	str	r2, [r3, #8]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40012300 	.word	0x40012300
 8001f6c:	0f000001 	.word	0x0f000001

08001f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f003 0307 	and.w	r3, r3, #7
 8001f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f86:	68ba      	ldr	r2, [r7, #8]
 8001f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fa2:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	60d3      	str	r3, [r2, #12]
}
 8001fa8:	bf00      	nop
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000ed00 	.word	0xe000ed00

08001fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fbc:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	0a1b      	lsrs	r3, r3, #8
 8001fc2:	f003 0307 	and.w	r3, r3, #7
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000ed00 	.word	0xe000ed00

08001fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	db0b      	blt.n	8001ffe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	f003 021f 	and.w	r2, r3, #31
 8001fec:	4907      	ldr	r1, [pc, #28]	; (800200c <__NVIC_EnableIRQ+0x38>)
 8001fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff2:	095b      	lsrs	r3, r3, #5
 8001ff4:	2001      	movs	r0, #1
 8001ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	e000e100 	.word	0xe000e100

08002010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	6039      	str	r1, [r7, #0]
 800201a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002020:	2b00      	cmp	r3, #0
 8002022:	db0a      	blt.n	800203a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	b2da      	uxtb	r2, r3
 8002028:	490c      	ldr	r1, [pc, #48]	; (800205c <__NVIC_SetPriority+0x4c>)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	0112      	lsls	r2, r2, #4
 8002030:	b2d2      	uxtb	r2, r2
 8002032:	440b      	add	r3, r1
 8002034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002038:	e00a      	b.n	8002050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	b2da      	uxtb	r2, r3
 800203e:	4908      	ldr	r1, [pc, #32]	; (8002060 <__NVIC_SetPriority+0x50>)
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	3b04      	subs	r3, #4
 8002048:	0112      	lsls	r2, r2, #4
 800204a:	b2d2      	uxtb	r2, r2
 800204c:	440b      	add	r3, r1
 800204e:	761a      	strb	r2, [r3, #24]
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr
 800205c:	e000e100 	.word	0xe000e100
 8002060:	e000ed00 	.word	0xe000ed00

08002064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002064:	b480      	push	{r7}
 8002066:	b089      	sub	sp, #36	; 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	60f8      	str	r0, [r7, #12]
 800206c:	60b9      	str	r1, [r7, #8]
 800206e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002078:	69fb      	ldr	r3, [r7, #28]
 800207a:	f1c3 0307 	rsb	r3, r3, #7
 800207e:	2b04      	cmp	r3, #4
 8002080:	bf28      	it	cs
 8002082:	2304      	movcs	r3, #4
 8002084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3304      	adds	r3, #4
 800208a:	2b06      	cmp	r3, #6
 800208c:	d902      	bls.n	8002094 <NVIC_EncodePriority+0x30>
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	3b03      	subs	r3, #3
 8002092:	e000      	b.n	8002096 <NVIC_EncodePriority+0x32>
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002098:	f04f 32ff 	mov.w	r2, #4294967295
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43da      	mvns	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	401a      	ands	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020ac:	f04f 31ff 	mov.w	r1, #4294967295
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa01 f303 	lsl.w	r3, r1, r3
 80020b6:	43d9      	mvns	r1, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	4313      	orrs	r3, r2
         );
}
 80020be:	4618      	mov	r0, r3
 80020c0:	3724      	adds	r7, #36	; 0x24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020dc:	d301      	bcc.n	80020e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020de:	2301      	movs	r3, #1
 80020e0:	e00f      	b.n	8002102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020e2:	4a0a      	ldr	r2, [pc, #40]	; (800210c <SysTick_Config+0x40>)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ea:	210f      	movs	r1, #15
 80020ec:	f04f 30ff 	mov.w	r0, #4294967295
 80020f0:	f7ff ff8e 	bl	8002010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020f4:	4b05      	ldr	r3, [pc, #20]	; (800210c <SysTick_Config+0x40>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020fa:	4b04      	ldr	r3, [pc, #16]	; (800210c <SysTick_Config+0x40>)
 80020fc:	2207      	movs	r2, #7
 80020fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002100:	2300      	movs	r3, #0
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	e000e010 	.word	0xe000e010

08002110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f7ff ff29 	bl	8001f70 <__NVIC_SetPriorityGrouping>
}
 800211e:	bf00      	nop
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002126:	b580      	push	{r7, lr}
 8002128:	b086      	sub	sp, #24
 800212a:	af00      	add	r7, sp, #0
 800212c:	4603      	mov	r3, r0
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
 8002132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002134:	2300      	movs	r3, #0
 8002136:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002138:	f7ff ff3e 	bl	8001fb8 <__NVIC_GetPriorityGrouping>
 800213c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68b9      	ldr	r1, [r7, #8]
 8002142:	6978      	ldr	r0, [r7, #20]
 8002144:	f7ff ff8e 	bl	8002064 <NVIC_EncodePriority>
 8002148:	4602      	mov	r2, r0
 800214a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff5d 	bl	8002010 <__NVIC_SetPriority>
}
 8002156:	bf00      	nop
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	4603      	mov	r3, r0
 8002166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff ff31 	bl	8001fd4 <__NVIC_EnableIRQ>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800217a:	b580      	push	{r7, lr}
 800217c:	b082      	sub	sp, #8
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f7ff ffa2 	bl	80020cc <SysTick_Config>
 8002188:	4603      	mov	r3, r0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002194:	b480      	push	{r7}
 8002196:	b089      	sub	sp, #36	; 0x24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	e16b      	b.n	8002488 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021b0:	2201      	movs	r2, #1
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	697a      	ldr	r2, [r7, #20]
 80021c0:	4013      	ands	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	f040 815a 	bne.w	8002482 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d005      	beq.n	80021e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d130      	bne.n	8002248 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	2203      	movs	r2, #3
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800221c:	2201      	movs	r2, #1
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa02 f303 	lsl.w	r3, r2, r3
 8002224:	43db      	mvns	r3, r3
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4013      	ands	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 0201 	and.w	r2, r3, #1
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b03      	cmp	r3, #3
 8002252:	d017      	beq.n	8002284 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d123      	bne.n	80022d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	08da      	lsrs	r2, r3, #3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3208      	adds	r2, #8
 8002298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800229c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	220f      	movs	r2, #15
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	691a      	ldr	r2, [r3, #16]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022ca:	69fb      	ldr	r3, [r7, #28]
 80022cc:	08da      	lsrs	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3208      	adds	r2, #8
 80022d2:	69b9      	ldr	r1, [r7, #24]
 80022d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	2203      	movs	r2, #3
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 0203 	and.w	r2, r3, #3
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 80b4 	beq.w	8002482 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	4b60      	ldr	r3, [pc, #384]	; (80024a0 <HAL_GPIO_Init+0x30c>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	4a5f      	ldr	r2, [pc, #380]	; (80024a0 <HAL_GPIO_Init+0x30c>)
 8002324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002328:	6453      	str	r3, [r2, #68]	; 0x44
 800232a:	4b5d      	ldr	r3, [pc, #372]	; (80024a0 <HAL_GPIO_Init+0x30c>)
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002332:	60fb      	str	r3, [r7, #12]
 8002334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002336:	4a5b      	ldr	r2, [pc, #364]	; (80024a4 <HAL_GPIO_Init+0x310>)
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	3302      	adds	r3, #2
 800233e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	220f      	movs	r2, #15
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a52      	ldr	r2, [pc, #328]	; (80024a8 <HAL_GPIO_Init+0x314>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d02b      	beq.n	80023ba <HAL_GPIO_Init+0x226>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a51      	ldr	r2, [pc, #324]	; (80024ac <HAL_GPIO_Init+0x318>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d025      	beq.n	80023b6 <HAL_GPIO_Init+0x222>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a50      	ldr	r2, [pc, #320]	; (80024b0 <HAL_GPIO_Init+0x31c>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d01f      	beq.n	80023b2 <HAL_GPIO_Init+0x21e>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a4f      	ldr	r2, [pc, #316]	; (80024b4 <HAL_GPIO_Init+0x320>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d019      	beq.n	80023ae <HAL_GPIO_Init+0x21a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a4e      	ldr	r2, [pc, #312]	; (80024b8 <HAL_GPIO_Init+0x324>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d013      	beq.n	80023aa <HAL_GPIO_Init+0x216>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a4d      	ldr	r2, [pc, #308]	; (80024bc <HAL_GPIO_Init+0x328>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d00d      	beq.n	80023a6 <HAL_GPIO_Init+0x212>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a4c      	ldr	r2, [pc, #304]	; (80024c0 <HAL_GPIO_Init+0x32c>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d007      	beq.n	80023a2 <HAL_GPIO_Init+0x20e>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	4a4b      	ldr	r2, [pc, #300]	; (80024c4 <HAL_GPIO_Init+0x330>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d101      	bne.n	800239e <HAL_GPIO_Init+0x20a>
 800239a:	2307      	movs	r3, #7
 800239c:	e00e      	b.n	80023bc <HAL_GPIO_Init+0x228>
 800239e:	2308      	movs	r3, #8
 80023a0:	e00c      	b.n	80023bc <HAL_GPIO_Init+0x228>
 80023a2:	2306      	movs	r3, #6
 80023a4:	e00a      	b.n	80023bc <HAL_GPIO_Init+0x228>
 80023a6:	2305      	movs	r3, #5
 80023a8:	e008      	b.n	80023bc <HAL_GPIO_Init+0x228>
 80023aa:	2304      	movs	r3, #4
 80023ac:	e006      	b.n	80023bc <HAL_GPIO_Init+0x228>
 80023ae:	2303      	movs	r3, #3
 80023b0:	e004      	b.n	80023bc <HAL_GPIO_Init+0x228>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e002      	b.n	80023bc <HAL_GPIO_Init+0x228>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_GPIO_Init+0x228>
 80023ba:	2300      	movs	r3, #0
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	f002 0203 	and.w	r2, r2, #3
 80023c2:	0092      	lsls	r2, r2, #2
 80023c4:	4093      	lsls	r3, r2
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023cc:	4935      	ldr	r1, [pc, #212]	; (80024a4 <HAL_GPIO_Init+0x310>)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	089b      	lsrs	r3, r3, #2
 80023d2:	3302      	adds	r3, #2
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023da:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <HAL_GPIO_Init+0x334>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	43db      	mvns	r3, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4013      	ands	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023fe:	4a32      	ldr	r2, [pc, #200]	; (80024c8 <HAL_GPIO_Init+0x334>)
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002404:	4b30      	ldr	r3, [pc, #192]	; (80024c8 <HAL_GPIO_Init+0x334>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	43db      	mvns	r3, r3
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	4013      	ands	r3, r2
 8002412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002428:	4a27      	ldr	r2, [pc, #156]	; (80024c8 <HAL_GPIO_Init+0x334>)
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800242e:	4b26      	ldr	r3, [pc, #152]	; (80024c8 <HAL_GPIO_Init+0x334>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4313      	orrs	r3, r2
 8002450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002452:	4a1d      	ldr	r2, [pc, #116]	; (80024c8 <HAL_GPIO_Init+0x334>)
 8002454:	69bb      	ldr	r3, [r7, #24]
 8002456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002458:	4b1b      	ldr	r3, [pc, #108]	; (80024c8 <HAL_GPIO_Init+0x334>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800247c:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <HAL_GPIO_Init+0x334>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3301      	adds	r3, #1
 8002486:	61fb      	str	r3, [r7, #28]
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	2b0f      	cmp	r3, #15
 800248c:	f67f ae90 	bls.w	80021b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002490:	bf00      	nop
 8002492:	bf00      	nop
 8002494:	3724      	adds	r7, #36	; 0x24
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40023800 	.word	0x40023800
 80024a4:	40013800 	.word	0x40013800
 80024a8:	40020000 	.word	0x40020000
 80024ac:	40020400 	.word	0x40020400
 80024b0:	40020800 	.word	0x40020800
 80024b4:	40020c00 	.word	0x40020c00
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40021400 	.word	0x40021400
 80024c0:	40021800 	.word	0x40021800
 80024c4:	40021c00 	.word	0x40021c00
 80024c8:	40013c00 	.word	0x40013c00

080024cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	807b      	strh	r3, [r7, #2]
 80024d8:	4613      	mov	r3, r2
 80024da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024dc:	787b      	ldrb	r3, [r7, #1]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024e2:	887a      	ldrh	r2, [r7, #2]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80024e8:	e003      	b.n	80024f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80024ea:	887b      	ldrh	r3, [r7, #2]
 80024ec:	041a      	lsls	r2, r3, #16
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	619a      	str	r2, [r3, #24]
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e264      	b.n	80029dc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b00      	cmp	r3, #0
 800251c:	d075      	beq.n	800260a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800251e:	4ba3      	ldr	r3, [pc, #652]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b04      	cmp	r3, #4
 8002528:	d00c      	beq.n	8002544 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800252a:	4ba0      	ldr	r3, [pc, #640]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002532:	2b08      	cmp	r3, #8
 8002534:	d112      	bne.n	800255c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002536:	4b9d      	ldr	r3, [pc, #628]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800253e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002542:	d10b      	bne.n	800255c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002544:	4b99      	ldr	r3, [pc, #612]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d05b      	beq.n	8002608 <HAL_RCC_OscConfig+0x108>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d157      	bne.n	8002608 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e23f      	b.n	80029dc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002564:	d106      	bne.n	8002574 <HAL_RCC_OscConfig+0x74>
 8002566:	4b91      	ldr	r3, [pc, #580]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a90      	ldr	r2, [pc, #576]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e01d      	b.n	80025b0 <HAL_RCC_OscConfig+0xb0>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0x98>
 800257e:	4b8b      	ldr	r3, [pc, #556]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a8a      	ldr	r2, [pc, #552]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b88      	ldr	r3, [pc, #544]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a87      	ldr	r2, [pc, #540]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e00b      	b.n	80025b0 <HAL_RCC_OscConfig+0xb0>
 8002598:	4b84      	ldr	r3, [pc, #528]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a83      	ldr	r2, [pc, #524]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 800259e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b81      	ldr	r3, [pc, #516]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a80      	ldr	r2, [pc, #512]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 80025aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7ff f8ce 	bl	8001758 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c0:	f7ff f8ca 	bl	8001758 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	; 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e204      	b.n	80029dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b76      	ldr	r3, [pc, #472]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0xc0>
 80025de:	e014      	b.n	800260a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7ff f8ba 	bl	8001758 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025e8:	f7ff f8b6 	bl	8001758 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	; 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e1f0      	b.n	80029dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fa:	4b6c      	ldr	r3, [pc, #432]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0xe8>
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d063      	beq.n	80026de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002616:	4b65      	ldr	r3, [pc, #404]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002622:	4b62      	ldr	r3, [pc, #392]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800262a:	2b08      	cmp	r3, #8
 800262c:	d11c      	bne.n	8002668 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800262e:	4b5f      	ldr	r3, [pc, #380]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d116      	bne.n	8002668 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	4b5c      	ldr	r3, [pc, #368]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_RCC_OscConfig+0x152>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d001      	beq.n	8002652 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e1c4      	b.n	80029dc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002652:	4b56      	ldr	r3, [pc, #344]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	691b      	ldr	r3, [r3, #16]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4952      	ldr	r1, [pc, #328]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002666:	e03a      	b.n	80026de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d020      	beq.n	80026b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002670:	4b4f      	ldr	r3, [pc, #316]	; (80027b0 <HAL_RCC_OscConfig+0x2b0>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002676:	f7ff f86f 	bl	8001758 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800267e:	f7ff f86b 	bl	8001758 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e1a5      	b.n	80029dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002690:	4b46      	ldr	r3, [pc, #280]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269c:	4b43      	ldr	r3, [pc, #268]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4940      	ldr	r1, [pc, #256]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]
 80026b0:	e015      	b.n	80026de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b2:	4b3f      	ldr	r3, [pc, #252]	; (80027b0 <HAL_RCC_OscConfig+0x2b0>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b8:	f7ff f84e 	bl	8001758 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c0:	f7ff f84a 	bl	8001758 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e184      	b.n	80029dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d2:	4b36      	ldr	r3, [pc, #216]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d030      	beq.n	800274c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d016      	beq.n	8002720 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f2:	4b30      	ldr	r3, [pc, #192]	; (80027b4 <HAL_RCC_OscConfig+0x2b4>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f8:	f7ff f82e 	bl	8001758 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002700:	f7ff f82a 	bl	8001758 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e164      	b.n	80029dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002712:	4b26      	ldr	r3, [pc, #152]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0x200>
 800271e:	e015      	b.n	800274c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002720:	4b24      	ldr	r3, [pc, #144]	; (80027b4 <HAL_RCC_OscConfig+0x2b4>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002726:	f7ff f817 	bl	8001758 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800272e:	f7ff f813 	bl	8001758 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e14d      	b.n	80029dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002740:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1f0      	bne.n	800272e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	f000 80a0 	beq.w	800289a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800275a:	2300      	movs	r3, #0
 800275c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275e:	4b13      	ldr	r3, [pc, #76]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10f      	bne.n	800278a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	4b0f      	ldr	r3, [pc, #60]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a0e      	ldr	r2, [pc, #56]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 8002774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
 800277a:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <HAL_RCC_OscConfig+0x2ac>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002786:	2301      	movs	r3, #1
 8002788:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278a:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_RCC_OscConfig+0x2b8>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d121      	bne.n	80027da <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002796:	4b08      	ldr	r3, [pc, #32]	; (80027b8 <HAL_RCC_OscConfig+0x2b8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a07      	ldr	r2, [pc, #28]	; (80027b8 <HAL_RCC_OscConfig+0x2b8>)
 800279c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a2:	f7fe ffd9 	bl	8001758 <HAL_GetTick>
 80027a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a8:	e011      	b.n	80027ce <HAL_RCC_OscConfig+0x2ce>
 80027aa:	bf00      	nop
 80027ac:	40023800 	.word	0x40023800
 80027b0:	42470000 	.word	0x42470000
 80027b4:	42470e80 	.word	0x42470e80
 80027b8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027bc:	f7fe ffcc 	bl	8001758 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e106      	b.n	80029dc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ce:	4b85      	ldr	r3, [pc, #532]	; (80029e4 <HAL_RCC_OscConfig+0x4e4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d106      	bne.n	80027f0 <HAL_RCC_OscConfig+0x2f0>
 80027e2:	4b81      	ldr	r3, [pc, #516]	; (80029e8 <HAL_RCC_OscConfig+0x4e8>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e6:	4a80      	ldr	r2, [pc, #512]	; (80029e8 <HAL_RCC_OscConfig+0x4e8>)
 80027e8:	f043 0301 	orr.w	r3, r3, #1
 80027ec:	6713      	str	r3, [r2, #112]	; 0x70
 80027ee:	e01c      	b.n	800282a <HAL_RCC_OscConfig+0x32a>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	2b05      	cmp	r3, #5
 80027f6:	d10c      	bne.n	8002812 <HAL_RCC_OscConfig+0x312>
 80027f8:	4b7b      	ldr	r3, [pc, #492]	; (80029e8 <HAL_RCC_OscConfig+0x4e8>)
 80027fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fc:	4a7a      	ldr	r2, [pc, #488]	; (80029e8 <HAL_RCC_OscConfig+0x4e8>)
 80027fe:	f043 0304 	orr.w	r3, r3, #4
 8002802:	6713      	str	r3, [r2, #112]	; 0x70
 8002804:	4b78      	ldr	r3, [pc, #480]	; (80029e8 <HAL_RCC_OscConfig+0x4e8>)
 8002806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002808:	4a77      	ldr	r2, [pc, #476]	; (80029e8 <HAL_RCC_OscConfig+0x4e8>)
 800280a:	f043 0301 	orr.w	r3, r3, #1
 800280e:	6713      	str	r3, [r2, #112]	; 0x70
 8002810:	e00b      	b.n	800282a <HAL_RCC_OscConfig+0x32a>
 8002812:	4b75      	ldr	r3, [pc, #468]	; (80029e8 <HAL_RCC_OscConfig+0x4e8>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002816:	4a74      	ldr	r2, [pc, #464]	; (80029e8 <HAL_RCC_OscConfig+0x4e8>)
 8002818:	f023 0301 	bic.w	r3, r3, #1
 800281c:	6713      	str	r3, [r2, #112]	; 0x70
 800281e:	4b72      	ldr	r3, [pc, #456]	; (80029e8 <HAL_RCC_OscConfig+0x4e8>)
 8002820:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002822:	4a71      	ldr	r2, [pc, #452]	; (80029e8 <HAL_RCC_OscConfig+0x4e8>)
 8002824:	f023 0304 	bic.w	r3, r3, #4
 8002828:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d015      	beq.n	800285e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002832:	f7fe ff91 	bl	8001758 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002838:	e00a      	b.n	8002850 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800283a:	f7fe ff8d 	bl	8001758 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f241 3288 	movw	r2, #5000	; 0x1388
 8002848:	4293      	cmp	r3, r2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e0c5      	b.n	80029dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002850:	4b65      	ldr	r3, [pc, #404]	; (80029e8 <HAL_RCC_OscConfig+0x4e8>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ee      	beq.n	800283a <HAL_RCC_OscConfig+0x33a>
 800285c:	e014      	b.n	8002888 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800285e:	f7fe ff7b 	bl	8001758 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002864:	e00a      	b.n	800287c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002866:	f7fe ff77 	bl	8001758 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	f241 3288 	movw	r2, #5000	; 0x1388
 8002874:	4293      	cmp	r3, r2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e0af      	b.n	80029dc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287c:	4b5a      	ldr	r3, [pc, #360]	; (80029e8 <HAL_RCC_OscConfig+0x4e8>)
 800287e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1ee      	bne.n	8002866 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002888:	7dfb      	ldrb	r3, [r7, #23]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d105      	bne.n	800289a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800288e:	4b56      	ldr	r3, [pc, #344]	; (80029e8 <HAL_RCC_OscConfig+0x4e8>)
 8002890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002892:	4a55      	ldr	r2, [pc, #340]	; (80029e8 <HAL_RCC_OscConfig+0x4e8>)
 8002894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002898:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 809b 	beq.w	80029da <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028a4:	4b50      	ldr	r3, [pc, #320]	; (80029e8 <HAL_RCC_OscConfig+0x4e8>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f003 030c 	and.w	r3, r3, #12
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d05c      	beq.n	800296a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d141      	bne.n	800293c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b8:	4b4c      	ldr	r3, [pc, #304]	; (80029ec <HAL_RCC_OscConfig+0x4ec>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028be:	f7fe ff4b 	bl	8001758 <HAL_GetTick>
 80028c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028c6:	f7fe ff47 	bl	8001758 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e081      	b.n	80029dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028d8:	4b43      	ldr	r3, [pc, #268]	; (80029e8 <HAL_RCC_OscConfig+0x4e8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1f0      	bne.n	80028c6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	69da      	ldr	r2, [r3, #28]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	019b      	lsls	r3, r3, #6
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	085b      	lsrs	r3, r3, #1
 80028fc:	3b01      	subs	r3, #1
 80028fe:	041b      	lsls	r3, r3, #16
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	061b      	lsls	r3, r3, #24
 8002908:	4937      	ldr	r1, [pc, #220]	; (80029e8 <HAL_RCC_OscConfig+0x4e8>)
 800290a:	4313      	orrs	r3, r2
 800290c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800290e:	4b37      	ldr	r3, [pc, #220]	; (80029ec <HAL_RCC_OscConfig+0x4ec>)
 8002910:	2201      	movs	r2, #1
 8002912:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002914:	f7fe ff20 	bl	8001758 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800291c:	f7fe ff1c 	bl	8001758 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e056      	b.n	80029dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292e:	4b2e      	ldr	r3, [pc, #184]	; (80029e8 <HAL_RCC_OscConfig+0x4e8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x41c>
 800293a:	e04e      	b.n	80029da <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293c:	4b2b      	ldr	r3, [pc, #172]	; (80029ec <HAL_RCC_OscConfig+0x4ec>)
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002942:	f7fe ff09 	bl	8001758 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800294a:	f7fe ff05 	bl	8001758 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e03f      	b.n	80029dc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800295c:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <HAL_RCC_OscConfig+0x4e8>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f0      	bne.n	800294a <HAL_RCC_OscConfig+0x44a>
 8002968:	e037      	b.n	80029da <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d101      	bne.n	8002976 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e032      	b.n	80029dc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002976:	4b1c      	ldr	r3, [pc, #112]	; (80029e8 <HAL_RCC_OscConfig+0x4e8>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d028      	beq.n	80029d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d121      	bne.n	80029d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299c:	429a      	cmp	r2, r3
 800299e:	d11a      	bne.n	80029d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029a6:	4013      	ands	r3, r2
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029ac:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d111      	bne.n	80029d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029bc:	085b      	lsrs	r3, r3, #1
 80029be:	3b01      	subs	r3, #1
 80029c0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d107      	bne.n	80029d6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d001      	beq.n	80029da <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40007000 	.word	0x40007000
 80029e8:	40023800 	.word	0x40023800
 80029ec:	42470060 	.word	0x42470060

080029f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0cc      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a04:	4b68      	ldr	r3, [pc, #416]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d90c      	bls.n	8002a2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b65      	ldr	r3, [pc, #404]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b63      	ldr	r3, [pc, #396]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0b8      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d020      	beq.n	8002a7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0304 	and.w	r3, r3, #4
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d005      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a44:	4b59      	ldr	r3, [pc, #356]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	4a58      	ldr	r2, [pc, #352]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a5c:	4b53      	ldr	r3, [pc, #332]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	4a52      	ldr	r2, [pc, #328]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a68:	4b50      	ldr	r3, [pc, #320]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	494d      	ldr	r1, [pc, #308]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0301 	and.w	r3, r3, #1
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d044      	beq.n	8002b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d107      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	4b47      	ldr	r3, [pc, #284]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d119      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e07f      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d003      	beq.n	8002aae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d107      	bne.n	8002abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aae:	4b3f      	ldr	r3, [pc, #252]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d109      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e06f      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abe:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0302 	and.w	r3, r3, #2
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e067      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ace:	4b37      	ldr	r3, [pc, #220]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f023 0203 	bic.w	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	4934      	ldr	r1, [pc, #208]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae0:	f7fe fe3a 	bl	8001758 <HAL_GetTick>
 8002ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ae6:	e00a      	b.n	8002afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae8:	f7fe fe36 	bl	8001758 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e04f      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afe:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 020c 	and.w	r2, r3, #12
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d1eb      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b10:	4b25      	ldr	r3, [pc, #148]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d20c      	bcs.n	8002b38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b22      	ldr	r3, [pc, #136]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	4b20      	ldr	r3, [pc, #128]	; (8002ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e032      	b.n	8002b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b44:	4b19      	ldr	r3, [pc, #100]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	4916      	ldr	r1, [pc, #88]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	4313      	orrs	r3, r2
 8002b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0308 	and.w	r3, r3, #8
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d009      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b62:	4b12      	ldr	r3, [pc, #72]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	490e      	ldr	r1, [pc, #56]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b76:	f000 f821 	bl	8002bbc <HAL_RCC_GetSysClockFreq>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	490a      	ldr	r1, [pc, #40]	; (8002bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	5ccb      	ldrb	r3, [r1, r3]
 8002b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b8e:	4a09      	ldr	r2, [pc, #36]	; (8002bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fe fd9a 	bl	80016d0 <HAL_InitTick>

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3710      	adds	r7, #16
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40023c00 	.word	0x40023c00
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	08004674 	.word	0x08004674
 8002bb4:	20000000 	.word	0x20000000
 8002bb8:	20000004 	.word	0x20000004

08002bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	607b      	str	r3, [r7, #4]
 8002bc8:	2300      	movs	r3, #0
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bd4:	4b67      	ldr	r3, [pc, #412]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d00d      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x40>
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	f200 80bd 	bhi.w	8002d60 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d002      	beq.n	8002bf0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	d003      	beq.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bee:	e0b7      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bf0:	4b61      	ldr	r3, [pc, #388]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002bf2:	60bb      	str	r3, [r7, #8]
       break;
 8002bf4:	e0b7      	b.n	8002d66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bf6:	4b60      	ldr	r3, [pc, #384]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002bf8:	60bb      	str	r3, [r7, #8]
      break;
 8002bfa:	e0b4      	b.n	8002d66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bfc:	4b5d      	ldr	r3, [pc, #372]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c06:	4b5b      	ldr	r3, [pc, #364]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d04d      	beq.n	8002cae <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c12:	4b58      	ldr	r3, [pc, #352]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	099b      	lsrs	r3, r3, #6
 8002c18:	461a      	mov	r2, r3
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c22:	f04f 0100 	mov.w	r1, #0
 8002c26:	ea02 0800 	and.w	r8, r2, r0
 8002c2a:	ea03 0901 	and.w	r9, r3, r1
 8002c2e:	4640      	mov	r0, r8
 8002c30:	4649      	mov	r1, r9
 8002c32:	f04f 0200 	mov.w	r2, #0
 8002c36:	f04f 0300 	mov.w	r3, #0
 8002c3a:	014b      	lsls	r3, r1, #5
 8002c3c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c40:	0142      	lsls	r2, r0, #5
 8002c42:	4610      	mov	r0, r2
 8002c44:	4619      	mov	r1, r3
 8002c46:	ebb0 0008 	subs.w	r0, r0, r8
 8002c4a:	eb61 0109 	sbc.w	r1, r1, r9
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	018b      	lsls	r3, r1, #6
 8002c58:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c5c:	0182      	lsls	r2, r0, #6
 8002c5e:	1a12      	subs	r2, r2, r0
 8002c60:	eb63 0301 	sbc.w	r3, r3, r1
 8002c64:	f04f 0000 	mov.w	r0, #0
 8002c68:	f04f 0100 	mov.w	r1, #0
 8002c6c:	00d9      	lsls	r1, r3, #3
 8002c6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c72:	00d0      	lsls	r0, r2, #3
 8002c74:	4602      	mov	r2, r0
 8002c76:	460b      	mov	r3, r1
 8002c78:	eb12 0208 	adds.w	r2, r2, r8
 8002c7c:	eb43 0309 	adc.w	r3, r3, r9
 8002c80:	f04f 0000 	mov.w	r0, #0
 8002c84:	f04f 0100 	mov.w	r1, #0
 8002c88:	0299      	lsls	r1, r3, #10
 8002c8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c8e:	0290      	lsls	r0, r2, #10
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4610      	mov	r0, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	f7fd fae6 	bl	8000270 <__aeabi_uldivmod>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	4613      	mov	r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	e04a      	b.n	8002d44 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cae:	4b31      	ldr	r3, [pc, #196]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	099b      	lsrs	r3, r3, #6
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cbe:	f04f 0100 	mov.w	r1, #0
 8002cc2:	ea02 0400 	and.w	r4, r2, r0
 8002cc6:	ea03 0501 	and.w	r5, r3, r1
 8002cca:	4620      	mov	r0, r4
 8002ccc:	4629      	mov	r1, r5
 8002cce:	f04f 0200 	mov.w	r2, #0
 8002cd2:	f04f 0300 	mov.w	r3, #0
 8002cd6:	014b      	lsls	r3, r1, #5
 8002cd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002cdc:	0142      	lsls	r2, r0, #5
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	1b00      	subs	r0, r0, r4
 8002ce4:	eb61 0105 	sbc.w	r1, r1, r5
 8002ce8:	f04f 0200 	mov.w	r2, #0
 8002cec:	f04f 0300 	mov.w	r3, #0
 8002cf0:	018b      	lsls	r3, r1, #6
 8002cf2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002cf6:	0182      	lsls	r2, r0, #6
 8002cf8:	1a12      	subs	r2, r2, r0
 8002cfa:	eb63 0301 	sbc.w	r3, r3, r1
 8002cfe:	f04f 0000 	mov.w	r0, #0
 8002d02:	f04f 0100 	mov.w	r1, #0
 8002d06:	00d9      	lsls	r1, r3, #3
 8002d08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d0c:	00d0      	lsls	r0, r2, #3
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	1912      	adds	r2, r2, r4
 8002d14:	eb45 0303 	adc.w	r3, r5, r3
 8002d18:	f04f 0000 	mov.w	r0, #0
 8002d1c:	f04f 0100 	mov.w	r1, #0
 8002d20:	0299      	lsls	r1, r3, #10
 8002d22:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002d26:	0290      	lsls	r0, r2, #10
 8002d28:	4602      	mov	r2, r0
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	4610      	mov	r0, r2
 8002d2e:	4619      	mov	r1, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	461a      	mov	r2, r3
 8002d34:	f04f 0300 	mov.w	r3, #0
 8002d38:	f7fd fa9a 	bl	8000270 <__aeabi_uldivmod>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4613      	mov	r3, r2
 8002d42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d44:	4b0b      	ldr	r3, [pc, #44]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	0c1b      	lsrs	r3, r3, #16
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	3301      	adds	r3, #1
 8002d50:	005b      	lsls	r3, r3, #1
 8002d52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5c:	60bb      	str	r3, [r7, #8]
      break;
 8002d5e:	e002      	b.n	8002d66 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d60:	4b05      	ldr	r3, [pc, #20]	; (8002d78 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d62:	60bb      	str	r3, [r7, #8]
      break;
 8002d64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d66:	68bb      	ldr	r3, [r7, #8]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d72:	bf00      	nop
 8002d74:	40023800 	.word	0x40023800
 8002d78:	00f42400 	.word	0x00f42400

08002d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d80:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d82:	681b      	ldr	r3, [r3, #0]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	20000000 	.word	0x20000000

08002d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d98:	f7ff fff0 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	4b05      	ldr	r3, [pc, #20]	; (8002db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	0a9b      	lsrs	r3, r3, #10
 8002da4:	f003 0307 	and.w	r3, r3, #7
 8002da8:	4903      	ldr	r1, [pc, #12]	; (8002db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002daa:	5ccb      	ldrb	r3, [r1, r3]
 8002dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40023800 	.word	0x40023800
 8002db8:	08004684 	.word	0x08004684

08002dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dc0:	f7ff ffdc 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	0b5b      	lsrs	r3, r3, #13
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	4903      	ldr	r1, [pc, #12]	; (8002de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dd2:	5ccb      	ldrb	r3, [r1, r3]
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	08004684 	.word	0x08004684

08002de4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e041      	b.n	8002e7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe faf4 	bl	80013f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3304      	adds	r3, #4
 8002e20:	4619      	mov	r1, r3
 8002e22:	4610      	mov	r0, r2
 8002e24:	f000 fac4 	bl	80033b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3708      	adds	r7, #8
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
	...

08002e84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d001      	beq.n	8002e9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e04e      	b.n	8002f3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0201 	orr.w	r2, r2, #1
 8002eb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a23      	ldr	r2, [pc, #140]	; (8002f48 <HAL_TIM_Base_Start_IT+0xc4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d022      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x80>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ec6:	d01d      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x80>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1f      	ldr	r2, [pc, #124]	; (8002f4c <HAL_TIM_Base_Start_IT+0xc8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d018      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x80>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a1e      	ldr	r2, [pc, #120]	; (8002f50 <HAL_TIM_Base_Start_IT+0xcc>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d013      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x80>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a1c      	ldr	r2, [pc, #112]	; (8002f54 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d00e      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x80>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a1b      	ldr	r2, [pc, #108]	; (8002f58 <HAL_TIM_Base_Start_IT+0xd4>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d009      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x80>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a19      	ldr	r2, [pc, #100]	; (8002f5c <HAL_TIM_Base_Start_IT+0xd8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d004      	beq.n	8002f04 <HAL_TIM_Base_Start_IT+0x80>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a18      	ldr	r2, [pc, #96]	; (8002f60 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d111      	bne.n	8002f28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b06      	cmp	r3, #6
 8002f14:	d010      	beq.n	8002f38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f042 0201 	orr.w	r2, r2, #1
 8002f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f26:	e007      	b.n	8002f38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr
 8002f46:	bf00      	nop
 8002f48:	40010000 	.word	0x40010000
 8002f4c:	40000400 	.word	0x40000400
 8002f50:	40000800 	.word	0x40000800
 8002f54:	40000c00 	.word	0x40000c00
 8002f58:	40010400 	.word	0x40010400
 8002f5c:	40014000 	.word	0x40014000
 8002f60:	40001800 	.word	0x40001800

08002f64 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68da      	ldr	r2, [r3, #12]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0201 	bic.w	r2, r2, #1
 8002f7a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6a1a      	ldr	r2, [r3, #32]
 8002f82:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f86:	4013      	ands	r3, r2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10f      	bne.n	8002fac <HAL_TIM_Base_Stop_IT+0x48>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6a1a      	ldr	r2, [r3, #32]
 8002f92:	f240 4344 	movw	r3, #1092	; 0x444
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d107      	bne.n	8002fac <HAL_TIM_Base_Stop_IT+0x48>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d122      	bne.n	800301e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d11b      	bne.n	800301e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f06f 0202 	mvn.w	r2, #2
 8002fee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f003 0303 	and.w	r3, r3, #3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	f000 f9b5 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 800300a:	e005      	b.n	8003018 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f9a7 	bl	8003360 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f9b8 	bl	8003388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b04      	cmp	r3, #4
 800302a:	d122      	bne.n	8003072 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b04      	cmp	r3, #4
 8003038:	d11b      	bne.n	8003072 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f06f 0204 	mvn.w	r2, #4
 8003042:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	699b      	ldr	r3, [r3, #24]
 8003050:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f98b 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 800305e:	e005      	b.n	800306c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	f000 f97d 	bl	8003360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f98e 	bl	8003388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	691b      	ldr	r3, [r3, #16]
 8003078:	f003 0308 	and.w	r3, r3, #8
 800307c:	2b08      	cmp	r3, #8
 800307e:	d122      	bne.n	80030c6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	f003 0308 	and.w	r3, r3, #8
 800308a:	2b08      	cmp	r3, #8
 800308c:	d11b      	bne.n	80030c6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f06f 0208 	mvn.w	r2, #8
 8003096:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2204      	movs	r2, #4
 800309c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	f003 0303 	and.w	r3, r3, #3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f961 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 80030b2:	e005      	b.n	80030c0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 f953 	bl	8003360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f964 	bl	8003388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	2b10      	cmp	r3, #16
 80030d2:	d122      	bne.n	800311a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b10      	cmp	r3, #16
 80030e0:	d11b      	bne.n	800311a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f06f 0210 	mvn.w	r2, #16
 80030ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2208      	movs	r2, #8
 80030f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f937 	bl	8003374 <HAL_TIM_IC_CaptureCallback>
 8003106:	e005      	b.n	8003114 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f929 	bl	8003360 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f93a 	bl	8003388 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	f003 0301 	and.w	r3, r3, #1
 8003124:	2b01      	cmp	r3, #1
 8003126:	d10e      	bne.n	8003146 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b01      	cmp	r3, #1
 8003134:	d107      	bne.n	8003146 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f06f 0201 	mvn.w	r2, #1
 800313e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f7fd ffb3 	bl	80010ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003150:	2b80      	cmp	r3, #128	; 0x80
 8003152:	d10e      	bne.n	8003172 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315e:	2b80      	cmp	r3, #128	; 0x80
 8003160:	d107      	bne.n	8003172 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800316a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	f000 fadf 	bl	8003730 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691b      	ldr	r3, [r3, #16]
 8003178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800317c:	2b40      	cmp	r3, #64	; 0x40
 800317e:	d10e      	bne.n	800319e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318a:	2b40      	cmp	r3, #64	; 0x40
 800318c:	d107      	bne.n	800319e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003198:	6878      	ldr	r0, [r7, #4]
 800319a:	f000 f8ff 	bl	800339c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	f003 0320 	and.w	r3, r3, #32
 80031a8:	2b20      	cmp	r3, #32
 80031aa:	d10e      	bne.n	80031ca <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f003 0320 	and.w	r3, r3, #32
 80031b6:	2b20      	cmp	r3, #32
 80031b8:	d107      	bne.n	80031ca <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f06f 0220 	mvn.w	r2, #32
 80031c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 faa9 	bl	800371c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031ca:	bf00      	nop
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}

080031d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031d2:	b580      	push	{r7, lr}
 80031d4:	b084      	sub	sp, #16
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
 80031da:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d101      	bne.n	80031ee <HAL_TIM_ConfigClockSource+0x1c>
 80031ea:	2302      	movs	r3, #2
 80031ec:	e0b4      	b.n	8003358 <HAL_TIM_ConfigClockSource+0x186>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2202      	movs	r2, #2
 80031fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800320c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003214:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003226:	d03e      	beq.n	80032a6 <HAL_TIM_ConfigClockSource+0xd4>
 8003228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800322c:	f200 8087 	bhi.w	800333e <HAL_TIM_ConfigClockSource+0x16c>
 8003230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003234:	f000 8086 	beq.w	8003344 <HAL_TIM_ConfigClockSource+0x172>
 8003238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323c:	d87f      	bhi.n	800333e <HAL_TIM_ConfigClockSource+0x16c>
 800323e:	2b70      	cmp	r3, #112	; 0x70
 8003240:	d01a      	beq.n	8003278 <HAL_TIM_ConfigClockSource+0xa6>
 8003242:	2b70      	cmp	r3, #112	; 0x70
 8003244:	d87b      	bhi.n	800333e <HAL_TIM_ConfigClockSource+0x16c>
 8003246:	2b60      	cmp	r3, #96	; 0x60
 8003248:	d050      	beq.n	80032ec <HAL_TIM_ConfigClockSource+0x11a>
 800324a:	2b60      	cmp	r3, #96	; 0x60
 800324c:	d877      	bhi.n	800333e <HAL_TIM_ConfigClockSource+0x16c>
 800324e:	2b50      	cmp	r3, #80	; 0x50
 8003250:	d03c      	beq.n	80032cc <HAL_TIM_ConfigClockSource+0xfa>
 8003252:	2b50      	cmp	r3, #80	; 0x50
 8003254:	d873      	bhi.n	800333e <HAL_TIM_ConfigClockSource+0x16c>
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d058      	beq.n	800330c <HAL_TIM_ConfigClockSource+0x13a>
 800325a:	2b40      	cmp	r3, #64	; 0x40
 800325c:	d86f      	bhi.n	800333e <HAL_TIM_ConfigClockSource+0x16c>
 800325e:	2b30      	cmp	r3, #48	; 0x30
 8003260:	d064      	beq.n	800332c <HAL_TIM_ConfigClockSource+0x15a>
 8003262:	2b30      	cmp	r3, #48	; 0x30
 8003264:	d86b      	bhi.n	800333e <HAL_TIM_ConfigClockSource+0x16c>
 8003266:	2b20      	cmp	r3, #32
 8003268:	d060      	beq.n	800332c <HAL_TIM_ConfigClockSource+0x15a>
 800326a:	2b20      	cmp	r3, #32
 800326c:	d867      	bhi.n	800333e <HAL_TIM_ConfigClockSource+0x16c>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d05c      	beq.n	800332c <HAL_TIM_ConfigClockSource+0x15a>
 8003272:	2b10      	cmp	r3, #16
 8003274:	d05a      	beq.n	800332c <HAL_TIM_ConfigClockSource+0x15a>
 8003276:	e062      	b.n	800333e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	6899      	ldr	r1, [r3, #8]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	f000 f9ac 	bl	80035e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800329a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	609a      	str	r2, [r3, #8]
      break;
 80032a4:	e04f      	b.n	8003346 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6818      	ldr	r0, [r3, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	6899      	ldr	r1, [r3, #8]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	f000 f995 	bl	80035e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032c8:	609a      	str	r2, [r3, #8]
      break;
 80032ca:	e03c      	b.n	8003346 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6818      	ldr	r0, [r3, #0]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	461a      	mov	r2, r3
 80032da:	f000 f909 	bl	80034f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2150      	movs	r1, #80	; 0x50
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 f962 	bl	80035ae <TIM_ITRx_SetConfig>
      break;
 80032ea:	e02c      	b.n	8003346 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	6859      	ldr	r1, [r3, #4]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	461a      	mov	r2, r3
 80032fa:	f000 f928 	bl	800354e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2160      	movs	r1, #96	; 0x60
 8003304:	4618      	mov	r0, r3
 8003306:	f000 f952 	bl	80035ae <TIM_ITRx_SetConfig>
      break;
 800330a:	e01c      	b.n	8003346 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6818      	ldr	r0, [r3, #0]
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	6859      	ldr	r1, [r3, #4]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	461a      	mov	r2, r3
 800331a:	f000 f8e9 	bl	80034f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2140      	movs	r1, #64	; 0x40
 8003324:	4618      	mov	r0, r3
 8003326:	f000 f942 	bl	80035ae <TIM_ITRx_SetConfig>
      break;
 800332a:	e00c      	b.n	8003346 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4619      	mov	r1, r3
 8003336:	4610      	mov	r0, r2
 8003338:	f000 f939 	bl	80035ae <TIM_ITRx_SetConfig>
      break;
 800333c:	e003      	b.n	8003346 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	73fb      	strb	r3, [r7, #15]
      break;
 8003342:	e000      	b.n	8003346 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003344:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003356:	7bfb      	ldrb	r3, [r7, #15]
}
 8003358:	4618      	mov	r0, r3
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800337c:	bf00      	nop
 800337e:	370c      	adds	r7, #12
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033a4:	bf00      	nop
 80033a6:	370c      	adds	r7, #12
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a40      	ldr	r2, [pc, #256]	; (80034c4 <TIM_Base_SetConfig+0x114>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d013      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ce:	d00f      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a3d      	ldr	r2, [pc, #244]	; (80034c8 <TIM_Base_SetConfig+0x118>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d00b      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a3c      	ldr	r2, [pc, #240]	; (80034cc <TIM_Base_SetConfig+0x11c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d007      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a3b      	ldr	r2, [pc, #236]	; (80034d0 <TIM_Base_SetConfig+0x120>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d003      	beq.n	80033f0 <TIM_Base_SetConfig+0x40>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a3a      	ldr	r2, [pc, #232]	; (80034d4 <TIM_Base_SetConfig+0x124>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d108      	bne.n	8003402 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4a2f      	ldr	r2, [pc, #188]	; (80034c4 <TIM_Base_SetConfig+0x114>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d02b      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003410:	d027      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	4a2c      	ldr	r2, [pc, #176]	; (80034c8 <TIM_Base_SetConfig+0x118>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d023      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	4a2b      	ldr	r2, [pc, #172]	; (80034cc <TIM_Base_SetConfig+0x11c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d01f      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a2a      	ldr	r2, [pc, #168]	; (80034d0 <TIM_Base_SetConfig+0x120>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01b      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	4a29      	ldr	r2, [pc, #164]	; (80034d4 <TIM_Base_SetConfig+0x124>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d017      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a28      	ldr	r2, [pc, #160]	; (80034d8 <TIM_Base_SetConfig+0x128>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d013      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a27      	ldr	r2, [pc, #156]	; (80034dc <TIM_Base_SetConfig+0x12c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d00f      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a26      	ldr	r2, [pc, #152]	; (80034e0 <TIM_Base_SetConfig+0x130>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00b      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a25      	ldr	r2, [pc, #148]	; (80034e4 <TIM_Base_SetConfig+0x134>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d007      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a24      	ldr	r2, [pc, #144]	; (80034e8 <TIM_Base_SetConfig+0x138>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d003      	beq.n	8003462 <TIM_Base_SetConfig+0xb2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a23      	ldr	r2, [pc, #140]	; (80034ec <TIM_Base_SetConfig+0x13c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d108      	bne.n	8003474 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	68fa      	ldr	r2, [r7, #12]
 8003470:	4313      	orrs	r3, r2
 8003472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68fa      	ldr	r2, [r7, #12]
 8003486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681a      	ldr	r2, [r3, #0]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a0a      	ldr	r2, [pc, #40]	; (80034c4 <TIM_Base_SetConfig+0x114>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d003      	beq.n	80034a8 <TIM_Base_SetConfig+0xf8>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a0c      	ldr	r2, [pc, #48]	; (80034d4 <TIM_Base_SetConfig+0x124>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d103      	bne.n	80034b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	691a      	ldr	r2, [r3, #16]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	615a      	str	r2, [r3, #20]
}
 80034b6:	bf00      	nop
 80034b8:	3714      	adds	r7, #20
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40010000 	.word	0x40010000
 80034c8:	40000400 	.word	0x40000400
 80034cc:	40000800 	.word	0x40000800
 80034d0:	40000c00 	.word	0x40000c00
 80034d4:	40010400 	.word	0x40010400
 80034d8:	40014000 	.word	0x40014000
 80034dc:	40014400 	.word	0x40014400
 80034e0:	40014800 	.word	0x40014800
 80034e4:	40001800 	.word	0x40001800
 80034e8:	40001c00 	.word	0x40001c00
 80034ec:	40002000 	.word	0x40002000

080034f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b087      	sub	sp, #28
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a1b      	ldr	r3, [r3, #32]
 8003500:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	f023 0201 	bic.w	r2, r3, #1
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800351a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	693a      	ldr	r2, [r7, #16]
 8003522:	4313      	orrs	r3, r2
 8003524:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	f023 030a 	bic.w	r3, r3, #10
 800352c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	621a      	str	r2, [r3, #32]
}
 8003542:	bf00      	nop
 8003544:	371c      	adds	r7, #28
 8003546:	46bd      	mov	sp, r7
 8003548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354c:	4770      	bx	lr

0800354e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800354e:	b480      	push	{r7}
 8003550:	b087      	sub	sp, #28
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f023 0210 	bic.w	r2, r3, #16
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003578:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	031b      	lsls	r3, r3, #12
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	4313      	orrs	r3, r2
 8003582:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800358a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	011b      	lsls	r3, r3, #4
 8003590:	693a      	ldr	r2, [r7, #16]
 8003592:	4313      	orrs	r3, r2
 8003594:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	621a      	str	r2, [r3, #32]
}
 80035a2:	bf00      	nop
 80035a4:	371c      	adds	r7, #28
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80035ae:	b480      	push	{r7}
 80035b0:	b085      	sub	sp, #20
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
 80035b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f043 0307 	orr.w	r3, r3, #7
 80035d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	609a      	str	r2, [r3, #8]
}
 80035d8:	bf00      	nop
 80035da:	3714      	adds	r7, #20
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
 80035f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80035fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	021a      	lsls	r2, r3, #8
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	431a      	orrs	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4313      	orrs	r3, r2
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	4313      	orrs	r3, r2
 8003610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	609a      	str	r2, [r3, #8]
}
 8003618:	bf00      	nop
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003638:	2302      	movs	r3, #2
 800363a:	e05a      	b.n	80036f2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003662:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a21      	ldr	r2, [pc, #132]	; (8003700 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d022      	beq.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003688:	d01d      	beq.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1d      	ldr	r2, [pc, #116]	; (8003704 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d018      	beq.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a1b      	ldr	r2, [pc, #108]	; (8003708 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d013      	beq.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1a      	ldr	r2, [pc, #104]	; (800370c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d00e      	beq.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a18      	ldr	r2, [pc, #96]	; (8003710 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d009      	beq.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a17      	ldr	r2, [pc, #92]	; (8003714 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d004      	beq.n	80036c6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a15      	ldr	r2, [pc, #84]	; (8003718 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d10c      	bne.n	80036e0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	68ba      	ldr	r2, [r7, #8]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40010000 	.word	0x40010000
 8003704:	40000400 	.word	0x40000400
 8003708:	40000800 	.word	0x40000800
 800370c:	40000c00 	.word	0x40000c00
 8003710:	40010400 	.word	0x40010400
 8003714:	40014000 	.word	0x40014000
 8003718:	40001800 	.word	0x40001800

0800371c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003742:	4770      	bx	lr

08003744 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d101      	bne.n	8003756 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e03f      	b.n	80037d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fd fe6a 	bl	8001444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2224      	movs	r2, #36	; 0x24
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003786:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 f929 	bl	80039e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800379c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	695a      	ldr	r2, [r3, #20]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68da      	ldr	r2, [r3, #12]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80037bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2220      	movs	r2, #32
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b08a      	sub	sp, #40	; 0x28
 80037e2:	af02      	add	r7, sp, #8
 80037e4:	60f8      	str	r0, [r7, #12]
 80037e6:	60b9      	str	r1, [r7, #8]
 80037e8:	603b      	str	r3, [r7, #0]
 80037ea:	4613      	mov	r3, r2
 80037ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b20      	cmp	r3, #32
 80037fc:	d17c      	bne.n	80038f8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d002      	beq.n	800380a <HAL_UART_Transmit+0x2c>
 8003804:	88fb      	ldrh	r3, [r7, #6]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e075      	b.n	80038fa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003814:	2b01      	cmp	r3, #1
 8003816:	d101      	bne.n	800381c <HAL_UART_Transmit+0x3e>
 8003818:	2302      	movs	r3, #2
 800381a:	e06e      	b.n	80038fa <HAL_UART_Transmit+0x11c>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2221      	movs	r2, #33	; 0x21
 800382e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003832:	f7fd ff91 	bl	8001758 <HAL_GetTick>
 8003836:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	88fa      	ldrh	r2, [r7, #6]
 800383c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	88fa      	ldrh	r2, [r7, #6]
 8003842:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800384c:	d108      	bne.n	8003860 <HAL_UART_Transmit+0x82>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d104      	bne.n	8003860 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	61bb      	str	r3, [r7, #24]
 800385e:	e003      	b.n	8003868 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003864:	2300      	movs	r3, #0
 8003866:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003870:	e02a      	b.n	80038c8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	9300      	str	r3, [sp, #0]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	2200      	movs	r2, #0
 800387a:	2180      	movs	r1, #128	; 0x80
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f840 	bl	8003902 <UART_WaitOnFlagUntilTimeout>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e036      	b.n	80038fa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d10b      	bne.n	80038aa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038a0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038a2:	69bb      	ldr	r3, [r7, #24]
 80038a4:	3302      	adds	r3, #2
 80038a6:	61bb      	str	r3, [r7, #24]
 80038a8:	e007      	b.n	80038ba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	781a      	ldrb	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	3301      	adds	r3, #1
 80038b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1cf      	bne.n	8003872 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2200      	movs	r2, #0
 80038da:	2140      	movs	r1, #64	; 0x40
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f810 	bl	8003902 <UART_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e006      	b.n	80038fa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	e000      	b.n	80038fa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80038f8:	2302      	movs	r3, #2
  }
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3720      	adds	r7, #32
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b090      	sub	sp, #64	; 0x40
 8003906:	af00      	add	r7, sp, #0
 8003908:	60f8      	str	r0, [r7, #12]
 800390a:	60b9      	str	r1, [r7, #8]
 800390c:	603b      	str	r3, [r7, #0]
 800390e:	4613      	mov	r3, r2
 8003910:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003912:	e050      	b.n	80039b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391a:	d04c      	beq.n	80039b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800391c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800391e:	2b00      	cmp	r3, #0
 8003920:	d007      	beq.n	8003932 <UART_WaitOnFlagUntilTimeout+0x30>
 8003922:	f7fd ff19 	bl	8001758 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800392e:	429a      	cmp	r2, r3
 8003930:	d241      	bcs.n	80039b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	330c      	adds	r3, #12
 8003938:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003948:	63fb      	str	r3, [r7, #60]	; 0x3c
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	330c      	adds	r3, #12
 8003950:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003952:	637a      	str	r2, [r7, #52]	; 0x34
 8003954:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003958:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e5      	bne.n	8003932 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	3314      	adds	r3, #20
 800396c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	e853 3f00 	ldrex	r3, [r3]
 8003974:	613b      	str	r3, [r7, #16]
   return(result);
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f023 0301 	bic.w	r3, r3, #1
 800397c:	63bb      	str	r3, [r7, #56]	; 0x38
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	3314      	adds	r3, #20
 8003984:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003986:	623a      	str	r2, [r7, #32]
 8003988:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398a:	69f9      	ldr	r1, [r7, #28]
 800398c:	6a3a      	ldr	r2, [r7, #32]
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	61bb      	str	r3, [r7, #24]
   return(result);
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e5      	bne.n	8003966 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2220      	movs	r2, #32
 800399e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e00f      	b.n	80039d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	4013      	ands	r3, r2
 80039c0:	68ba      	ldr	r2, [r7, #8]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	bf0c      	ite	eq
 80039c6:	2301      	moveq	r3, #1
 80039c8:	2300      	movne	r3, #0
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	461a      	mov	r2, r3
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d09f      	beq.n	8003914 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3740      	adds	r7, #64	; 0x40
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039e4:	b09f      	sub	sp, #124	; 0x7c
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	691b      	ldr	r3, [r3, #16]
 80039f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80039f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f6:	68d9      	ldr	r1, [r3, #12]
 80039f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	ea40 0301 	orr.w	r3, r0, r1
 8003a00:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	431a      	orrs	r2, r3
 8003a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	431a      	orrs	r2, r3
 8003a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a24:	f021 010c 	bic.w	r1, r1, #12
 8003a28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3e:	6999      	ldr	r1, [r3, #24]
 8003a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	ea40 0301 	orr.w	r3, r0, r1
 8003a48:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4bc5      	ldr	r3, [pc, #788]	; (8003d64 <UART_SetConfig+0x384>)
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d004      	beq.n	8003a5e <UART_SetConfig+0x7e>
 8003a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	4bc3      	ldr	r3, [pc, #780]	; (8003d68 <UART_SetConfig+0x388>)
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d103      	bne.n	8003a66 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a5e:	f7ff f9ad 	bl	8002dbc <HAL_RCC_GetPCLK2Freq>
 8003a62:	6778      	str	r0, [r7, #116]	; 0x74
 8003a64:	e002      	b.n	8003a6c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a66:	f7ff f995 	bl	8002d94 <HAL_RCC_GetPCLK1Freq>
 8003a6a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a74:	f040 80b6 	bne.w	8003be4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a7a:	461c      	mov	r4, r3
 8003a7c:	f04f 0500 	mov.w	r5, #0
 8003a80:	4622      	mov	r2, r4
 8003a82:	462b      	mov	r3, r5
 8003a84:	1891      	adds	r1, r2, r2
 8003a86:	6439      	str	r1, [r7, #64]	; 0x40
 8003a88:	415b      	adcs	r3, r3
 8003a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a8c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a90:	1912      	adds	r2, r2, r4
 8003a92:	eb45 0303 	adc.w	r3, r5, r3
 8003a96:	f04f 0000 	mov.w	r0, #0
 8003a9a:	f04f 0100 	mov.w	r1, #0
 8003a9e:	00d9      	lsls	r1, r3, #3
 8003aa0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003aa4:	00d0      	lsls	r0, r2, #3
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	1911      	adds	r1, r2, r4
 8003aac:	6639      	str	r1, [r7, #96]	; 0x60
 8003aae:	416b      	adcs	r3, r5
 8003ab0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f04f 0300 	mov.w	r3, #0
 8003abc:	1891      	adds	r1, r2, r2
 8003abe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ac0:	415b      	adcs	r3, r3
 8003ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ac4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003ac8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003acc:	f7fc fbd0 	bl	8000270 <__aeabi_uldivmod>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	4ba5      	ldr	r3, [pc, #660]	; (8003d6c <UART_SetConfig+0x38c>)
 8003ad6:	fba3 2302 	umull	r2, r3, r3, r2
 8003ada:	095b      	lsrs	r3, r3, #5
 8003adc:	011e      	lsls	r6, r3, #4
 8003ade:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ae0:	461c      	mov	r4, r3
 8003ae2:	f04f 0500 	mov.w	r5, #0
 8003ae6:	4622      	mov	r2, r4
 8003ae8:	462b      	mov	r3, r5
 8003aea:	1891      	adds	r1, r2, r2
 8003aec:	6339      	str	r1, [r7, #48]	; 0x30
 8003aee:	415b      	adcs	r3, r3
 8003af0:	637b      	str	r3, [r7, #52]	; 0x34
 8003af2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003af6:	1912      	adds	r2, r2, r4
 8003af8:	eb45 0303 	adc.w	r3, r5, r3
 8003afc:	f04f 0000 	mov.w	r0, #0
 8003b00:	f04f 0100 	mov.w	r1, #0
 8003b04:	00d9      	lsls	r1, r3, #3
 8003b06:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b0a:	00d0      	lsls	r0, r2, #3
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	1911      	adds	r1, r2, r4
 8003b12:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b14:	416b      	adcs	r3, r5
 8003b16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	f04f 0300 	mov.w	r3, #0
 8003b22:	1891      	adds	r1, r2, r2
 8003b24:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b26:	415b      	adcs	r3, r3
 8003b28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b2e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b32:	f7fc fb9d 	bl	8000270 <__aeabi_uldivmod>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4b8c      	ldr	r3, [pc, #560]	; (8003d6c <UART_SetConfig+0x38c>)
 8003b3c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b40:	095b      	lsrs	r3, r3, #5
 8003b42:	2164      	movs	r1, #100	; 0x64
 8003b44:	fb01 f303 	mul.w	r3, r1, r3
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	00db      	lsls	r3, r3, #3
 8003b4c:	3332      	adds	r3, #50	; 0x32
 8003b4e:	4a87      	ldr	r2, [pc, #540]	; (8003d6c <UART_SetConfig+0x38c>)
 8003b50:	fba2 2303 	umull	r2, r3, r2, r3
 8003b54:	095b      	lsrs	r3, r3, #5
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b5c:	441e      	add	r6, r3
 8003b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b60:	4618      	mov	r0, r3
 8003b62:	f04f 0100 	mov.w	r1, #0
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	1894      	adds	r4, r2, r2
 8003b6c:	623c      	str	r4, [r7, #32]
 8003b6e:	415b      	adcs	r3, r3
 8003b70:	627b      	str	r3, [r7, #36]	; 0x24
 8003b72:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b76:	1812      	adds	r2, r2, r0
 8003b78:	eb41 0303 	adc.w	r3, r1, r3
 8003b7c:	f04f 0400 	mov.w	r4, #0
 8003b80:	f04f 0500 	mov.w	r5, #0
 8003b84:	00dd      	lsls	r5, r3, #3
 8003b86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003b8a:	00d4      	lsls	r4, r2, #3
 8003b8c:	4622      	mov	r2, r4
 8003b8e:	462b      	mov	r3, r5
 8003b90:	1814      	adds	r4, r2, r0
 8003b92:	653c      	str	r4, [r7, #80]	; 0x50
 8003b94:	414b      	adcs	r3, r1
 8003b96:	657b      	str	r3, [r7, #84]	; 0x54
 8003b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	f04f 0300 	mov.w	r3, #0
 8003ba2:	1891      	adds	r1, r2, r2
 8003ba4:	61b9      	str	r1, [r7, #24]
 8003ba6:	415b      	adcs	r3, r3
 8003ba8:	61fb      	str	r3, [r7, #28]
 8003baa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003bb2:	f7fc fb5d 	bl	8000270 <__aeabi_uldivmod>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	460b      	mov	r3, r1
 8003bba:	4b6c      	ldr	r3, [pc, #432]	; (8003d6c <UART_SetConfig+0x38c>)
 8003bbc:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	2164      	movs	r1, #100	; 0x64
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	00db      	lsls	r3, r3, #3
 8003bcc:	3332      	adds	r3, #50	; 0x32
 8003bce:	4a67      	ldr	r2, [pc, #412]	; (8003d6c <UART_SetConfig+0x38c>)
 8003bd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd4:	095b      	lsrs	r3, r3, #5
 8003bd6:	f003 0207 	and.w	r2, r3, #7
 8003bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4432      	add	r2, r6
 8003be0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003be2:	e0b9      	b.n	8003d58 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003be4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003be6:	461c      	mov	r4, r3
 8003be8:	f04f 0500 	mov.w	r5, #0
 8003bec:	4622      	mov	r2, r4
 8003bee:	462b      	mov	r3, r5
 8003bf0:	1891      	adds	r1, r2, r2
 8003bf2:	6139      	str	r1, [r7, #16]
 8003bf4:	415b      	adcs	r3, r3
 8003bf6:	617b      	str	r3, [r7, #20]
 8003bf8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003bfc:	1912      	adds	r2, r2, r4
 8003bfe:	eb45 0303 	adc.w	r3, r5, r3
 8003c02:	f04f 0000 	mov.w	r0, #0
 8003c06:	f04f 0100 	mov.w	r1, #0
 8003c0a:	00d9      	lsls	r1, r3, #3
 8003c0c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c10:	00d0      	lsls	r0, r2, #3
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	eb12 0804 	adds.w	r8, r2, r4
 8003c1a:	eb43 0905 	adc.w	r9, r3, r5
 8003c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f04f 0100 	mov.w	r1, #0
 8003c28:	f04f 0200 	mov.w	r2, #0
 8003c2c:	f04f 0300 	mov.w	r3, #0
 8003c30:	008b      	lsls	r3, r1, #2
 8003c32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c36:	0082      	lsls	r2, r0, #2
 8003c38:	4640      	mov	r0, r8
 8003c3a:	4649      	mov	r1, r9
 8003c3c:	f7fc fb18 	bl	8000270 <__aeabi_uldivmod>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4b49      	ldr	r3, [pc, #292]	; (8003d6c <UART_SetConfig+0x38c>)
 8003c46:	fba3 2302 	umull	r2, r3, r3, r2
 8003c4a:	095b      	lsrs	r3, r3, #5
 8003c4c:	011e      	lsls	r6, r3, #4
 8003c4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c50:	4618      	mov	r0, r3
 8003c52:	f04f 0100 	mov.w	r1, #0
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	1894      	adds	r4, r2, r2
 8003c5c:	60bc      	str	r4, [r7, #8]
 8003c5e:	415b      	adcs	r3, r3
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c66:	1812      	adds	r2, r2, r0
 8003c68:	eb41 0303 	adc.w	r3, r1, r3
 8003c6c:	f04f 0400 	mov.w	r4, #0
 8003c70:	f04f 0500 	mov.w	r5, #0
 8003c74:	00dd      	lsls	r5, r3, #3
 8003c76:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003c7a:	00d4      	lsls	r4, r2, #3
 8003c7c:	4622      	mov	r2, r4
 8003c7e:	462b      	mov	r3, r5
 8003c80:	1814      	adds	r4, r2, r0
 8003c82:	64bc      	str	r4, [r7, #72]	; 0x48
 8003c84:	414b      	adcs	r3, r1
 8003c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f04f 0100 	mov.w	r1, #0
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	008b      	lsls	r3, r1, #2
 8003c9c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ca0:	0082      	lsls	r2, r0, #2
 8003ca2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003ca6:	f7fc fae3 	bl	8000270 <__aeabi_uldivmod>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4b2f      	ldr	r3, [pc, #188]	; (8003d6c <UART_SetConfig+0x38c>)
 8003cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb4:	095b      	lsrs	r3, r3, #5
 8003cb6:	2164      	movs	r1, #100	; 0x64
 8003cb8:	fb01 f303 	mul.w	r3, r1, r3
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	3332      	adds	r3, #50	; 0x32
 8003cc2:	4a2a      	ldr	r2, [pc, #168]	; (8003d6c <UART_SetConfig+0x38c>)
 8003cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc8:	095b      	lsrs	r3, r3, #5
 8003cca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cce:	441e      	add	r6, r3
 8003cd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f04f 0100 	mov.w	r1, #0
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	1894      	adds	r4, r2, r2
 8003cde:	603c      	str	r4, [r7, #0]
 8003ce0:	415b      	adcs	r3, r3
 8003ce2:	607b      	str	r3, [r7, #4]
 8003ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ce8:	1812      	adds	r2, r2, r0
 8003cea:	eb41 0303 	adc.w	r3, r1, r3
 8003cee:	f04f 0400 	mov.w	r4, #0
 8003cf2:	f04f 0500 	mov.w	r5, #0
 8003cf6:	00dd      	lsls	r5, r3, #3
 8003cf8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cfc:	00d4      	lsls	r4, r2, #3
 8003cfe:	4622      	mov	r2, r4
 8003d00:	462b      	mov	r3, r5
 8003d02:	eb12 0a00 	adds.w	sl, r2, r0
 8003d06:	eb43 0b01 	adc.w	fp, r3, r1
 8003d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f04f 0100 	mov.w	r1, #0
 8003d14:	f04f 0200 	mov.w	r2, #0
 8003d18:	f04f 0300 	mov.w	r3, #0
 8003d1c:	008b      	lsls	r3, r1, #2
 8003d1e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d22:	0082      	lsls	r2, r0, #2
 8003d24:	4650      	mov	r0, sl
 8003d26:	4659      	mov	r1, fp
 8003d28:	f7fc faa2 	bl	8000270 <__aeabi_uldivmod>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4b0e      	ldr	r3, [pc, #56]	; (8003d6c <UART_SetConfig+0x38c>)
 8003d32:	fba3 1302 	umull	r1, r3, r3, r2
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	2164      	movs	r1, #100	; 0x64
 8003d3a:	fb01 f303 	mul.w	r3, r1, r3
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	3332      	adds	r3, #50	; 0x32
 8003d44:	4a09      	ldr	r2, [pc, #36]	; (8003d6c <UART_SetConfig+0x38c>)
 8003d46:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	f003 020f 	and.w	r2, r3, #15
 8003d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4432      	add	r2, r6
 8003d56:	609a      	str	r2, [r3, #8]
}
 8003d58:	bf00      	nop
 8003d5a:	377c      	adds	r7, #124	; 0x7c
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d62:	bf00      	nop
 8003d64:	40011000 	.word	0x40011000
 8003d68:	40011400 	.word	0x40011400
 8003d6c:	51eb851f 	.word	0x51eb851f

08003d70 <__errno>:
 8003d70:	4b01      	ldr	r3, [pc, #4]	; (8003d78 <__errno+0x8>)
 8003d72:	6818      	ldr	r0, [r3, #0]
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	2000000c 	.word	0x2000000c

08003d7c <__libc_init_array>:
 8003d7c:	b570      	push	{r4, r5, r6, lr}
 8003d7e:	4d0d      	ldr	r5, [pc, #52]	; (8003db4 <__libc_init_array+0x38>)
 8003d80:	4c0d      	ldr	r4, [pc, #52]	; (8003db8 <__libc_init_array+0x3c>)
 8003d82:	1b64      	subs	r4, r4, r5
 8003d84:	10a4      	asrs	r4, r4, #2
 8003d86:	2600      	movs	r6, #0
 8003d88:	42a6      	cmp	r6, r4
 8003d8a:	d109      	bne.n	8003da0 <__libc_init_array+0x24>
 8003d8c:	4d0b      	ldr	r5, [pc, #44]	; (8003dbc <__libc_init_array+0x40>)
 8003d8e:	4c0c      	ldr	r4, [pc, #48]	; (8003dc0 <__libc_init_array+0x44>)
 8003d90:	f000 fc4e 	bl	8004630 <_init>
 8003d94:	1b64      	subs	r4, r4, r5
 8003d96:	10a4      	asrs	r4, r4, #2
 8003d98:	2600      	movs	r6, #0
 8003d9a:	42a6      	cmp	r6, r4
 8003d9c:	d105      	bne.n	8003daa <__libc_init_array+0x2e>
 8003d9e:	bd70      	pop	{r4, r5, r6, pc}
 8003da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003da4:	4798      	blx	r3
 8003da6:	3601      	adds	r6, #1
 8003da8:	e7ee      	b.n	8003d88 <__libc_init_array+0xc>
 8003daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dae:	4798      	blx	r3
 8003db0:	3601      	adds	r6, #1
 8003db2:	e7f2      	b.n	8003d9a <__libc_init_array+0x1e>
 8003db4:	080046c8 	.word	0x080046c8
 8003db8:	080046c8 	.word	0x080046c8
 8003dbc:	080046c8 	.word	0x080046c8
 8003dc0:	080046cc 	.word	0x080046cc

08003dc4 <memset>:
 8003dc4:	4402      	add	r2, r0
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d100      	bne.n	8003dce <memset+0xa>
 8003dcc:	4770      	bx	lr
 8003dce:	f803 1b01 	strb.w	r1, [r3], #1
 8003dd2:	e7f9      	b.n	8003dc8 <memset+0x4>

08003dd4 <siprintf>:
 8003dd4:	b40e      	push	{r1, r2, r3}
 8003dd6:	b500      	push	{lr}
 8003dd8:	b09c      	sub	sp, #112	; 0x70
 8003dda:	ab1d      	add	r3, sp, #116	; 0x74
 8003ddc:	9002      	str	r0, [sp, #8]
 8003dde:	9006      	str	r0, [sp, #24]
 8003de0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003de4:	4809      	ldr	r0, [pc, #36]	; (8003e0c <siprintf+0x38>)
 8003de6:	9107      	str	r1, [sp, #28]
 8003de8:	9104      	str	r1, [sp, #16]
 8003dea:	4909      	ldr	r1, [pc, #36]	; (8003e10 <siprintf+0x3c>)
 8003dec:	f853 2b04 	ldr.w	r2, [r3], #4
 8003df0:	9105      	str	r1, [sp, #20]
 8003df2:	6800      	ldr	r0, [r0, #0]
 8003df4:	9301      	str	r3, [sp, #4]
 8003df6:	a902      	add	r1, sp, #8
 8003df8:	f000 f868 	bl	8003ecc <_svfiprintf_r>
 8003dfc:	9b02      	ldr	r3, [sp, #8]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	701a      	strb	r2, [r3, #0]
 8003e02:	b01c      	add	sp, #112	; 0x70
 8003e04:	f85d eb04 	ldr.w	lr, [sp], #4
 8003e08:	b003      	add	sp, #12
 8003e0a:	4770      	bx	lr
 8003e0c:	2000000c 	.word	0x2000000c
 8003e10:	ffff0208 	.word	0xffff0208

08003e14 <__ssputs_r>:
 8003e14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e18:	688e      	ldr	r6, [r1, #8]
 8003e1a:	429e      	cmp	r6, r3
 8003e1c:	4682      	mov	sl, r0
 8003e1e:	460c      	mov	r4, r1
 8003e20:	4690      	mov	r8, r2
 8003e22:	461f      	mov	r7, r3
 8003e24:	d838      	bhi.n	8003e98 <__ssputs_r+0x84>
 8003e26:	898a      	ldrh	r2, [r1, #12]
 8003e28:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003e2c:	d032      	beq.n	8003e94 <__ssputs_r+0x80>
 8003e2e:	6825      	ldr	r5, [r4, #0]
 8003e30:	6909      	ldr	r1, [r1, #16]
 8003e32:	eba5 0901 	sub.w	r9, r5, r1
 8003e36:	6965      	ldr	r5, [r4, #20]
 8003e38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003e3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003e40:	3301      	adds	r3, #1
 8003e42:	444b      	add	r3, r9
 8003e44:	106d      	asrs	r5, r5, #1
 8003e46:	429d      	cmp	r5, r3
 8003e48:	bf38      	it	cc
 8003e4a:	461d      	movcc	r5, r3
 8003e4c:	0553      	lsls	r3, r2, #21
 8003e4e:	d531      	bpl.n	8003eb4 <__ssputs_r+0xa0>
 8003e50:	4629      	mov	r1, r5
 8003e52:	f000 fb47 	bl	80044e4 <_malloc_r>
 8003e56:	4606      	mov	r6, r0
 8003e58:	b950      	cbnz	r0, 8003e70 <__ssputs_r+0x5c>
 8003e5a:	230c      	movs	r3, #12
 8003e5c:	f8ca 3000 	str.w	r3, [sl]
 8003e60:	89a3      	ldrh	r3, [r4, #12]
 8003e62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e66:	81a3      	strh	r3, [r4, #12]
 8003e68:	f04f 30ff 	mov.w	r0, #4294967295
 8003e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e70:	6921      	ldr	r1, [r4, #16]
 8003e72:	464a      	mov	r2, r9
 8003e74:	f000 fabe 	bl	80043f4 <memcpy>
 8003e78:	89a3      	ldrh	r3, [r4, #12]
 8003e7a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003e7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e82:	81a3      	strh	r3, [r4, #12]
 8003e84:	6126      	str	r6, [r4, #16]
 8003e86:	6165      	str	r5, [r4, #20]
 8003e88:	444e      	add	r6, r9
 8003e8a:	eba5 0509 	sub.w	r5, r5, r9
 8003e8e:	6026      	str	r6, [r4, #0]
 8003e90:	60a5      	str	r5, [r4, #8]
 8003e92:	463e      	mov	r6, r7
 8003e94:	42be      	cmp	r6, r7
 8003e96:	d900      	bls.n	8003e9a <__ssputs_r+0x86>
 8003e98:	463e      	mov	r6, r7
 8003e9a:	4632      	mov	r2, r6
 8003e9c:	6820      	ldr	r0, [r4, #0]
 8003e9e:	4641      	mov	r1, r8
 8003ea0:	f000 fab6 	bl	8004410 <memmove>
 8003ea4:	68a3      	ldr	r3, [r4, #8]
 8003ea6:	6822      	ldr	r2, [r4, #0]
 8003ea8:	1b9b      	subs	r3, r3, r6
 8003eaa:	4432      	add	r2, r6
 8003eac:	60a3      	str	r3, [r4, #8]
 8003eae:	6022      	str	r2, [r4, #0]
 8003eb0:	2000      	movs	r0, #0
 8003eb2:	e7db      	b.n	8003e6c <__ssputs_r+0x58>
 8003eb4:	462a      	mov	r2, r5
 8003eb6:	f000 fb6f 	bl	8004598 <_realloc_r>
 8003eba:	4606      	mov	r6, r0
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	d1e1      	bne.n	8003e84 <__ssputs_r+0x70>
 8003ec0:	6921      	ldr	r1, [r4, #16]
 8003ec2:	4650      	mov	r0, sl
 8003ec4:	f000 fabe 	bl	8004444 <_free_r>
 8003ec8:	e7c7      	b.n	8003e5a <__ssputs_r+0x46>
	...

08003ecc <_svfiprintf_r>:
 8003ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ed0:	4698      	mov	r8, r3
 8003ed2:	898b      	ldrh	r3, [r1, #12]
 8003ed4:	061b      	lsls	r3, r3, #24
 8003ed6:	b09d      	sub	sp, #116	; 0x74
 8003ed8:	4607      	mov	r7, r0
 8003eda:	460d      	mov	r5, r1
 8003edc:	4614      	mov	r4, r2
 8003ede:	d50e      	bpl.n	8003efe <_svfiprintf_r+0x32>
 8003ee0:	690b      	ldr	r3, [r1, #16]
 8003ee2:	b963      	cbnz	r3, 8003efe <_svfiprintf_r+0x32>
 8003ee4:	2140      	movs	r1, #64	; 0x40
 8003ee6:	f000 fafd 	bl	80044e4 <_malloc_r>
 8003eea:	6028      	str	r0, [r5, #0]
 8003eec:	6128      	str	r0, [r5, #16]
 8003eee:	b920      	cbnz	r0, 8003efa <_svfiprintf_r+0x2e>
 8003ef0:	230c      	movs	r3, #12
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ef8:	e0d1      	b.n	800409e <_svfiprintf_r+0x1d2>
 8003efa:	2340      	movs	r3, #64	; 0x40
 8003efc:	616b      	str	r3, [r5, #20]
 8003efe:	2300      	movs	r3, #0
 8003f00:	9309      	str	r3, [sp, #36]	; 0x24
 8003f02:	2320      	movs	r3, #32
 8003f04:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003f08:	f8cd 800c 	str.w	r8, [sp, #12]
 8003f0c:	2330      	movs	r3, #48	; 0x30
 8003f0e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80040b8 <_svfiprintf_r+0x1ec>
 8003f12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003f16:	f04f 0901 	mov.w	r9, #1
 8003f1a:	4623      	mov	r3, r4
 8003f1c:	469a      	mov	sl, r3
 8003f1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f22:	b10a      	cbz	r2, 8003f28 <_svfiprintf_r+0x5c>
 8003f24:	2a25      	cmp	r2, #37	; 0x25
 8003f26:	d1f9      	bne.n	8003f1c <_svfiprintf_r+0x50>
 8003f28:	ebba 0b04 	subs.w	fp, sl, r4
 8003f2c:	d00b      	beq.n	8003f46 <_svfiprintf_r+0x7a>
 8003f2e:	465b      	mov	r3, fp
 8003f30:	4622      	mov	r2, r4
 8003f32:	4629      	mov	r1, r5
 8003f34:	4638      	mov	r0, r7
 8003f36:	f7ff ff6d 	bl	8003e14 <__ssputs_r>
 8003f3a:	3001      	adds	r0, #1
 8003f3c:	f000 80aa 	beq.w	8004094 <_svfiprintf_r+0x1c8>
 8003f40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003f42:	445a      	add	r2, fp
 8003f44:	9209      	str	r2, [sp, #36]	; 0x24
 8003f46:	f89a 3000 	ldrb.w	r3, [sl]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 80a2 	beq.w	8004094 <_svfiprintf_r+0x1c8>
 8003f50:	2300      	movs	r3, #0
 8003f52:	f04f 32ff 	mov.w	r2, #4294967295
 8003f56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003f5a:	f10a 0a01 	add.w	sl, sl, #1
 8003f5e:	9304      	str	r3, [sp, #16]
 8003f60:	9307      	str	r3, [sp, #28]
 8003f62:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003f66:	931a      	str	r3, [sp, #104]	; 0x68
 8003f68:	4654      	mov	r4, sl
 8003f6a:	2205      	movs	r2, #5
 8003f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f70:	4851      	ldr	r0, [pc, #324]	; (80040b8 <_svfiprintf_r+0x1ec>)
 8003f72:	f7fc f92d 	bl	80001d0 <memchr>
 8003f76:	9a04      	ldr	r2, [sp, #16]
 8003f78:	b9d8      	cbnz	r0, 8003fb2 <_svfiprintf_r+0xe6>
 8003f7a:	06d0      	lsls	r0, r2, #27
 8003f7c:	bf44      	itt	mi
 8003f7e:	2320      	movmi	r3, #32
 8003f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f84:	0711      	lsls	r1, r2, #28
 8003f86:	bf44      	itt	mi
 8003f88:	232b      	movmi	r3, #43	; 0x2b
 8003f8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003f8e:	f89a 3000 	ldrb.w	r3, [sl]
 8003f92:	2b2a      	cmp	r3, #42	; 0x2a
 8003f94:	d015      	beq.n	8003fc2 <_svfiprintf_r+0xf6>
 8003f96:	9a07      	ldr	r2, [sp, #28]
 8003f98:	4654      	mov	r4, sl
 8003f9a:	2000      	movs	r0, #0
 8003f9c:	f04f 0c0a 	mov.w	ip, #10
 8003fa0:	4621      	mov	r1, r4
 8003fa2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003fa6:	3b30      	subs	r3, #48	; 0x30
 8003fa8:	2b09      	cmp	r3, #9
 8003faa:	d94e      	bls.n	800404a <_svfiprintf_r+0x17e>
 8003fac:	b1b0      	cbz	r0, 8003fdc <_svfiprintf_r+0x110>
 8003fae:	9207      	str	r2, [sp, #28]
 8003fb0:	e014      	b.n	8003fdc <_svfiprintf_r+0x110>
 8003fb2:	eba0 0308 	sub.w	r3, r0, r8
 8003fb6:	fa09 f303 	lsl.w	r3, r9, r3
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	9304      	str	r3, [sp, #16]
 8003fbe:	46a2      	mov	sl, r4
 8003fc0:	e7d2      	b.n	8003f68 <_svfiprintf_r+0x9c>
 8003fc2:	9b03      	ldr	r3, [sp, #12]
 8003fc4:	1d19      	adds	r1, r3, #4
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	9103      	str	r1, [sp, #12]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	bfbb      	ittet	lt
 8003fce:	425b      	neglt	r3, r3
 8003fd0:	f042 0202 	orrlt.w	r2, r2, #2
 8003fd4:	9307      	strge	r3, [sp, #28]
 8003fd6:	9307      	strlt	r3, [sp, #28]
 8003fd8:	bfb8      	it	lt
 8003fda:	9204      	strlt	r2, [sp, #16]
 8003fdc:	7823      	ldrb	r3, [r4, #0]
 8003fde:	2b2e      	cmp	r3, #46	; 0x2e
 8003fe0:	d10c      	bne.n	8003ffc <_svfiprintf_r+0x130>
 8003fe2:	7863      	ldrb	r3, [r4, #1]
 8003fe4:	2b2a      	cmp	r3, #42	; 0x2a
 8003fe6:	d135      	bne.n	8004054 <_svfiprintf_r+0x188>
 8003fe8:	9b03      	ldr	r3, [sp, #12]
 8003fea:	1d1a      	adds	r2, r3, #4
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	9203      	str	r2, [sp, #12]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	bfb8      	it	lt
 8003ff4:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ff8:	3402      	adds	r4, #2
 8003ffa:	9305      	str	r3, [sp, #20]
 8003ffc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80040c8 <_svfiprintf_r+0x1fc>
 8004000:	7821      	ldrb	r1, [r4, #0]
 8004002:	2203      	movs	r2, #3
 8004004:	4650      	mov	r0, sl
 8004006:	f7fc f8e3 	bl	80001d0 <memchr>
 800400a:	b140      	cbz	r0, 800401e <_svfiprintf_r+0x152>
 800400c:	2340      	movs	r3, #64	; 0x40
 800400e:	eba0 000a 	sub.w	r0, r0, sl
 8004012:	fa03 f000 	lsl.w	r0, r3, r0
 8004016:	9b04      	ldr	r3, [sp, #16]
 8004018:	4303      	orrs	r3, r0
 800401a:	3401      	adds	r4, #1
 800401c:	9304      	str	r3, [sp, #16]
 800401e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004022:	4826      	ldr	r0, [pc, #152]	; (80040bc <_svfiprintf_r+0x1f0>)
 8004024:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004028:	2206      	movs	r2, #6
 800402a:	f7fc f8d1 	bl	80001d0 <memchr>
 800402e:	2800      	cmp	r0, #0
 8004030:	d038      	beq.n	80040a4 <_svfiprintf_r+0x1d8>
 8004032:	4b23      	ldr	r3, [pc, #140]	; (80040c0 <_svfiprintf_r+0x1f4>)
 8004034:	bb1b      	cbnz	r3, 800407e <_svfiprintf_r+0x1b2>
 8004036:	9b03      	ldr	r3, [sp, #12]
 8004038:	3307      	adds	r3, #7
 800403a:	f023 0307 	bic.w	r3, r3, #7
 800403e:	3308      	adds	r3, #8
 8004040:	9303      	str	r3, [sp, #12]
 8004042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004044:	4433      	add	r3, r6
 8004046:	9309      	str	r3, [sp, #36]	; 0x24
 8004048:	e767      	b.n	8003f1a <_svfiprintf_r+0x4e>
 800404a:	fb0c 3202 	mla	r2, ip, r2, r3
 800404e:	460c      	mov	r4, r1
 8004050:	2001      	movs	r0, #1
 8004052:	e7a5      	b.n	8003fa0 <_svfiprintf_r+0xd4>
 8004054:	2300      	movs	r3, #0
 8004056:	3401      	adds	r4, #1
 8004058:	9305      	str	r3, [sp, #20]
 800405a:	4619      	mov	r1, r3
 800405c:	f04f 0c0a 	mov.w	ip, #10
 8004060:	4620      	mov	r0, r4
 8004062:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004066:	3a30      	subs	r2, #48	; 0x30
 8004068:	2a09      	cmp	r2, #9
 800406a:	d903      	bls.n	8004074 <_svfiprintf_r+0x1a8>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d0c5      	beq.n	8003ffc <_svfiprintf_r+0x130>
 8004070:	9105      	str	r1, [sp, #20]
 8004072:	e7c3      	b.n	8003ffc <_svfiprintf_r+0x130>
 8004074:	fb0c 2101 	mla	r1, ip, r1, r2
 8004078:	4604      	mov	r4, r0
 800407a:	2301      	movs	r3, #1
 800407c:	e7f0      	b.n	8004060 <_svfiprintf_r+0x194>
 800407e:	ab03      	add	r3, sp, #12
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	462a      	mov	r2, r5
 8004084:	4b0f      	ldr	r3, [pc, #60]	; (80040c4 <_svfiprintf_r+0x1f8>)
 8004086:	a904      	add	r1, sp, #16
 8004088:	4638      	mov	r0, r7
 800408a:	f3af 8000 	nop.w
 800408e:	1c42      	adds	r2, r0, #1
 8004090:	4606      	mov	r6, r0
 8004092:	d1d6      	bne.n	8004042 <_svfiprintf_r+0x176>
 8004094:	89ab      	ldrh	r3, [r5, #12]
 8004096:	065b      	lsls	r3, r3, #25
 8004098:	f53f af2c 	bmi.w	8003ef4 <_svfiprintf_r+0x28>
 800409c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800409e:	b01d      	add	sp, #116	; 0x74
 80040a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a4:	ab03      	add	r3, sp, #12
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	462a      	mov	r2, r5
 80040aa:	4b06      	ldr	r3, [pc, #24]	; (80040c4 <_svfiprintf_r+0x1f8>)
 80040ac:	a904      	add	r1, sp, #16
 80040ae:	4638      	mov	r0, r7
 80040b0:	f000 f87a 	bl	80041a8 <_printf_i>
 80040b4:	e7eb      	b.n	800408e <_svfiprintf_r+0x1c2>
 80040b6:	bf00      	nop
 80040b8:	0800468c 	.word	0x0800468c
 80040bc:	08004696 	.word	0x08004696
 80040c0:	00000000 	.word	0x00000000
 80040c4:	08003e15 	.word	0x08003e15
 80040c8:	08004692 	.word	0x08004692

080040cc <_printf_common>:
 80040cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040d0:	4616      	mov	r6, r2
 80040d2:	4699      	mov	r9, r3
 80040d4:	688a      	ldr	r2, [r1, #8]
 80040d6:	690b      	ldr	r3, [r1, #16]
 80040d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80040dc:	4293      	cmp	r3, r2
 80040de:	bfb8      	it	lt
 80040e0:	4613      	movlt	r3, r2
 80040e2:	6033      	str	r3, [r6, #0]
 80040e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80040e8:	4607      	mov	r7, r0
 80040ea:	460c      	mov	r4, r1
 80040ec:	b10a      	cbz	r2, 80040f2 <_printf_common+0x26>
 80040ee:	3301      	adds	r3, #1
 80040f0:	6033      	str	r3, [r6, #0]
 80040f2:	6823      	ldr	r3, [r4, #0]
 80040f4:	0699      	lsls	r1, r3, #26
 80040f6:	bf42      	ittt	mi
 80040f8:	6833      	ldrmi	r3, [r6, #0]
 80040fa:	3302      	addmi	r3, #2
 80040fc:	6033      	strmi	r3, [r6, #0]
 80040fe:	6825      	ldr	r5, [r4, #0]
 8004100:	f015 0506 	ands.w	r5, r5, #6
 8004104:	d106      	bne.n	8004114 <_printf_common+0x48>
 8004106:	f104 0a19 	add.w	sl, r4, #25
 800410a:	68e3      	ldr	r3, [r4, #12]
 800410c:	6832      	ldr	r2, [r6, #0]
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	42ab      	cmp	r3, r5
 8004112:	dc26      	bgt.n	8004162 <_printf_common+0x96>
 8004114:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004118:	1e13      	subs	r3, r2, #0
 800411a:	6822      	ldr	r2, [r4, #0]
 800411c:	bf18      	it	ne
 800411e:	2301      	movne	r3, #1
 8004120:	0692      	lsls	r2, r2, #26
 8004122:	d42b      	bmi.n	800417c <_printf_common+0xb0>
 8004124:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004128:	4649      	mov	r1, r9
 800412a:	4638      	mov	r0, r7
 800412c:	47c0      	blx	r8
 800412e:	3001      	adds	r0, #1
 8004130:	d01e      	beq.n	8004170 <_printf_common+0xa4>
 8004132:	6823      	ldr	r3, [r4, #0]
 8004134:	68e5      	ldr	r5, [r4, #12]
 8004136:	6832      	ldr	r2, [r6, #0]
 8004138:	f003 0306 	and.w	r3, r3, #6
 800413c:	2b04      	cmp	r3, #4
 800413e:	bf08      	it	eq
 8004140:	1aad      	subeq	r5, r5, r2
 8004142:	68a3      	ldr	r3, [r4, #8]
 8004144:	6922      	ldr	r2, [r4, #16]
 8004146:	bf0c      	ite	eq
 8004148:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800414c:	2500      	movne	r5, #0
 800414e:	4293      	cmp	r3, r2
 8004150:	bfc4      	itt	gt
 8004152:	1a9b      	subgt	r3, r3, r2
 8004154:	18ed      	addgt	r5, r5, r3
 8004156:	2600      	movs	r6, #0
 8004158:	341a      	adds	r4, #26
 800415a:	42b5      	cmp	r5, r6
 800415c:	d11a      	bne.n	8004194 <_printf_common+0xc8>
 800415e:	2000      	movs	r0, #0
 8004160:	e008      	b.n	8004174 <_printf_common+0xa8>
 8004162:	2301      	movs	r3, #1
 8004164:	4652      	mov	r2, sl
 8004166:	4649      	mov	r1, r9
 8004168:	4638      	mov	r0, r7
 800416a:	47c0      	blx	r8
 800416c:	3001      	adds	r0, #1
 800416e:	d103      	bne.n	8004178 <_printf_common+0xac>
 8004170:	f04f 30ff 	mov.w	r0, #4294967295
 8004174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004178:	3501      	adds	r5, #1
 800417a:	e7c6      	b.n	800410a <_printf_common+0x3e>
 800417c:	18e1      	adds	r1, r4, r3
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	2030      	movs	r0, #48	; 0x30
 8004182:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004186:	4422      	add	r2, r4
 8004188:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800418c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004190:	3302      	adds	r3, #2
 8004192:	e7c7      	b.n	8004124 <_printf_common+0x58>
 8004194:	2301      	movs	r3, #1
 8004196:	4622      	mov	r2, r4
 8004198:	4649      	mov	r1, r9
 800419a:	4638      	mov	r0, r7
 800419c:	47c0      	blx	r8
 800419e:	3001      	adds	r0, #1
 80041a0:	d0e6      	beq.n	8004170 <_printf_common+0xa4>
 80041a2:	3601      	adds	r6, #1
 80041a4:	e7d9      	b.n	800415a <_printf_common+0x8e>
	...

080041a8 <_printf_i>:
 80041a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80041ac:	460c      	mov	r4, r1
 80041ae:	4691      	mov	r9, r2
 80041b0:	7e27      	ldrb	r7, [r4, #24]
 80041b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80041b4:	2f78      	cmp	r7, #120	; 0x78
 80041b6:	4680      	mov	r8, r0
 80041b8:	469a      	mov	sl, r3
 80041ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80041be:	d807      	bhi.n	80041d0 <_printf_i+0x28>
 80041c0:	2f62      	cmp	r7, #98	; 0x62
 80041c2:	d80a      	bhi.n	80041da <_printf_i+0x32>
 80041c4:	2f00      	cmp	r7, #0
 80041c6:	f000 80d8 	beq.w	800437a <_printf_i+0x1d2>
 80041ca:	2f58      	cmp	r7, #88	; 0x58
 80041cc:	f000 80a3 	beq.w	8004316 <_printf_i+0x16e>
 80041d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80041d8:	e03a      	b.n	8004250 <_printf_i+0xa8>
 80041da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80041de:	2b15      	cmp	r3, #21
 80041e0:	d8f6      	bhi.n	80041d0 <_printf_i+0x28>
 80041e2:	a001      	add	r0, pc, #4	; (adr r0, 80041e8 <_printf_i+0x40>)
 80041e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80041e8:	08004241 	.word	0x08004241
 80041ec:	08004255 	.word	0x08004255
 80041f0:	080041d1 	.word	0x080041d1
 80041f4:	080041d1 	.word	0x080041d1
 80041f8:	080041d1 	.word	0x080041d1
 80041fc:	080041d1 	.word	0x080041d1
 8004200:	08004255 	.word	0x08004255
 8004204:	080041d1 	.word	0x080041d1
 8004208:	080041d1 	.word	0x080041d1
 800420c:	080041d1 	.word	0x080041d1
 8004210:	080041d1 	.word	0x080041d1
 8004214:	08004361 	.word	0x08004361
 8004218:	08004285 	.word	0x08004285
 800421c:	08004343 	.word	0x08004343
 8004220:	080041d1 	.word	0x080041d1
 8004224:	080041d1 	.word	0x080041d1
 8004228:	08004383 	.word	0x08004383
 800422c:	080041d1 	.word	0x080041d1
 8004230:	08004285 	.word	0x08004285
 8004234:	080041d1 	.word	0x080041d1
 8004238:	080041d1 	.word	0x080041d1
 800423c:	0800434b 	.word	0x0800434b
 8004240:	680b      	ldr	r3, [r1, #0]
 8004242:	1d1a      	adds	r2, r3, #4
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	600a      	str	r2, [r1, #0]
 8004248:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800424c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004250:	2301      	movs	r3, #1
 8004252:	e0a3      	b.n	800439c <_printf_i+0x1f4>
 8004254:	6825      	ldr	r5, [r4, #0]
 8004256:	6808      	ldr	r0, [r1, #0]
 8004258:	062e      	lsls	r6, r5, #24
 800425a:	f100 0304 	add.w	r3, r0, #4
 800425e:	d50a      	bpl.n	8004276 <_printf_i+0xce>
 8004260:	6805      	ldr	r5, [r0, #0]
 8004262:	600b      	str	r3, [r1, #0]
 8004264:	2d00      	cmp	r5, #0
 8004266:	da03      	bge.n	8004270 <_printf_i+0xc8>
 8004268:	232d      	movs	r3, #45	; 0x2d
 800426a:	426d      	negs	r5, r5
 800426c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004270:	485e      	ldr	r0, [pc, #376]	; (80043ec <_printf_i+0x244>)
 8004272:	230a      	movs	r3, #10
 8004274:	e019      	b.n	80042aa <_printf_i+0x102>
 8004276:	f015 0f40 	tst.w	r5, #64	; 0x40
 800427a:	6805      	ldr	r5, [r0, #0]
 800427c:	600b      	str	r3, [r1, #0]
 800427e:	bf18      	it	ne
 8004280:	b22d      	sxthne	r5, r5
 8004282:	e7ef      	b.n	8004264 <_printf_i+0xbc>
 8004284:	680b      	ldr	r3, [r1, #0]
 8004286:	6825      	ldr	r5, [r4, #0]
 8004288:	1d18      	adds	r0, r3, #4
 800428a:	6008      	str	r0, [r1, #0]
 800428c:	0628      	lsls	r0, r5, #24
 800428e:	d501      	bpl.n	8004294 <_printf_i+0xec>
 8004290:	681d      	ldr	r5, [r3, #0]
 8004292:	e002      	b.n	800429a <_printf_i+0xf2>
 8004294:	0669      	lsls	r1, r5, #25
 8004296:	d5fb      	bpl.n	8004290 <_printf_i+0xe8>
 8004298:	881d      	ldrh	r5, [r3, #0]
 800429a:	4854      	ldr	r0, [pc, #336]	; (80043ec <_printf_i+0x244>)
 800429c:	2f6f      	cmp	r7, #111	; 0x6f
 800429e:	bf0c      	ite	eq
 80042a0:	2308      	moveq	r3, #8
 80042a2:	230a      	movne	r3, #10
 80042a4:	2100      	movs	r1, #0
 80042a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80042aa:	6866      	ldr	r6, [r4, #4]
 80042ac:	60a6      	str	r6, [r4, #8]
 80042ae:	2e00      	cmp	r6, #0
 80042b0:	bfa2      	ittt	ge
 80042b2:	6821      	ldrge	r1, [r4, #0]
 80042b4:	f021 0104 	bicge.w	r1, r1, #4
 80042b8:	6021      	strge	r1, [r4, #0]
 80042ba:	b90d      	cbnz	r5, 80042c0 <_printf_i+0x118>
 80042bc:	2e00      	cmp	r6, #0
 80042be:	d04d      	beq.n	800435c <_printf_i+0x1b4>
 80042c0:	4616      	mov	r6, r2
 80042c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80042c6:	fb03 5711 	mls	r7, r3, r1, r5
 80042ca:	5dc7      	ldrb	r7, [r0, r7]
 80042cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80042d0:	462f      	mov	r7, r5
 80042d2:	42bb      	cmp	r3, r7
 80042d4:	460d      	mov	r5, r1
 80042d6:	d9f4      	bls.n	80042c2 <_printf_i+0x11a>
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d10b      	bne.n	80042f4 <_printf_i+0x14c>
 80042dc:	6823      	ldr	r3, [r4, #0]
 80042de:	07df      	lsls	r7, r3, #31
 80042e0:	d508      	bpl.n	80042f4 <_printf_i+0x14c>
 80042e2:	6923      	ldr	r3, [r4, #16]
 80042e4:	6861      	ldr	r1, [r4, #4]
 80042e6:	4299      	cmp	r1, r3
 80042e8:	bfde      	ittt	le
 80042ea:	2330      	movle	r3, #48	; 0x30
 80042ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80042f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80042f4:	1b92      	subs	r2, r2, r6
 80042f6:	6122      	str	r2, [r4, #16]
 80042f8:	f8cd a000 	str.w	sl, [sp]
 80042fc:	464b      	mov	r3, r9
 80042fe:	aa03      	add	r2, sp, #12
 8004300:	4621      	mov	r1, r4
 8004302:	4640      	mov	r0, r8
 8004304:	f7ff fee2 	bl	80040cc <_printf_common>
 8004308:	3001      	adds	r0, #1
 800430a:	d14c      	bne.n	80043a6 <_printf_i+0x1fe>
 800430c:	f04f 30ff 	mov.w	r0, #4294967295
 8004310:	b004      	add	sp, #16
 8004312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004316:	4835      	ldr	r0, [pc, #212]	; (80043ec <_printf_i+0x244>)
 8004318:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800431c:	6823      	ldr	r3, [r4, #0]
 800431e:	680e      	ldr	r6, [r1, #0]
 8004320:	061f      	lsls	r7, r3, #24
 8004322:	f856 5b04 	ldr.w	r5, [r6], #4
 8004326:	600e      	str	r6, [r1, #0]
 8004328:	d514      	bpl.n	8004354 <_printf_i+0x1ac>
 800432a:	07d9      	lsls	r1, r3, #31
 800432c:	bf44      	itt	mi
 800432e:	f043 0320 	orrmi.w	r3, r3, #32
 8004332:	6023      	strmi	r3, [r4, #0]
 8004334:	b91d      	cbnz	r5, 800433e <_printf_i+0x196>
 8004336:	6823      	ldr	r3, [r4, #0]
 8004338:	f023 0320 	bic.w	r3, r3, #32
 800433c:	6023      	str	r3, [r4, #0]
 800433e:	2310      	movs	r3, #16
 8004340:	e7b0      	b.n	80042a4 <_printf_i+0xfc>
 8004342:	6823      	ldr	r3, [r4, #0]
 8004344:	f043 0320 	orr.w	r3, r3, #32
 8004348:	6023      	str	r3, [r4, #0]
 800434a:	2378      	movs	r3, #120	; 0x78
 800434c:	4828      	ldr	r0, [pc, #160]	; (80043f0 <_printf_i+0x248>)
 800434e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004352:	e7e3      	b.n	800431c <_printf_i+0x174>
 8004354:	065e      	lsls	r6, r3, #25
 8004356:	bf48      	it	mi
 8004358:	b2ad      	uxthmi	r5, r5
 800435a:	e7e6      	b.n	800432a <_printf_i+0x182>
 800435c:	4616      	mov	r6, r2
 800435e:	e7bb      	b.n	80042d8 <_printf_i+0x130>
 8004360:	680b      	ldr	r3, [r1, #0]
 8004362:	6826      	ldr	r6, [r4, #0]
 8004364:	6960      	ldr	r0, [r4, #20]
 8004366:	1d1d      	adds	r5, r3, #4
 8004368:	600d      	str	r5, [r1, #0]
 800436a:	0635      	lsls	r5, r6, #24
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	d501      	bpl.n	8004374 <_printf_i+0x1cc>
 8004370:	6018      	str	r0, [r3, #0]
 8004372:	e002      	b.n	800437a <_printf_i+0x1d2>
 8004374:	0671      	lsls	r1, r6, #25
 8004376:	d5fb      	bpl.n	8004370 <_printf_i+0x1c8>
 8004378:	8018      	strh	r0, [r3, #0]
 800437a:	2300      	movs	r3, #0
 800437c:	6123      	str	r3, [r4, #16]
 800437e:	4616      	mov	r6, r2
 8004380:	e7ba      	b.n	80042f8 <_printf_i+0x150>
 8004382:	680b      	ldr	r3, [r1, #0]
 8004384:	1d1a      	adds	r2, r3, #4
 8004386:	600a      	str	r2, [r1, #0]
 8004388:	681e      	ldr	r6, [r3, #0]
 800438a:	6862      	ldr	r2, [r4, #4]
 800438c:	2100      	movs	r1, #0
 800438e:	4630      	mov	r0, r6
 8004390:	f7fb ff1e 	bl	80001d0 <memchr>
 8004394:	b108      	cbz	r0, 800439a <_printf_i+0x1f2>
 8004396:	1b80      	subs	r0, r0, r6
 8004398:	6060      	str	r0, [r4, #4]
 800439a:	6863      	ldr	r3, [r4, #4]
 800439c:	6123      	str	r3, [r4, #16]
 800439e:	2300      	movs	r3, #0
 80043a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043a4:	e7a8      	b.n	80042f8 <_printf_i+0x150>
 80043a6:	6923      	ldr	r3, [r4, #16]
 80043a8:	4632      	mov	r2, r6
 80043aa:	4649      	mov	r1, r9
 80043ac:	4640      	mov	r0, r8
 80043ae:	47d0      	blx	sl
 80043b0:	3001      	adds	r0, #1
 80043b2:	d0ab      	beq.n	800430c <_printf_i+0x164>
 80043b4:	6823      	ldr	r3, [r4, #0]
 80043b6:	079b      	lsls	r3, r3, #30
 80043b8:	d413      	bmi.n	80043e2 <_printf_i+0x23a>
 80043ba:	68e0      	ldr	r0, [r4, #12]
 80043bc:	9b03      	ldr	r3, [sp, #12]
 80043be:	4298      	cmp	r0, r3
 80043c0:	bfb8      	it	lt
 80043c2:	4618      	movlt	r0, r3
 80043c4:	e7a4      	b.n	8004310 <_printf_i+0x168>
 80043c6:	2301      	movs	r3, #1
 80043c8:	4632      	mov	r2, r6
 80043ca:	4649      	mov	r1, r9
 80043cc:	4640      	mov	r0, r8
 80043ce:	47d0      	blx	sl
 80043d0:	3001      	adds	r0, #1
 80043d2:	d09b      	beq.n	800430c <_printf_i+0x164>
 80043d4:	3501      	adds	r5, #1
 80043d6:	68e3      	ldr	r3, [r4, #12]
 80043d8:	9903      	ldr	r1, [sp, #12]
 80043da:	1a5b      	subs	r3, r3, r1
 80043dc:	42ab      	cmp	r3, r5
 80043de:	dcf2      	bgt.n	80043c6 <_printf_i+0x21e>
 80043e0:	e7eb      	b.n	80043ba <_printf_i+0x212>
 80043e2:	2500      	movs	r5, #0
 80043e4:	f104 0619 	add.w	r6, r4, #25
 80043e8:	e7f5      	b.n	80043d6 <_printf_i+0x22e>
 80043ea:	bf00      	nop
 80043ec:	0800469d 	.word	0x0800469d
 80043f0:	080046ae 	.word	0x080046ae

080043f4 <memcpy>:
 80043f4:	440a      	add	r2, r1
 80043f6:	4291      	cmp	r1, r2
 80043f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80043fc:	d100      	bne.n	8004400 <memcpy+0xc>
 80043fe:	4770      	bx	lr
 8004400:	b510      	push	{r4, lr}
 8004402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004406:	f803 4f01 	strb.w	r4, [r3, #1]!
 800440a:	4291      	cmp	r1, r2
 800440c:	d1f9      	bne.n	8004402 <memcpy+0xe>
 800440e:	bd10      	pop	{r4, pc}

08004410 <memmove>:
 8004410:	4288      	cmp	r0, r1
 8004412:	b510      	push	{r4, lr}
 8004414:	eb01 0402 	add.w	r4, r1, r2
 8004418:	d902      	bls.n	8004420 <memmove+0x10>
 800441a:	4284      	cmp	r4, r0
 800441c:	4623      	mov	r3, r4
 800441e:	d807      	bhi.n	8004430 <memmove+0x20>
 8004420:	1e43      	subs	r3, r0, #1
 8004422:	42a1      	cmp	r1, r4
 8004424:	d008      	beq.n	8004438 <memmove+0x28>
 8004426:	f811 2b01 	ldrb.w	r2, [r1], #1
 800442a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800442e:	e7f8      	b.n	8004422 <memmove+0x12>
 8004430:	4402      	add	r2, r0
 8004432:	4601      	mov	r1, r0
 8004434:	428a      	cmp	r2, r1
 8004436:	d100      	bne.n	800443a <memmove+0x2a>
 8004438:	bd10      	pop	{r4, pc}
 800443a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800443e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004442:	e7f7      	b.n	8004434 <memmove+0x24>

08004444 <_free_r>:
 8004444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004446:	2900      	cmp	r1, #0
 8004448:	d048      	beq.n	80044dc <_free_r+0x98>
 800444a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800444e:	9001      	str	r0, [sp, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	f1a1 0404 	sub.w	r4, r1, #4
 8004456:	bfb8      	it	lt
 8004458:	18e4      	addlt	r4, r4, r3
 800445a:	f000 f8d3 	bl	8004604 <__malloc_lock>
 800445e:	4a20      	ldr	r2, [pc, #128]	; (80044e0 <_free_r+0x9c>)
 8004460:	9801      	ldr	r0, [sp, #4]
 8004462:	6813      	ldr	r3, [r2, #0]
 8004464:	4615      	mov	r5, r2
 8004466:	b933      	cbnz	r3, 8004476 <_free_r+0x32>
 8004468:	6063      	str	r3, [r4, #4]
 800446a:	6014      	str	r4, [r2, #0]
 800446c:	b003      	add	sp, #12
 800446e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004472:	f000 b8cd 	b.w	8004610 <__malloc_unlock>
 8004476:	42a3      	cmp	r3, r4
 8004478:	d90b      	bls.n	8004492 <_free_r+0x4e>
 800447a:	6821      	ldr	r1, [r4, #0]
 800447c:	1862      	adds	r2, r4, r1
 800447e:	4293      	cmp	r3, r2
 8004480:	bf04      	itt	eq
 8004482:	681a      	ldreq	r2, [r3, #0]
 8004484:	685b      	ldreq	r3, [r3, #4]
 8004486:	6063      	str	r3, [r4, #4]
 8004488:	bf04      	itt	eq
 800448a:	1852      	addeq	r2, r2, r1
 800448c:	6022      	streq	r2, [r4, #0]
 800448e:	602c      	str	r4, [r5, #0]
 8004490:	e7ec      	b.n	800446c <_free_r+0x28>
 8004492:	461a      	mov	r2, r3
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	b10b      	cbz	r3, 800449c <_free_r+0x58>
 8004498:	42a3      	cmp	r3, r4
 800449a:	d9fa      	bls.n	8004492 <_free_r+0x4e>
 800449c:	6811      	ldr	r1, [r2, #0]
 800449e:	1855      	adds	r5, r2, r1
 80044a0:	42a5      	cmp	r5, r4
 80044a2:	d10b      	bne.n	80044bc <_free_r+0x78>
 80044a4:	6824      	ldr	r4, [r4, #0]
 80044a6:	4421      	add	r1, r4
 80044a8:	1854      	adds	r4, r2, r1
 80044aa:	42a3      	cmp	r3, r4
 80044ac:	6011      	str	r1, [r2, #0]
 80044ae:	d1dd      	bne.n	800446c <_free_r+0x28>
 80044b0:	681c      	ldr	r4, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	6053      	str	r3, [r2, #4]
 80044b6:	4421      	add	r1, r4
 80044b8:	6011      	str	r1, [r2, #0]
 80044ba:	e7d7      	b.n	800446c <_free_r+0x28>
 80044bc:	d902      	bls.n	80044c4 <_free_r+0x80>
 80044be:	230c      	movs	r3, #12
 80044c0:	6003      	str	r3, [r0, #0]
 80044c2:	e7d3      	b.n	800446c <_free_r+0x28>
 80044c4:	6825      	ldr	r5, [r4, #0]
 80044c6:	1961      	adds	r1, r4, r5
 80044c8:	428b      	cmp	r3, r1
 80044ca:	bf04      	itt	eq
 80044cc:	6819      	ldreq	r1, [r3, #0]
 80044ce:	685b      	ldreq	r3, [r3, #4]
 80044d0:	6063      	str	r3, [r4, #4]
 80044d2:	bf04      	itt	eq
 80044d4:	1949      	addeq	r1, r1, r5
 80044d6:	6021      	streq	r1, [r4, #0]
 80044d8:	6054      	str	r4, [r2, #4]
 80044da:	e7c7      	b.n	800446c <_free_r+0x28>
 80044dc:	b003      	add	sp, #12
 80044de:	bd30      	pop	{r4, r5, pc}
 80044e0:	20000098 	.word	0x20000098

080044e4 <_malloc_r>:
 80044e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044e6:	1ccd      	adds	r5, r1, #3
 80044e8:	f025 0503 	bic.w	r5, r5, #3
 80044ec:	3508      	adds	r5, #8
 80044ee:	2d0c      	cmp	r5, #12
 80044f0:	bf38      	it	cc
 80044f2:	250c      	movcc	r5, #12
 80044f4:	2d00      	cmp	r5, #0
 80044f6:	4606      	mov	r6, r0
 80044f8:	db01      	blt.n	80044fe <_malloc_r+0x1a>
 80044fa:	42a9      	cmp	r1, r5
 80044fc:	d903      	bls.n	8004506 <_malloc_r+0x22>
 80044fe:	230c      	movs	r3, #12
 8004500:	6033      	str	r3, [r6, #0]
 8004502:	2000      	movs	r0, #0
 8004504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004506:	f000 f87d 	bl	8004604 <__malloc_lock>
 800450a:	4921      	ldr	r1, [pc, #132]	; (8004590 <_malloc_r+0xac>)
 800450c:	680a      	ldr	r2, [r1, #0]
 800450e:	4614      	mov	r4, r2
 8004510:	b99c      	cbnz	r4, 800453a <_malloc_r+0x56>
 8004512:	4f20      	ldr	r7, [pc, #128]	; (8004594 <_malloc_r+0xb0>)
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	b923      	cbnz	r3, 8004522 <_malloc_r+0x3e>
 8004518:	4621      	mov	r1, r4
 800451a:	4630      	mov	r0, r6
 800451c:	f000 f862 	bl	80045e4 <_sbrk_r>
 8004520:	6038      	str	r0, [r7, #0]
 8004522:	4629      	mov	r1, r5
 8004524:	4630      	mov	r0, r6
 8004526:	f000 f85d 	bl	80045e4 <_sbrk_r>
 800452a:	1c43      	adds	r3, r0, #1
 800452c:	d123      	bne.n	8004576 <_malloc_r+0x92>
 800452e:	230c      	movs	r3, #12
 8004530:	6033      	str	r3, [r6, #0]
 8004532:	4630      	mov	r0, r6
 8004534:	f000 f86c 	bl	8004610 <__malloc_unlock>
 8004538:	e7e3      	b.n	8004502 <_malloc_r+0x1e>
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	1b5b      	subs	r3, r3, r5
 800453e:	d417      	bmi.n	8004570 <_malloc_r+0x8c>
 8004540:	2b0b      	cmp	r3, #11
 8004542:	d903      	bls.n	800454c <_malloc_r+0x68>
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	441c      	add	r4, r3
 8004548:	6025      	str	r5, [r4, #0]
 800454a:	e004      	b.n	8004556 <_malloc_r+0x72>
 800454c:	6863      	ldr	r3, [r4, #4]
 800454e:	42a2      	cmp	r2, r4
 8004550:	bf0c      	ite	eq
 8004552:	600b      	streq	r3, [r1, #0]
 8004554:	6053      	strne	r3, [r2, #4]
 8004556:	4630      	mov	r0, r6
 8004558:	f000 f85a 	bl	8004610 <__malloc_unlock>
 800455c:	f104 000b 	add.w	r0, r4, #11
 8004560:	1d23      	adds	r3, r4, #4
 8004562:	f020 0007 	bic.w	r0, r0, #7
 8004566:	1ac2      	subs	r2, r0, r3
 8004568:	d0cc      	beq.n	8004504 <_malloc_r+0x20>
 800456a:	1a1b      	subs	r3, r3, r0
 800456c:	50a3      	str	r3, [r4, r2]
 800456e:	e7c9      	b.n	8004504 <_malloc_r+0x20>
 8004570:	4622      	mov	r2, r4
 8004572:	6864      	ldr	r4, [r4, #4]
 8004574:	e7cc      	b.n	8004510 <_malloc_r+0x2c>
 8004576:	1cc4      	adds	r4, r0, #3
 8004578:	f024 0403 	bic.w	r4, r4, #3
 800457c:	42a0      	cmp	r0, r4
 800457e:	d0e3      	beq.n	8004548 <_malloc_r+0x64>
 8004580:	1a21      	subs	r1, r4, r0
 8004582:	4630      	mov	r0, r6
 8004584:	f000 f82e 	bl	80045e4 <_sbrk_r>
 8004588:	3001      	adds	r0, #1
 800458a:	d1dd      	bne.n	8004548 <_malloc_r+0x64>
 800458c:	e7cf      	b.n	800452e <_malloc_r+0x4a>
 800458e:	bf00      	nop
 8004590:	20000098 	.word	0x20000098
 8004594:	2000009c 	.word	0x2000009c

08004598 <_realloc_r>:
 8004598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800459a:	4607      	mov	r7, r0
 800459c:	4614      	mov	r4, r2
 800459e:	460e      	mov	r6, r1
 80045a0:	b921      	cbnz	r1, 80045ac <_realloc_r+0x14>
 80045a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80045a6:	4611      	mov	r1, r2
 80045a8:	f7ff bf9c 	b.w	80044e4 <_malloc_r>
 80045ac:	b922      	cbnz	r2, 80045b8 <_realloc_r+0x20>
 80045ae:	f7ff ff49 	bl	8004444 <_free_r>
 80045b2:	4625      	mov	r5, r4
 80045b4:	4628      	mov	r0, r5
 80045b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045b8:	f000 f830 	bl	800461c <_malloc_usable_size_r>
 80045bc:	42a0      	cmp	r0, r4
 80045be:	d20f      	bcs.n	80045e0 <_realloc_r+0x48>
 80045c0:	4621      	mov	r1, r4
 80045c2:	4638      	mov	r0, r7
 80045c4:	f7ff ff8e 	bl	80044e4 <_malloc_r>
 80045c8:	4605      	mov	r5, r0
 80045ca:	2800      	cmp	r0, #0
 80045cc:	d0f2      	beq.n	80045b4 <_realloc_r+0x1c>
 80045ce:	4631      	mov	r1, r6
 80045d0:	4622      	mov	r2, r4
 80045d2:	f7ff ff0f 	bl	80043f4 <memcpy>
 80045d6:	4631      	mov	r1, r6
 80045d8:	4638      	mov	r0, r7
 80045da:	f7ff ff33 	bl	8004444 <_free_r>
 80045de:	e7e9      	b.n	80045b4 <_realloc_r+0x1c>
 80045e0:	4635      	mov	r5, r6
 80045e2:	e7e7      	b.n	80045b4 <_realloc_r+0x1c>

080045e4 <_sbrk_r>:
 80045e4:	b538      	push	{r3, r4, r5, lr}
 80045e6:	4d06      	ldr	r5, [pc, #24]	; (8004600 <_sbrk_r+0x1c>)
 80045e8:	2300      	movs	r3, #0
 80045ea:	4604      	mov	r4, r0
 80045ec:	4608      	mov	r0, r1
 80045ee:	602b      	str	r3, [r5, #0]
 80045f0:	f7fc ffda 	bl	80015a8 <_sbrk>
 80045f4:	1c43      	adds	r3, r0, #1
 80045f6:	d102      	bne.n	80045fe <_sbrk_r+0x1a>
 80045f8:	682b      	ldr	r3, [r5, #0]
 80045fa:	b103      	cbz	r3, 80045fe <_sbrk_r+0x1a>
 80045fc:	6023      	str	r3, [r4, #0]
 80045fe:	bd38      	pop	{r3, r4, r5, pc}
 8004600:	20008ea4 	.word	0x20008ea4

08004604 <__malloc_lock>:
 8004604:	4801      	ldr	r0, [pc, #4]	; (800460c <__malloc_lock+0x8>)
 8004606:	f000 b811 	b.w	800462c <__retarget_lock_acquire_recursive>
 800460a:	bf00      	nop
 800460c:	20008eac 	.word	0x20008eac

08004610 <__malloc_unlock>:
 8004610:	4801      	ldr	r0, [pc, #4]	; (8004618 <__malloc_unlock+0x8>)
 8004612:	f000 b80c 	b.w	800462e <__retarget_lock_release_recursive>
 8004616:	bf00      	nop
 8004618:	20008eac 	.word	0x20008eac

0800461c <_malloc_usable_size_r>:
 800461c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004620:	1f18      	subs	r0, r3, #4
 8004622:	2b00      	cmp	r3, #0
 8004624:	bfbc      	itt	lt
 8004626:	580b      	ldrlt	r3, [r1, r0]
 8004628:	18c0      	addlt	r0, r0, r3
 800462a:	4770      	bx	lr

0800462c <__retarget_lock_acquire_recursive>:
 800462c:	4770      	bx	lr

0800462e <__retarget_lock_release_recursive>:
 800462e:	4770      	bx	lr

08004630 <_init>:
 8004630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004632:	bf00      	nop
 8004634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004636:	bc08      	pop	{r3}
 8004638:	469e      	mov	lr, r3
 800463a:	4770      	bx	lr

0800463c <_fini>:
 800463c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800463e:	bf00      	nop
 8004640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004642:	bc08      	pop	{r3}
 8004644:	469e      	mov	lr, r3
 8004646:	4770      	bx	lr
