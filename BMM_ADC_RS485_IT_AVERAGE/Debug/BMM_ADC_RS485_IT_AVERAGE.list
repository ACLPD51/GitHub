
BMM_ADC_RS485_IT_AVERAGE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a0c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08006ba0  08006ba0  00016ba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c68  08006c68  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006c68  08006c68  00016c68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c70  08006c70  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c70  08006c70  00016c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c74  08006c74  00016c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006c78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00001164  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200011dc  200011dc  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fb18  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d4d  00000000  00000000  0002fbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce0  00000000  00000000  00031910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c38  00000000  00000000  000325f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002087a  00000000  00000000  00033228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ecd2  00000000  00000000  00053aa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd717  00000000  00000000  00062774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012fe8b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e74  00000000  00000000  0012fee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b84 	.word	0x08006b84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006b84 	.word	0x08006b84

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_uldivmod>:
 8000b98:	b953      	cbnz	r3, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9a:	b94a      	cbnz	r2, 8000bb0 <__aeabi_uldivmod+0x18>
 8000b9c:	2900      	cmp	r1, #0
 8000b9e:	bf08      	it	eq
 8000ba0:	2800      	cmpeq	r0, #0
 8000ba2:	bf1c      	itt	ne
 8000ba4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bac:	f000 b96e 	b.w	8000e8c <__aeabi_idiv0>
 8000bb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb8:	f000 f806 	bl	8000bc8 <__udivmoddi4>
 8000bbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc4:	b004      	add	sp, #16
 8000bc6:	4770      	bx	lr

08000bc8 <__udivmoddi4>:
 8000bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bcc:	9d08      	ldr	r5, [sp, #32]
 8000bce:	4604      	mov	r4, r0
 8000bd0:	468c      	mov	ip, r1
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	f040 8083 	bne.w	8000cde <__udivmoddi4+0x116>
 8000bd8:	428a      	cmp	r2, r1
 8000bda:	4617      	mov	r7, r2
 8000bdc:	d947      	bls.n	8000c6e <__udivmoddi4+0xa6>
 8000bde:	fab2 f282 	clz	r2, r2
 8000be2:	b142      	cbz	r2, 8000bf6 <__udivmoddi4+0x2e>
 8000be4:	f1c2 0020 	rsb	r0, r2, #32
 8000be8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bec:	4091      	lsls	r1, r2
 8000bee:	4097      	lsls	r7, r2
 8000bf0:	ea40 0c01 	orr.w	ip, r0, r1
 8000bf4:	4094      	lsls	r4, r2
 8000bf6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bfa:	0c23      	lsrs	r3, r4, #16
 8000bfc:	fbbc f6f8 	udiv	r6, ip, r8
 8000c00:	fa1f fe87 	uxth.w	lr, r7
 8000c04:	fb08 c116 	mls	r1, r8, r6, ip
 8000c08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c10:	4299      	cmp	r1, r3
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x60>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c1a:	f080 8119 	bcs.w	8000e50 <__udivmoddi4+0x288>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 8116 	bls.w	8000e50 <__udivmoddi4+0x288>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b2a4      	uxth	r4, r4
 8000c2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c30:	fb08 3310 	mls	r3, r8, r0, r3
 8000c34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c38:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c3c:	45a6      	cmp	lr, r4
 8000c3e:	d909      	bls.n	8000c54 <__udivmoddi4+0x8c>
 8000c40:	193c      	adds	r4, r7, r4
 8000c42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c46:	f080 8105 	bcs.w	8000e54 <__udivmoddi4+0x28c>
 8000c4a:	45a6      	cmp	lr, r4
 8000c4c:	f240 8102 	bls.w	8000e54 <__udivmoddi4+0x28c>
 8000c50:	3802      	subs	r0, #2
 8000c52:	443c      	add	r4, r7
 8000c54:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c58:	eba4 040e 	sub.w	r4, r4, lr
 8000c5c:	2600      	movs	r6, #0
 8000c5e:	b11d      	cbz	r5, 8000c68 <__udivmoddi4+0xa0>
 8000c60:	40d4      	lsrs	r4, r2
 8000c62:	2300      	movs	r3, #0
 8000c64:	e9c5 4300 	strd	r4, r3, [r5]
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	b902      	cbnz	r2, 8000c72 <__udivmoddi4+0xaa>
 8000c70:	deff      	udf	#255	; 0xff
 8000c72:	fab2 f282 	clz	r2, r2
 8000c76:	2a00      	cmp	r2, #0
 8000c78:	d150      	bne.n	8000d1c <__udivmoddi4+0x154>
 8000c7a:	1bcb      	subs	r3, r1, r7
 8000c7c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c80:	fa1f f887 	uxth.w	r8, r7
 8000c84:	2601      	movs	r6, #1
 8000c86:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c8a:	0c21      	lsrs	r1, r4, #16
 8000c8c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c94:	fb08 f30c 	mul.w	r3, r8, ip
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0xe4>
 8000c9c:	1879      	adds	r1, r7, r1
 8000c9e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0xe2>
 8000ca4:	428b      	cmp	r3, r1
 8000ca6:	f200 80e9 	bhi.w	8000e7c <__udivmoddi4+0x2b4>
 8000caa:	4684      	mov	ip, r0
 8000cac:	1ac9      	subs	r1, r1, r3
 8000cae:	b2a3      	uxth	r3, r4
 8000cb0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cb8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000cbc:	fb08 f800 	mul.w	r8, r8, r0
 8000cc0:	45a0      	cmp	r8, r4
 8000cc2:	d907      	bls.n	8000cd4 <__udivmoddi4+0x10c>
 8000cc4:	193c      	adds	r4, r7, r4
 8000cc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cca:	d202      	bcs.n	8000cd2 <__udivmoddi4+0x10a>
 8000ccc:	45a0      	cmp	r8, r4
 8000cce:	f200 80d9 	bhi.w	8000e84 <__udivmoddi4+0x2bc>
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	eba4 0408 	sub.w	r4, r4, r8
 8000cd8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cdc:	e7bf      	b.n	8000c5e <__udivmoddi4+0x96>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0x12e>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	f000 80b1 	beq.w	8000e4a <__udivmoddi4+0x282>
 8000ce8:	2600      	movs	r6, #0
 8000cea:	e9c5 0100 	strd	r0, r1, [r5]
 8000cee:	4630      	mov	r0, r6
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f683 	clz	r6, r3
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	d14a      	bne.n	8000d94 <__udivmoddi4+0x1cc>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0x140>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80b8 	bhi.w	8000e78 <__udivmoddi4+0x2b0>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	468c      	mov	ip, r1
 8000d12:	2d00      	cmp	r5, #0
 8000d14:	d0a8      	beq.n	8000c68 <__udivmoddi4+0xa0>
 8000d16:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d1a:	e7a5      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000d1c:	f1c2 0320 	rsb	r3, r2, #32
 8000d20:	fa20 f603 	lsr.w	r6, r0, r3
 8000d24:	4097      	lsls	r7, r2
 8000d26:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d2e:	40d9      	lsrs	r1, r3
 8000d30:	4330      	orrs	r0, r6
 8000d32:	0c03      	lsrs	r3, r0, #16
 8000d34:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d38:	fa1f f887 	uxth.w	r8, r7
 8000d3c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d44:	fb06 f108 	mul.w	r1, r6, r8
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x19c>
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d56:	f080 808d 	bcs.w	8000e74 <__udivmoddi4+0x2ac>
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	f240 808a 	bls.w	8000e74 <__udivmoddi4+0x2ac>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	443b      	add	r3, r7
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	b281      	uxth	r1, r0
 8000d68:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d6c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d70:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d74:	fb00 f308 	mul.w	r3, r0, r8
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d907      	bls.n	8000d8c <__udivmoddi4+0x1c4>
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d82:	d273      	bcs.n	8000e6c <__udivmoddi4+0x2a4>
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d971      	bls.n	8000e6c <__udivmoddi4+0x2a4>
 8000d88:	3802      	subs	r0, #2
 8000d8a:	4439      	add	r1, r7
 8000d8c:	1acb      	subs	r3, r1, r3
 8000d8e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d92:	e778      	b.n	8000c86 <__udivmoddi4+0xbe>
 8000d94:	f1c6 0c20 	rsb	ip, r6, #32
 8000d98:	fa03 f406 	lsl.w	r4, r3, r6
 8000d9c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000da0:	431c      	orrs	r4, r3
 8000da2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000da6:	fa01 f306 	lsl.w	r3, r1, r6
 8000daa:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dae:	fa21 f10c 	lsr.w	r1, r1, ip
 8000db2:	431f      	orrs	r7, r3
 8000db4:	0c3b      	lsrs	r3, r7, #16
 8000db6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dba:	fa1f f884 	uxth.w	r8, r4
 8000dbe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dc2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dc6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dca:	458a      	cmp	sl, r1
 8000dcc:	fa02 f206 	lsl.w	r2, r2, r6
 8000dd0:	fa00 f306 	lsl.w	r3, r0, r6
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x220>
 8000dd6:	1861      	adds	r1, r4, r1
 8000dd8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ddc:	d248      	bcs.n	8000e70 <__udivmoddi4+0x2a8>
 8000dde:	458a      	cmp	sl, r1
 8000de0:	d946      	bls.n	8000e70 <__udivmoddi4+0x2a8>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	4421      	add	r1, r4
 8000de8:	eba1 010a 	sub.w	r1, r1, sl
 8000dec:	b2bf      	uxth	r7, r7
 8000dee:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000dfa:	fb00 f808 	mul.w	r8, r0, r8
 8000dfe:	45b8      	cmp	r8, r7
 8000e00:	d907      	bls.n	8000e12 <__udivmoddi4+0x24a>
 8000e02:	19e7      	adds	r7, r4, r7
 8000e04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e08:	d22e      	bcs.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0a:	45b8      	cmp	r8, r7
 8000e0c:	d92c      	bls.n	8000e68 <__udivmoddi4+0x2a0>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4427      	add	r7, r4
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	eba7 0708 	sub.w	r7, r7, r8
 8000e1a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1e:	454f      	cmp	r7, r9
 8000e20:	46c6      	mov	lr, r8
 8000e22:	4649      	mov	r1, r9
 8000e24:	d31a      	bcc.n	8000e5c <__udivmoddi4+0x294>
 8000e26:	d017      	beq.n	8000e58 <__udivmoddi4+0x290>
 8000e28:	b15d      	cbz	r5, 8000e42 <__udivmoddi4+0x27a>
 8000e2a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e2e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e32:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e36:	40f2      	lsrs	r2, r6
 8000e38:	ea4c 0202 	orr.w	r2, ip, r2
 8000e3c:	40f7      	lsrs	r7, r6
 8000e3e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e42:	2600      	movs	r6, #0
 8000e44:	4631      	mov	r1, r6
 8000e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4a:	462e      	mov	r6, r5
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	e70b      	b.n	8000c68 <__udivmoddi4+0xa0>
 8000e50:	4606      	mov	r6, r0
 8000e52:	e6e9      	b.n	8000c28 <__udivmoddi4+0x60>
 8000e54:	4618      	mov	r0, r3
 8000e56:	e6fd      	b.n	8000c54 <__udivmoddi4+0x8c>
 8000e58:	4543      	cmp	r3, r8
 8000e5a:	d2e5      	bcs.n	8000e28 <__udivmoddi4+0x260>
 8000e5c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e60:	eb69 0104 	sbc.w	r1, r9, r4
 8000e64:	3801      	subs	r0, #1
 8000e66:	e7df      	b.n	8000e28 <__udivmoddi4+0x260>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	e7d2      	b.n	8000e12 <__udivmoddi4+0x24a>
 8000e6c:	4660      	mov	r0, ip
 8000e6e:	e78d      	b.n	8000d8c <__udivmoddi4+0x1c4>
 8000e70:	4681      	mov	r9, r0
 8000e72:	e7b9      	b.n	8000de8 <__udivmoddi4+0x220>
 8000e74:	4666      	mov	r6, ip
 8000e76:	e775      	b.n	8000d64 <__udivmoddi4+0x19c>
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e74a      	b.n	8000d12 <__udivmoddi4+0x14a>
 8000e7c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e80:	4439      	add	r1, r7
 8000e82:	e713      	b.n	8000cac <__udivmoddi4+0xe4>
 8000e84:	3802      	subs	r0, #2
 8000e86:	443c      	add	r4, r7
 8000e88:	e724      	b.n	8000cd4 <__udivmoddi4+0x10c>
 8000e8a:	bf00      	nop

08000e8c <__aeabi_idiv0>:
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <SelectCh4>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//*************************funtion creation to select de channels ADC*******************************************
void SelectCh4 (void){
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000e96:	463b      	mov	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_4;
 8000ea2:	2304      	movs	r3, #4
 8000ea4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000eaa:	2307      	movs	r3, #7
 8000eac:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4806      	ldr	r0, [pc, #24]	; (8000ecc <SelectCh4+0x3c>)
 8000eb4:	f002 f8fe 	bl	80030b4 <HAL_ADC_ConfigChannel>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SelectCh4+0x32>
	  {
	    Error_Handler();
 8000ebe:	f001 fcb1 	bl	8002824 <Error_Handler>
	  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20000560 	.word	0x20000560

08000ed0 <SelectCh5>:


void SelectCh5 (void){
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_5;
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000eea:	2307      	movs	r3, #7
 8000eec:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eee:	463b      	mov	r3, r7
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4806      	ldr	r0, [pc, #24]	; (8000f0c <SelectCh5+0x3c>)
 8000ef4:	f002 f8de 	bl	80030b4 <HAL_ADC_ConfigChannel>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <SelectCh5+0x32>
	  {
	    Error_Handler();
 8000efe:	f001 fc91 	bl	8002824 <Error_Handler>
	  }


}
 8000f02:	bf00      	nop
 8000f04:	3710      	adds	r7, #16
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000560 	.word	0x20000560

08000f10 <SelectCh6>:

void SelectCh6 (void){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f16:	463b      	mov	r3, r7
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]

	sConfig.Channel = ADC_CHANNEL_6;
 8000f22:	2306      	movs	r3, #6
 8000f24:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000f26:	2301      	movs	r3, #1
 8000f28:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f2a:	2307      	movs	r3, #7
 8000f2c:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f2e:	463b      	mov	r3, r7
 8000f30:	4619      	mov	r1, r3
 8000f32:	4806      	ldr	r0, [pc, #24]	; (8000f4c <SelectCh6+0x3c>)
 8000f34:	f002 f8be 	bl	80030b4 <HAL_ADC_ConfigChannel>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <SelectCh6+0x32>
	  {
	    Error_Handler();
 8000f3e:	f001 fc71 	bl	8002824 <Error_Handler>
	  }


}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000560 	.word	0x20000560

08000f50 <SelectCh7>:


void SelectCh7 (void){
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f56:	463b      	mov	r3, r7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_7;
 8000f62:	2307      	movs	r3, #7
 8000f64:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000f66:	2301      	movs	r3, #1
 8000f68:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000f6a:	2307      	movs	r3, #7
 8000f6c:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4619      	mov	r1, r3
 8000f72:	4806      	ldr	r0, [pc, #24]	; (8000f8c <SelectCh7+0x3c>)
 8000f74:	f002 f89e 	bl	80030b4 <HAL_ADC_ConfigChannel>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SelectCh7+0x32>
	  {
	    Error_Handler();
 8000f7e:	f001 fc51 	bl	8002824 <Error_Handler>
	  }

}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000560 	.word	0x20000560

08000f90 <SelectCh8>:

void SelectCh8 (void){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000f96:	463b      	mov	r3, r7
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_8;
 8000fa2:	2308      	movs	r3, #8
 8000fa4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000faa:	2307      	movs	r3, #7
 8000fac:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fae:	463b      	mov	r3, r7
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4806      	ldr	r0, [pc, #24]	; (8000fcc <SelectCh8+0x3c>)
 8000fb4:	f002 f87e 	bl	80030b4 <HAL_ADC_ConfigChannel>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SelectCh8+0x32>
	  {
	    Error_Handler();
 8000fbe:	f001 fc31 	bl	8002824 <Error_Handler>
	  }

}
 8000fc2:	bf00      	nop
 8000fc4:	3710      	adds	r7, #16
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000560 	.word	0x20000560

08000fd0 <SelectCh9>:
void SelectCh9 (void){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	609a      	str	r2, [r3, #8]
 8000fe0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_9;
 8000fe2:	2309      	movs	r3, #9
 8000fe4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000fea:	2307      	movs	r3, #7
 8000fec:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fee:	463b      	mov	r3, r7
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4806      	ldr	r0, [pc, #24]	; (800100c <SelectCh9+0x3c>)
 8000ff4:	f002 f85e 	bl	80030b4 <HAL_ADC_ConfigChannel>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SelectCh9+0x32>
	  {
	    Error_Handler();
 8000ffe:	f001 fc11 	bl	8002824 <Error_Handler>
	  }

}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000560 	.word	0x20000560

08001010 <SelectCh12>:

void SelectCh12 (void){
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001016:	463b      	mov	r3, r7
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_12;
 8001022:	230c      	movs	r3, #12
 8001024:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001026:	2301      	movs	r3, #1
 8001028:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800102a:	2307      	movs	r3, #7
 800102c:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800102e:	463b      	mov	r3, r7
 8001030:	4619      	mov	r1, r3
 8001032:	4806      	ldr	r0, [pc, #24]	; (800104c <SelectCh12+0x3c>)
 8001034:	f002 f83e 	bl	80030b4 <HAL_ADC_ConfigChannel>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <SelectCh12+0x32>
	  {
	    Error_Handler();
 800103e:	f001 fbf1 	bl	8002824 <Error_Handler>
	  }

}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000560 	.word	0x20000560

08001050 <SelectCh14>:

void SelectCh14 (void){
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001056:	463b      	mov	r3, r7
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_14;
 8001062:	230e      	movs	r3, #14
 8001064:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 8001066:	2301      	movs	r3, #1
 8001068:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800106a:	2307      	movs	r3, #7
 800106c:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800106e:	463b      	mov	r3, r7
 8001070:	4619      	mov	r1, r3
 8001072:	4806      	ldr	r0, [pc, #24]	; (800108c <SelectCh14+0x3c>)
 8001074:	f002 f81e 	bl	80030b4 <HAL_ADC_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SelectCh14+0x32>
	  {
	    Error_Handler();
 800107e:	f001 fbd1 	bl	8002824 <Error_Handler>
	  }

}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000560 	.word	0x20000560

08001090 <SelectCh15>:


void SelectCh15 (void){
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8001096:	463b      	mov	r3, r7
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
	sConfig.Channel = ADC_CHANNEL_15;
 80010a2:	230f      	movs	r3, #15
 80010a4:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80010aa:	2307      	movs	r3, #7
 80010ac:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4619      	mov	r1, r3
 80010b2:	4806      	ldr	r0, [pc, #24]	; (80010cc <SelectCh15+0x3c>)
 80010b4:	f001 fffe 	bl	80030b4 <HAL_ADC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SelectCh15+0x32>
	  {
	    Error_Handler();
 80010be:	f001 fbb1 	bl	8002824 <Error_Handler>
	  }

}
 80010c2:	bf00      	nop
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000560 	.word	0x20000560

080010d0 <UART_BMM_INIT>:
//******************************************GPIO INITIALIZATION BEFORE START LOOP.............
void UART_BMM_INIT (void){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0

	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80010d4:	2201      	movs	r2, #1
 80010d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010da:	480e      	ldr	r0, [pc, #56]	; (8001114 <UART_BMM_INIT+0x44>)
 80010dc:	f002 fcb6 	bl	8003a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010e6:	480c      	ldr	r0, [pc, #48]	; (8001118 <UART_BMM_INIT+0x48>)
 80010e8:	f002 fcb0 	bl	8003a4c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80010ec:	2200      	movs	r2, #0
 80010ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010f2:	4809      	ldr	r0, [pc, #36]	; (8001118 <UART_BMM_INIT+0x48>)
 80010f4:	f002 fcaa 	bl	8003a4c <HAL_GPIO_WritePin>



	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, GPIO_PIN_SET);
 80010f8:	2201      	movs	r2, #1
 80010fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010fe:	4806      	ldr	r0, [pc, #24]	; (8001118 <UART_BMM_INIT+0x48>)
 8001100:	f002 fca4 	bl	8003a4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	f44f 7100 	mov.w	r1, #512	; 0x200
 800110a:	4803      	ldr	r0, [pc, #12]	; (8001118 <UART_BMM_INIT+0x48>)
 800110c:	f002 fc9e 	bl	8003a4c <HAL_GPIO_WritePin>
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40020000 	.word	0x40020000
 8001118:	40021000 	.word	0x40021000
 800111c:	00000000 	.word	0x00000000

08001120 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b098      	sub	sp, #96	; 0x60
 8001124:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001126:	f001 fd71 	bl	8002c0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800112a:	f000 fff5 	bl	8002118 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800112e:	f001 f9bf 	bl	80024b0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001132:	f001 f85b 	bl	80021ec <MX_ADC1_Init>
  MX_TIM2_Init();
 8001136:	f001 f91b 	bl	8002370 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800113a:	f001 f965 	bl	8002408 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800113e:	f001 f98d 	bl	800245c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  UART_BMM_INIT();	//inicializamos pins para rs485
 8001142:	f7ff ffc5 	bl	80010d0 <UART_BMM_INIT>

  HAL_TIM_Base_Start_IT(&htim2); // iniciamos timer2
 8001146:	48a4      	ldr	r0, [pc, #656]	; (80013d8 <main+0x2b8>)
 8001148:	f003 f95c 	bl	8004404 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if (FLAG_ADC == 1) {
 800114c:	4ba3      	ldr	r3, [pc, #652]	; (80013dc <main+0x2bc>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d1fb      	bne.n	800114c <main+0x2c>
			FLAG_ADC=0;
 8001154:	4ba1      	ldr	r3, [pc, #644]	; (80013dc <main+0x2bc>)
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]

			//calculate the average of each channel


			for(int j=0;j<=99;j++){
 800115a:	2300      	movs	r3, #0
 800115c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800115e:	e013      	b.n	8001188 <main+0x68>
							AVG1=AVG1+ADC_VAL[j];
 8001160:	4a9f      	ldr	r2, [pc, #636]	; (80013e0 <main+0x2c0>)
 8001162:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff f9d3 	bl	8000514 <__aeabi_i2d>
 800116e:	4b9d      	ldr	r3, [pc, #628]	; (80013e4 <main+0x2c4>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	f7ff f882 	bl	800027c <__adddf3>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4999      	ldr	r1, [pc, #612]	; (80013e4 <main+0x2c4>)
 800117e:	e9c1 2300 	strd	r2, r3, [r1]
			for(int j=0;j<=99;j++){
 8001182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001184:	3301      	adds	r3, #1
 8001186:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800118a:	2b63      	cmp	r3, #99	; 0x63
 800118c:	dde8      	ble.n	8001160 <main+0x40>


						}
			AVG1=AVG1/100;
 800118e:	4b95      	ldr	r3, [pc, #596]	; (80013e4 <main+0x2c4>)
 8001190:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	4b93      	ldr	r3, [pc, #588]	; (80013e8 <main+0x2c8>)
 800119a:	f7ff fb4f 	bl	800083c <__aeabi_ddiv>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4990      	ldr	r1, [pc, #576]	; (80013e4 <main+0x2c4>)
 80011a4:	e9c1 2300 	strd	r2, r3, [r1]
			//avegare calculated
			//caculate de standard deviation


			for(int j=0;j<=99;j++){
 80011a8:	2300      	movs	r3, #0
 80011aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80011ac:	e03f      	b.n	800122e <main+0x10e>
			  SD1+=pow(ADC_VAL[j]-AVG1,2);
 80011ae:	4a8c      	ldr	r2, [pc, #560]	; (80013e0 <main+0x2c0>)
 80011b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80011b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff f9ac 	bl	8000514 <__aeabi_i2d>
 80011bc:	4b89      	ldr	r3, [pc, #548]	; (80013e4 <main+0x2c4>)
 80011be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c2:	f7ff f859 	bl	8000278 <__aeabi_dsub>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	ec43 2b17 	vmov	d7, r2, r3
 80011ce:	ed9f 1b80 	vldr	d1, [pc, #512]	; 80013d0 <main+0x2b0>
 80011d2:	eeb0 0a47 	vmov.f32	s0, s14
 80011d6:	eef0 0a67 	vmov.f32	s1, s15
 80011da:	f004 fce9 	bl	8005bb0 <pow>
 80011de:	ec51 0b10 	vmov	r0, r1, d0
 80011e2:	4b82      	ldr	r3, [pc, #520]	; (80013ec <main+0x2cc>)
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	f7ff f848 	bl	800027c <__adddf3>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	497e      	ldr	r1, [pc, #504]	; (80013ec <main+0x2cc>)
 80011f2:	e9c1 2300 	strd	r2, r3, [r1]
			  SD1=sqrt(SD1/100);
 80011f6:	4b7d      	ldr	r3, [pc, #500]	; (80013ec <main+0x2cc>)
 80011f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011fc:	f04f 0200 	mov.w	r2, #0
 8001200:	4b79      	ldr	r3, [pc, #484]	; (80013e8 <main+0x2c8>)
 8001202:	f7ff fb1b 	bl	800083c <__aeabi_ddiv>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	ec43 2b17 	vmov	d7, r2, r3
 800120e:	eeb0 0a47 	vmov.f32	s0, s14
 8001212:	eef0 0a67 	vmov.f32	s1, s15
 8001216:	f004 fd79 	bl	8005d0c <sqrt>
 800121a:	eeb0 7a40 	vmov.f32	s14, s0
 800121e:	eef0 7a60 	vmov.f32	s15, s1
 8001222:	4b72      	ldr	r3, [pc, #456]	; (80013ec <main+0x2cc>)
 8001224:	ed83 7b00 	vstr	d7, [r3]
			for(int j=0;j<=99;j++){
 8001228:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800122a:	3301      	adds	r3, #1
 800122c:	65bb      	str	r3, [r7, #88]	; 0x58
 800122e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001230:	2b63      	cmp	r3, #99	; 0x63
 8001232:	ddbc      	ble.n	80011ae <main+0x8e>
			 }


			AVG_INT1=AVG1;
 8001234:	4b6b      	ldr	r3, [pc, #428]	; (80013e4 <main+0x2c4>)
 8001236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123a:	4610      	mov	r0, r2
 800123c:	4619      	mov	r1, r3
 800123e:	f7ff fc83 	bl	8000b48 <__aeabi_d2iz>
 8001242:	4603      	mov	r3, r0
 8001244:	4a6a      	ldr	r2, [pc, #424]	; (80013f0 <main+0x2d0>)
 8001246:	6013      	str	r3, [r2, #0]
			SD1_INT=SD1*1000;
 8001248:	4b68      	ldr	r3, [pc, #416]	; (80013ec <main+0x2cc>)
 800124a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	4b68      	ldr	r3, [pc, #416]	; (80013f4 <main+0x2d4>)
 8001254:	f7ff f9c8 	bl	80005e8 <__aeabi_dmul>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fc72 	bl	8000b48 <__aeabi_d2iz>
 8001264:	4603      	mov	r3, r0
 8001266:	4a64      	ldr	r2, [pc, #400]	; (80013f8 <main+0x2d8>)
 8001268:	6013      	str	r3, [r2, #0]
			for(int j=0;j<=99;j++){
 800126a:	2300      	movs	r3, #0
 800126c:	657b      	str	r3, [r7, #84]	; 0x54
 800126e:	e013      	b.n	8001298 <main+0x178>
							AVG2=AVG2+ADC_VAL2[j];
 8001270:	4a62      	ldr	r2, [pc, #392]	; (80013fc <main+0x2dc>)
 8001272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff f94b 	bl	8000514 <__aeabi_i2d>
 800127e:	4b60      	ldr	r3, [pc, #384]	; (8001400 <main+0x2e0>)
 8001280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001284:	f7fe fffa 	bl	800027c <__adddf3>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	495c      	ldr	r1, [pc, #368]	; (8001400 <main+0x2e0>)
 800128e:	e9c1 2300 	strd	r2, r3, [r1]
			for(int j=0;j<=99;j++){
 8001292:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001294:	3301      	adds	r3, #1
 8001296:	657b      	str	r3, [r7, #84]	; 0x54
 8001298:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800129a:	2b63      	cmp	r3, #99	; 0x63
 800129c:	dde8      	ble.n	8001270 <main+0x150>

						}
			AVG2=AVG2/100;
 800129e:	4b58      	ldr	r3, [pc, #352]	; (8001400 <main+0x2e0>)
 80012a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012a4:	f04f 0200 	mov.w	r2, #0
 80012a8:	4b4f      	ldr	r3, [pc, #316]	; (80013e8 <main+0x2c8>)
 80012aa:	f7ff fac7 	bl	800083c <__aeabi_ddiv>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4953      	ldr	r1, [pc, #332]	; (8001400 <main+0x2e0>)
 80012b4:	e9c1 2300 	strd	r2, r3, [r1]
			//avegare calculated
						//caculate de standard deviation


						for(int j=0;j<=99;j++){
 80012b8:	2300      	movs	r3, #0
 80012ba:	653b      	str	r3, [r7, #80]	; 0x50
 80012bc:	e03f      	b.n	800133e <main+0x21e>
						  SD2+=pow(ADC_VAL2[j]-AVG2,2);
 80012be:	4a4f      	ldr	r2, [pc, #316]	; (80013fc <main+0x2dc>)
 80012c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f924 	bl	8000514 <__aeabi_i2d>
 80012cc:	4b4c      	ldr	r3, [pc, #304]	; (8001400 <main+0x2e0>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	f7fe ffd1 	bl	8000278 <__aeabi_dsub>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	ec43 2b17 	vmov	d7, r2, r3
 80012de:	ed9f 1b3c 	vldr	d1, [pc, #240]	; 80013d0 <main+0x2b0>
 80012e2:	eeb0 0a47 	vmov.f32	s0, s14
 80012e6:	eef0 0a67 	vmov.f32	s1, s15
 80012ea:	f004 fc61 	bl	8005bb0 <pow>
 80012ee:	ec51 0b10 	vmov	r0, r1, d0
 80012f2:	4b44      	ldr	r3, [pc, #272]	; (8001404 <main+0x2e4>)
 80012f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f8:	f7fe ffc0 	bl	800027c <__adddf3>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4940      	ldr	r1, [pc, #256]	; (8001404 <main+0x2e4>)
 8001302:	e9c1 2300 	strd	r2, r3, [r1]
						  SD2=sqrt(SD2/100);
 8001306:	4b3f      	ldr	r3, [pc, #252]	; (8001404 <main+0x2e4>)
 8001308:	e9d3 0100 	ldrd	r0, r1, [r3]
 800130c:	f04f 0200 	mov.w	r2, #0
 8001310:	4b35      	ldr	r3, [pc, #212]	; (80013e8 <main+0x2c8>)
 8001312:	f7ff fa93 	bl	800083c <__aeabi_ddiv>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	ec43 2b17 	vmov	d7, r2, r3
 800131e:	eeb0 0a47 	vmov.f32	s0, s14
 8001322:	eef0 0a67 	vmov.f32	s1, s15
 8001326:	f004 fcf1 	bl	8005d0c <sqrt>
 800132a:	eeb0 7a40 	vmov.f32	s14, s0
 800132e:	eef0 7a60 	vmov.f32	s15, s1
 8001332:	4b34      	ldr	r3, [pc, #208]	; (8001404 <main+0x2e4>)
 8001334:	ed83 7b00 	vstr	d7, [r3]
						for(int j=0;j<=99;j++){
 8001338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800133a:	3301      	adds	r3, #1
 800133c:	653b      	str	r3, [r7, #80]	; 0x50
 800133e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001340:	2b63      	cmp	r3, #99	; 0x63
 8001342:	ddbc      	ble.n	80012be <main+0x19e>
						 }


						AVG_INT2=AVG2;
 8001344:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <main+0x2e0>)
 8001346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134a:	4610      	mov	r0, r2
 800134c:	4619      	mov	r1, r3
 800134e:	f7ff fbfb 	bl	8000b48 <__aeabi_d2iz>
 8001352:	4603      	mov	r3, r0
 8001354:	4a2c      	ldr	r2, [pc, #176]	; (8001408 <main+0x2e8>)
 8001356:	6013      	str	r3, [r2, #0]
						SD2_INT=SD2*1000;
 8001358:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <main+0x2e4>)
 800135a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	4b24      	ldr	r3, [pc, #144]	; (80013f4 <main+0x2d4>)
 8001364:	f7ff f940 	bl	80005e8 <__aeabi_dmul>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fbea 	bl	8000b48 <__aeabi_d2iz>
 8001374:	4603      	mov	r3, r0
 8001376:	4a25      	ldr	r2, [pc, #148]	; (800140c <main+0x2ec>)
 8001378:	6013      	str	r3, [r2, #0]

			for(int j=0;j<=99;j++){
 800137a:	2300      	movs	r3, #0
 800137c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800137e:	e013      	b.n	80013a8 <main+0x288>
							AVG3=AVG3+ADC_VAL3[j];
 8001380:	4a23      	ldr	r2, [pc, #140]	; (8001410 <main+0x2f0>)
 8001382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f8c3 	bl	8000514 <__aeabi_i2d>
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <main+0x2f4>)
 8001390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001394:	f7fe ff72 	bl	800027c <__adddf3>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	491d      	ldr	r1, [pc, #116]	; (8001414 <main+0x2f4>)
 800139e:	e9c1 2300 	strd	r2, r3, [r1]
			for(int j=0;j<=99;j++){
 80013a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013a4:	3301      	adds	r3, #1
 80013a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013aa:	2b63      	cmp	r3, #99	; 0x63
 80013ac:	dde8      	ble.n	8001380 <main+0x260>

						}
			AVG3=AVG3/100;
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <main+0x2f4>)
 80013b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <main+0x2c8>)
 80013ba:	f7ff fa3f 	bl	800083c <__aeabi_ddiv>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	4914      	ldr	r1, [pc, #80]	; (8001414 <main+0x2f4>)
 80013c4:	e9c1 2300 	strd	r2, r3, [r1]
			//avegare calculated
						//caculate de standard deviation


						for(int j=0;j<=99;j++){
 80013c8:	2300      	movs	r3, #0
 80013ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80013cc:	e064      	b.n	8001498 <main+0x378>
 80013ce:	bf00      	nop
 80013d0:	00000000 	.word	0x00000000
 80013d4:	40000000 	.word	0x40000000
 80013d8:	20000adc 	.word	0x20000adc
 80013dc:	20000094 	.word	0x20000094
 80013e0:	2000090c 	.word	0x2000090c
 80013e4:	20000098 	.word	0x20000098
 80013e8:	40590000 	.word	0x40590000
 80013ec:	200000e0 	.word	0x200000e0
 80013f0:	2000014c 	.word	0x2000014c
 80013f4:	408f4000 	.word	0x408f4000
 80013f8:	20000128 	.word	0x20000128
 80013fc:	20000b24 	.word	0x20000b24
 8001400:	200000a0 	.word	0x200000a0
 8001404:	200000e8 	.word	0x200000e8
 8001408:	20000150 	.word	0x20000150
 800140c:	2000012c 	.word	0x2000012c
 8001410:	200005a8 	.word	0x200005a8
 8001414:	200000a8 	.word	0x200000a8
						  SD3+=pow(ADC_VAL3[j]-AVG3,2);
 8001418:	4a89      	ldr	r2, [pc, #548]	; (8001640 <main+0x520>)
 800141a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800141c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f877 	bl	8000514 <__aeabi_i2d>
 8001426:	4b87      	ldr	r3, [pc, #540]	; (8001644 <main+0x524>)
 8001428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142c:	f7fe ff24 	bl	8000278 <__aeabi_dsub>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	ec43 2b17 	vmov	d7, r2, r3
 8001438:	ed9f 1b7f 	vldr	d1, [pc, #508]	; 8001638 <main+0x518>
 800143c:	eeb0 0a47 	vmov.f32	s0, s14
 8001440:	eef0 0a67 	vmov.f32	s1, s15
 8001444:	f004 fbb4 	bl	8005bb0 <pow>
 8001448:	ec51 0b10 	vmov	r0, r1, d0
 800144c:	4b7e      	ldr	r3, [pc, #504]	; (8001648 <main+0x528>)
 800144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001452:	f7fe ff13 	bl	800027c <__adddf3>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	497b      	ldr	r1, [pc, #492]	; (8001648 <main+0x528>)
 800145c:	e9c1 2300 	strd	r2, r3, [r1]
						  SD3=sqrt(SD3/100);
 8001460:	4b79      	ldr	r3, [pc, #484]	; (8001648 <main+0x528>)
 8001462:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	4b78      	ldr	r3, [pc, #480]	; (800164c <main+0x52c>)
 800146c:	f7ff f9e6 	bl	800083c <__aeabi_ddiv>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	ec43 2b17 	vmov	d7, r2, r3
 8001478:	eeb0 0a47 	vmov.f32	s0, s14
 800147c:	eef0 0a67 	vmov.f32	s1, s15
 8001480:	f004 fc44 	bl	8005d0c <sqrt>
 8001484:	eeb0 7a40 	vmov.f32	s14, s0
 8001488:	eef0 7a60 	vmov.f32	s15, s1
 800148c:	4b6e      	ldr	r3, [pc, #440]	; (8001648 <main+0x528>)
 800148e:	ed83 7b00 	vstr	d7, [r3]
						for(int j=0;j<=99;j++){
 8001492:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001494:	3301      	adds	r3, #1
 8001496:	64bb      	str	r3, [r7, #72]	; 0x48
 8001498:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800149a:	2b63      	cmp	r3, #99	; 0x63
 800149c:	ddbc      	ble.n	8001418 <main+0x2f8>
						 }


						AVG_INT3=AVG3;
 800149e:	4b69      	ldr	r3, [pc, #420]	; (8001644 <main+0x524>)
 80014a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f7ff fb4e 	bl	8000b48 <__aeabi_d2iz>
 80014ac:	4603      	mov	r3, r0
 80014ae:	4a68      	ldr	r2, [pc, #416]	; (8001650 <main+0x530>)
 80014b0:	6013      	str	r3, [r2, #0]
						SD3_INT=SD3*1000;
 80014b2:	4b65      	ldr	r3, [pc, #404]	; (8001648 <main+0x528>)
 80014b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014b8:	f04f 0200 	mov.w	r2, #0
 80014bc:	4b65      	ldr	r3, [pc, #404]	; (8001654 <main+0x534>)
 80014be:	f7ff f893 	bl	80005e8 <__aeabi_dmul>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f7ff fb3d 	bl	8000b48 <__aeabi_d2iz>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a61      	ldr	r2, [pc, #388]	; (8001658 <main+0x538>)
 80014d2:	6013      	str	r3, [r2, #0]

			for(int j=0;j<=99;j++){
 80014d4:	2300      	movs	r3, #0
 80014d6:	647b      	str	r3, [r7, #68]	; 0x44
 80014d8:	e013      	b.n	8001502 <main+0x3e2>
							AVG4=AVG4+ADC_VAL4[j];
 80014da:	4a60      	ldr	r2, [pc, #384]	; (800165c <main+0x53c>)
 80014dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff f816 	bl	8000514 <__aeabi_i2d>
 80014e8:	4b5d      	ldr	r3, [pc, #372]	; (8001660 <main+0x540>)
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	f7fe fec5 	bl	800027c <__adddf3>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	495a      	ldr	r1, [pc, #360]	; (8001660 <main+0x540>)
 80014f8:	e9c1 2300 	strd	r2, r3, [r1]
			for(int j=0;j<=99;j++){
 80014fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014fe:	3301      	adds	r3, #1
 8001500:	647b      	str	r3, [r7, #68]	; 0x44
 8001502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001504:	2b63      	cmp	r3, #99	; 0x63
 8001506:	dde8      	ble.n	80014da <main+0x3ba>

						}
			AVG4=AVG4/100;
 8001508:	4b55      	ldr	r3, [pc, #340]	; (8001660 <main+0x540>)
 800150a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800150e:	f04f 0200 	mov.w	r2, #0
 8001512:	4b4e      	ldr	r3, [pc, #312]	; (800164c <main+0x52c>)
 8001514:	f7ff f992 	bl	800083c <__aeabi_ddiv>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4950      	ldr	r1, [pc, #320]	; (8001660 <main+0x540>)
 800151e:	e9c1 2300 	strd	r2, r3, [r1]
			//avegare calculated
						//caculate de standard deviation


						for(int j=0;j<=99;j++){
 8001522:	2300      	movs	r3, #0
 8001524:	643b      	str	r3, [r7, #64]	; 0x40
 8001526:	e03f      	b.n	80015a8 <main+0x488>
						  SD4+=pow(ADC_VAL4[j]-AVG4,2);
 8001528:	4a4c      	ldr	r2, [pc, #304]	; (800165c <main+0x53c>)
 800152a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800152c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001530:	4618      	mov	r0, r3
 8001532:	f7fe ffef 	bl	8000514 <__aeabi_i2d>
 8001536:	4b4a      	ldr	r3, [pc, #296]	; (8001660 <main+0x540>)
 8001538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153c:	f7fe fe9c 	bl	8000278 <__aeabi_dsub>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	ec43 2b17 	vmov	d7, r2, r3
 8001548:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 8001638 <main+0x518>
 800154c:	eeb0 0a47 	vmov.f32	s0, s14
 8001550:	eef0 0a67 	vmov.f32	s1, s15
 8001554:	f004 fb2c 	bl	8005bb0 <pow>
 8001558:	ec51 0b10 	vmov	r0, r1, d0
 800155c:	4b41      	ldr	r3, [pc, #260]	; (8001664 <main+0x544>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	f7fe fe8b 	bl	800027c <__adddf3>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	493e      	ldr	r1, [pc, #248]	; (8001664 <main+0x544>)
 800156c:	e9c1 2300 	strd	r2, r3, [r1]
						  SD4=sqrt(SD4/100);
 8001570:	4b3c      	ldr	r3, [pc, #240]	; (8001664 <main+0x544>)
 8001572:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001576:	f04f 0200 	mov.w	r2, #0
 800157a:	4b34      	ldr	r3, [pc, #208]	; (800164c <main+0x52c>)
 800157c:	f7ff f95e 	bl	800083c <__aeabi_ddiv>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	ec43 2b17 	vmov	d7, r2, r3
 8001588:	eeb0 0a47 	vmov.f32	s0, s14
 800158c:	eef0 0a67 	vmov.f32	s1, s15
 8001590:	f004 fbbc 	bl	8005d0c <sqrt>
 8001594:	eeb0 7a40 	vmov.f32	s14, s0
 8001598:	eef0 7a60 	vmov.f32	s15, s1
 800159c:	4b31      	ldr	r3, [pc, #196]	; (8001664 <main+0x544>)
 800159e:	ed83 7b00 	vstr	d7, [r3]
						for(int j=0;j<=99;j++){
 80015a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015a4:	3301      	adds	r3, #1
 80015a6:	643b      	str	r3, [r7, #64]	; 0x40
 80015a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015aa:	2b63      	cmp	r3, #99	; 0x63
 80015ac:	ddbc      	ble.n	8001528 <main+0x408>
						 }


						AVG_INT4=AVG4;
 80015ae:	4b2c      	ldr	r3, [pc, #176]	; (8001660 <main+0x540>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f7ff fac6 	bl	8000b48 <__aeabi_d2iz>
 80015bc:	4603      	mov	r3, r0
 80015be:	4a2a      	ldr	r2, [pc, #168]	; (8001668 <main+0x548>)
 80015c0:	6013      	str	r3, [r2, #0]
						SD4_INT=SD4*1000;
 80015c2:	4b28      	ldr	r3, [pc, #160]	; (8001664 <main+0x544>)
 80015c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015c8:	f04f 0200 	mov.w	r2, #0
 80015cc:	4b21      	ldr	r3, [pc, #132]	; (8001654 <main+0x534>)
 80015ce:	f7ff f80b 	bl	80005e8 <__aeabi_dmul>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f7ff fab5 	bl	8000b48 <__aeabi_d2iz>
 80015de:	4603      	mov	r3, r0
 80015e0:	4a22      	ldr	r2, [pc, #136]	; (800166c <main+0x54c>)
 80015e2:	6013      	str	r3, [r2, #0]
			for(int j=0;j<=99;j++){
 80015e4:	2300      	movs	r3, #0
 80015e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80015e8:	e013      	b.n	8001612 <main+0x4f2>
							AVG5=AVG5+ADC_VAL5[j];
 80015ea:	4a21      	ldr	r2, [pc, #132]	; (8001670 <main+0x550>)
 80015ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe ff8e 	bl	8000514 <__aeabi_i2d>
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <main+0x554>)
 80015fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fe:	f7fe fe3d 	bl	800027c <__adddf3>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	491b      	ldr	r1, [pc, #108]	; (8001674 <main+0x554>)
 8001608:	e9c1 2300 	strd	r2, r3, [r1]
			for(int j=0;j<=99;j++){
 800160c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800160e:	3301      	adds	r3, #1
 8001610:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001614:	2b63      	cmp	r3, #99	; 0x63
 8001616:	dde8      	ble.n	80015ea <main+0x4ca>

						}
			AVG5=AVG5/100;
 8001618:	4b16      	ldr	r3, [pc, #88]	; (8001674 <main+0x554>)
 800161a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800161e:	f04f 0200 	mov.w	r2, #0
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <main+0x52c>)
 8001624:	f7ff f90a 	bl	800083c <__aeabi_ddiv>
 8001628:	4602      	mov	r2, r0
 800162a:	460b      	mov	r3, r1
 800162c:	4911      	ldr	r1, [pc, #68]	; (8001674 <main+0x554>)
 800162e:	e9c1 2300 	strd	r2, r3, [r1]
			//avegare calculated
						//caculate de standard deviation


						for(int j=0;j<=99;j++){
 8001632:	2300      	movs	r3, #0
 8001634:	63bb      	str	r3, [r7, #56]	; 0x38
 8001636:	e05f      	b.n	80016f8 <main+0x5d8>
 8001638:	00000000 	.word	0x00000000
 800163c:	40000000 	.word	0x40000000
 8001640:	200005a8 	.word	0x200005a8
 8001644:	200000a8 	.word	0x200000a8
 8001648:	200000f0 	.word	0x200000f0
 800164c:	40590000 	.word	0x40590000
 8001650:	20000154 	.word	0x20000154
 8001654:	408f4000 	.word	0x408f4000
 8001658:	20000130 	.word	0x20000130
 800165c:	20001038 	.word	0x20001038
 8001660:	200000b0 	.word	0x200000b0
 8001664:	200000f8 	.word	0x200000f8
 8001668:	20000158 	.word	0x20000158
 800166c:	20000134 	.word	0x20000134
 8001670:	2000077c 	.word	0x2000077c
 8001674:	200000b8 	.word	0x200000b8
						  SD5+=pow(ADC_VAL5[j]-AVG5,2);
 8001678:	4a89      	ldr	r2, [pc, #548]	; (80018a0 <main+0x780>)
 800167a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800167c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ff47 	bl	8000514 <__aeabi_i2d>
 8001686:	4b87      	ldr	r3, [pc, #540]	; (80018a4 <main+0x784>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe fdf4 	bl	8000278 <__aeabi_dsub>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	ec43 2b17 	vmov	d7, r2, r3
 8001698:	ed9f 1b7f 	vldr	d1, [pc, #508]	; 8001898 <main+0x778>
 800169c:	eeb0 0a47 	vmov.f32	s0, s14
 80016a0:	eef0 0a67 	vmov.f32	s1, s15
 80016a4:	f004 fa84 	bl	8005bb0 <pow>
 80016a8:	ec51 0b10 	vmov	r0, r1, d0
 80016ac:	4b7e      	ldr	r3, [pc, #504]	; (80018a8 <main+0x788>)
 80016ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b2:	f7fe fde3 	bl	800027c <__adddf3>
 80016b6:	4602      	mov	r2, r0
 80016b8:	460b      	mov	r3, r1
 80016ba:	497b      	ldr	r1, [pc, #492]	; (80018a8 <main+0x788>)
 80016bc:	e9c1 2300 	strd	r2, r3, [r1]
						  SD5=sqrt(SD5/100);
 80016c0:	4b79      	ldr	r3, [pc, #484]	; (80018a8 <main+0x788>)
 80016c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	4b78      	ldr	r3, [pc, #480]	; (80018ac <main+0x78c>)
 80016cc:	f7ff f8b6 	bl	800083c <__aeabi_ddiv>
 80016d0:	4602      	mov	r2, r0
 80016d2:	460b      	mov	r3, r1
 80016d4:	ec43 2b17 	vmov	d7, r2, r3
 80016d8:	eeb0 0a47 	vmov.f32	s0, s14
 80016dc:	eef0 0a67 	vmov.f32	s1, s15
 80016e0:	f004 fb14 	bl	8005d0c <sqrt>
 80016e4:	eeb0 7a40 	vmov.f32	s14, s0
 80016e8:	eef0 7a60 	vmov.f32	s15, s1
 80016ec:	4b6e      	ldr	r3, [pc, #440]	; (80018a8 <main+0x788>)
 80016ee:	ed83 7b00 	vstr	d7, [r3]
						for(int j=0;j<=99;j++){
 80016f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016f4:	3301      	adds	r3, #1
 80016f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80016f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016fa:	2b63      	cmp	r3, #99	; 0x63
 80016fc:	ddbc      	ble.n	8001678 <main+0x558>
						 }


						AVG_INT5=AVG5;
 80016fe:	4b69      	ldr	r3, [pc, #420]	; (80018a4 <main+0x784>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	4610      	mov	r0, r2
 8001706:	4619      	mov	r1, r3
 8001708:	f7ff fa1e 	bl	8000b48 <__aeabi_d2iz>
 800170c:	4603      	mov	r3, r0
 800170e:	4a68      	ldr	r2, [pc, #416]	; (80018b0 <main+0x790>)
 8001710:	6013      	str	r3, [r2, #0]
						SD5_INT=SD5*1000;
 8001712:	4b65      	ldr	r3, [pc, #404]	; (80018a8 <main+0x788>)
 8001714:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	4b65      	ldr	r3, [pc, #404]	; (80018b4 <main+0x794>)
 800171e:	f7fe ff63 	bl	80005e8 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f7ff fa0d 	bl	8000b48 <__aeabi_d2iz>
 800172e:	4603      	mov	r3, r0
 8001730:	4a61      	ldr	r2, [pc, #388]	; (80018b8 <main+0x798>)
 8001732:	6013      	str	r3, [r2, #0]

			for(int j=0;j<=99;j++){
 8001734:	2300      	movs	r3, #0
 8001736:	637b      	str	r3, [r7, #52]	; 0x34
 8001738:	e013      	b.n	8001762 <main+0x642>
							AVG6=AVG6+ADC_VAL6[j];
 800173a:	4a60      	ldr	r2, [pc, #384]	; (80018bc <main+0x79c>)
 800173c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800173e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe fee6 	bl	8000514 <__aeabi_i2d>
 8001748:	4b5d      	ldr	r3, [pc, #372]	; (80018c0 <main+0x7a0>)
 800174a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174e:	f7fe fd95 	bl	800027c <__adddf3>
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	495a      	ldr	r1, [pc, #360]	; (80018c0 <main+0x7a0>)
 8001758:	e9c1 2300 	strd	r2, r3, [r1]
			for(int j=0;j<=99;j++){
 800175c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800175e:	3301      	adds	r3, #1
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
 8001762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001764:	2b63      	cmp	r3, #99	; 0x63
 8001766:	dde8      	ble.n	800173a <main+0x61a>

						}
			AVG6=AVG6/100;
 8001768:	4b55      	ldr	r3, [pc, #340]	; (80018c0 <main+0x7a0>)
 800176a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	4b4e      	ldr	r3, [pc, #312]	; (80018ac <main+0x78c>)
 8001774:	f7ff f862 	bl	800083c <__aeabi_ddiv>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4950      	ldr	r1, [pc, #320]	; (80018c0 <main+0x7a0>)
 800177e:	e9c1 2300 	strd	r2, r3, [r1]
			//avegare calculated
						//caculate de standard deviation


						for(int j=0;j<=99;j++){
 8001782:	2300      	movs	r3, #0
 8001784:	633b      	str	r3, [r7, #48]	; 0x30
 8001786:	e03f      	b.n	8001808 <main+0x6e8>
						  SD6+=pow(ADC_VAL6[j]-AVG6,2);
 8001788:	4a4c      	ldr	r2, [pc, #304]	; (80018bc <main+0x79c>)
 800178a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800178c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe febf 	bl	8000514 <__aeabi_i2d>
 8001796:	4b4a      	ldr	r3, [pc, #296]	; (80018c0 <main+0x7a0>)
 8001798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179c:	f7fe fd6c 	bl	8000278 <__aeabi_dsub>
 80017a0:	4602      	mov	r2, r0
 80017a2:	460b      	mov	r3, r1
 80017a4:	ec43 2b17 	vmov	d7, r2, r3
 80017a8:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 8001898 <main+0x778>
 80017ac:	eeb0 0a47 	vmov.f32	s0, s14
 80017b0:	eef0 0a67 	vmov.f32	s1, s15
 80017b4:	f004 f9fc 	bl	8005bb0 <pow>
 80017b8:	ec51 0b10 	vmov	r0, r1, d0
 80017bc:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <main+0x7a4>)
 80017be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c2:	f7fe fd5b 	bl	800027c <__adddf3>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	493e      	ldr	r1, [pc, #248]	; (80018c4 <main+0x7a4>)
 80017cc:	e9c1 2300 	strd	r2, r3, [r1]
						  SD6=sqrt(SD6/100);
 80017d0:	4b3c      	ldr	r3, [pc, #240]	; (80018c4 <main+0x7a4>)
 80017d2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	4b34      	ldr	r3, [pc, #208]	; (80018ac <main+0x78c>)
 80017dc:	f7ff f82e 	bl	800083c <__aeabi_ddiv>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	ec43 2b17 	vmov	d7, r2, r3
 80017e8:	eeb0 0a47 	vmov.f32	s0, s14
 80017ec:	eef0 0a67 	vmov.f32	s1, s15
 80017f0:	f004 fa8c 	bl	8005d0c <sqrt>
 80017f4:	eeb0 7a40 	vmov.f32	s14, s0
 80017f8:	eef0 7a60 	vmov.f32	s15, s1
 80017fc:	4b31      	ldr	r3, [pc, #196]	; (80018c4 <main+0x7a4>)
 80017fe:	ed83 7b00 	vstr	d7, [r3]
						for(int j=0;j<=99;j++){
 8001802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001804:	3301      	adds	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
 8001808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800180a:	2b63      	cmp	r3, #99	; 0x63
 800180c:	ddbc      	ble.n	8001788 <main+0x668>
						 }


						AVG_INT6=AVG6;
 800180e:	4b2c      	ldr	r3, [pc, #176]	; (80018c0 <main+0x7a0>)
 8001810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001814:	4610      	mov	r0, r2
 8001816:	4619      	mov	r1, r3
 8001818:	f7ff f996 	bl	8000b48 <__aeabi_d2iz>
 800181c:	4603      	mov	r3, r0
 800181e:	4a2a      	ldr	r2, [pc, #168]	; (80018c8 <main+0x7a8>)
 8001820:	6013      	str	r3, [r2, #0]
						SD6_INT=SD6*1000;
 8001822:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <main+0x7a4>)
 8001824:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <main+0x794>)
 800182e:	f7fe fedb 	bl	80005e8 <__aeabi_dmul>
 8001832:	4602      	mov	r2, r0
 8001834:	460b      	mov	r3, r1
 8001836:	4610      	mov	r0, r2
 8001838:	4619      	mov	r1, r3
 800183a:	f7ff f985 	bl	8000b48 <__aeabi_d2iz>
 800183e:	4603      	mov	r3, r0
 8001840:	4a22      	ldr	r2, [pc, #136]	; (80018cc <main+0x7ac>)
 8001842:	6013      	str	r3, [r2, #0]

			for(int j=0;j<=99;j++){
 8001844:	2300      	movs	r3, #0
 8001846:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001848:	e013      	b.n	8001872 <main+0x752>
							AVG7=AVG7+ADC_VAL7[j];
 800184a:	4a21      	ldr	r2, [pc, #132]	; (80018d0 <main+0x7b0>)
 800184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800184e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe fe5e 	bl	8000514 <__aeabi_i2d>
 8001858:	4b1e      	ldr	r3, [pc, #120]	; (80018d4 <main+0x7b4>)
 800185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185e:	f7fe fd0d 	bl	800027c <__adddf3>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	491b      	ldr	r1, [pc, #108]	; (80018d4 <main+0x7b4>)
 8001868:	e9c1 2300 	strd	r2, r3, [r1]
			for(int j=0;j<=99;j++){
 800186c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186e:	3301      	adds	r3, #1
 8001870:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001874:	2b63      	cmp	r3, #99	; 0x63
 8001876:	dde8      	ble.n	800184a <main+0x72a>

						}
			AVG7=AVG7/100;
 8001878:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <main+0x7b4>)
 800187a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	4b0a      	ldr	r3, [pc, #40]	; (80018ac <main+0x78c>)
 8001884:	f7fe ffda 	bl	800083c <__aeabi_ddiv>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4911      	ldr	r1, [pc, #68]	; (80018d4 <main+0x7b4>)
 800188e:	e9c1 2300 	strd	r2, r3, [r1]
			//avegare calculated
						//caculate de standard deviation


						for(int j=0;j<=99;j++){
 8001892:	2300      	movs	r3, #0
 8001894:	62bb      	str	r3, [r7, #40]	; 0x28
 8001896:	e05f      	b.n	8001958 <main+0x838>
 8001898:	00000000 	.word	0x00000000
 800189c:	40000000 	.word	0x40000000
 80018a0:	2000077c 	.word	0x2000077c
 80018a4:	200000b8 	.word	0x200000b8
 80018a8:	20000100 	.word	0x20000100
 80018ac:	40590000 	.word	0x40590000
 80018b0:	2000015c 	.word	0x2000015c
 80018b4:	408f4000 	.word	0x408f4000
 80018b8:	20000138 	.word	0x20000138
 80018bc:	20000390 	.word	0x20000390
 80018c0:	200000c0 	.word	0x200000c0
 80018c4:	20000108 	.word	0x20000108
 80018c8:	20000160 	.word	0x20000160
 80018cc:	2000013c 	.word	0x2000013c
 80018d0:	20000e88 	.word	0x20000e88
 80018d4:	200000c8 	.word	0x200000c8
						  SD7+=pow(ADC_VAL7[j]-AVG7,2);
 80018d8:	4ab5      	ldr	r2, [pc, #724]	; (8001bb0 <main+0xa90>)
 80018da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7fe fe17 	bl	8000514 <__aeabi_i2d>
 80018e6:	4bb3      	ldr	r3, [pc, #716]	; (8001bb4 <main+0xa94>)
 80018e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ec:	f7fe fcc4 	bl	8000278 <__aeabi_dsub>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	ec43 2b17 	vmov	d7, r2, r3
 80018f8:	ed9f 1b9f 	vldr	d1, [pc, #636]	; 8001b78 <main+0xa58>
 80018fc:	eeb0 0a47 	vmov.f32	s0, s14
 8001900:	eef0 0a67 	vmov.f32	s1, s15
 8001904:	f004 f954 	bl	8005bb0 <pow>
 8001908:	ec51 0b10 	vmov	r0, r1, d0
 800190c:	4baa      	ldr	r3, [pc, #680]	; (8001bb8 <main+0xa98>)
 800190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001912:	f7fe fcb3 	bl	800027c <__adddf3>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	49a7      	ldr	r1, [pc, #668]	; (8001bb8 <main+0xa98>)
 800191c:	e9c1 2300 	strd	r2, r3, [r1]
						  SD7=sqrt(SD7/100);
 8001920:	4ba5      	ldr	r3, [pc, #660]	; (8001bb8 <main+0xa98>)
 8001922:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	4ba4      	ldr	r3, [pc, #656]	; (8001bbc <main+0xa9c>)
 800192c:	f7fe ff86 	bl	800083c <__aeabi_ddiv>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	ec43 2b17 	vmov	d7, r2, r3
 8001938:	eeb0 0a47 	vmov.f32	s0, s14
 800193c:	eef0 0a67 	vmov.f32	s1, s15
 8001940:	f004 f9e4 	bl	8005d0c <sqrt>
 8001944:	eeb0 7a40 	vmov.f32	s14, s0
 8001948:	eef0 7a60 	vmov.f32	s15, s1
 800194c:	4b9a      	ldr	r3, [pc, #616]	; (8001bb8 <main+0xa98>)
 800194e:	ed83 7b00 	vstr	d7, [r3]
						for(int j=0;j<=99;j++){
 8001952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001954:	3301      	adds	r3, #1
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
 8001958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195a:	2b63      	cmp	r3, #99	; 0x63
 800195c:	ddbc      	ble.n	80018d8 <main+0x7b8>
						 }

//***********************************TEMPERATURE MEASUREMENT*************************
						 double Rntc=0;
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	e9c7 2304 	strd	r2, r3, [r7, #16]
						 double Vtemp=(AVG7*2.5)/4096;
 800196a:	4b92      	ldr	r3, [pc, #584]	; (8001bb4 <main+0xa94>)
 800196c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	4b92      	ldr	r3, [pc, #584]	; (8001bc0 <main+0xaa0>)
 8001976:	f7fe fe37 	bl	80005e8 <__aeabi_dmul>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	4b8f      	ldr	r3, [pc, #572]	; (8001bc4 <main+0xaa4>)
 8001988:	f7fe ff58 	bl	800083c <__aeabi_ddiv>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	e9c7 2302 	strd	r2, r3, [r7, #8]

						 Rntc=(11000/(Vtemp+0.189268/2.8571425))-11000;
 8001994:	a37a      	add	r3, pc, #488	; (adr r3, 8001b80 <main+0xa60>)
 8001996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800199e:	f7fe fc6d 	bl	800027c <__adddf3>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	a178      	add	r1, pc, #480	; (adr r1, 8001b88 <main+0xa68>)
 80019a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019ac:	f7fe ff46 	bl	800083c <__aeabi_ddiv>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	a373      	add	r3, pc, #460	; (adr r3, 8001b88 <main+0xa68>)
 80019ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019be:	f7fe fc5b 	bl	8000278 <__aeabi_dsub>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	e9c7 2304 	strd	r2, r3, [r7, #16]

						 //Rntc=((27500/(Vtemp/0.9530))-27500)/2.5;

						double TempNTC=pow((((Rntc/10000)/3976)+(1/298.15)),-1);
 80019ca:	a371      	add	r3, pc, #452	; (adr r3, 8001b90 <main+0xa70>)
 80019cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019d4:	f7fe ff32 	bl	800083c <__aeabi_ddiv>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	a36d      	add	r3, pc, #436	; (adr r3, 8001b98 <main+0xa78>)
 80019e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019e6:	f7fe ff29 	bl	800083c <__aeabi_ddiv>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	a36b      	add	r3, pc, #428	; (adr r3, 8001ba0 <main+0xa80>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	f7fe fc40 	bl	800027c <__adddf3>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	f04f 0000 	mov.w	r0, #0
 8001a04:	4970      	ldr	r1, [pc, #448]	; (8001bc8 <main+0xaa8>)
 8001a06:	f7fe ff19 	bl	800083c <__aeabi_ddiv>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	e9c7 2300 	strd	r2, r3, [r7]
						 TempNTC=TempNTC-273.15;
 8001a12:	a365      	add	r3, pc, #404	; (adr r3, 8001ba8 <main+0xa88>)
 8001a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001a1c:	f7fe fc2c 	bl	8000278 <__aeabi_dsub>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	e9c7 2300 	strd	r2, r3, [r7]

//******************************************************************
						AVG_INT7=AVG7;
 8001a28:	4b62      	ldr	r3, [pc, #392]	; (8001bb4 <main+0xa94>)
 8001a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	f7ff f889 	bl	8000b48 <__aeabi_d2iz>
 8001a36:	4603      	mov	r3, r0
 8001a38:	4a64      	ldr	r2, [pc, #400]	; (8001bcc <main+0xaac>)
 8001a3a:	6013      	str	r3, [r2, #0]
						SD7_INT=SD7*1000;
 8001a3c:	4b5e      	ldr	r3, [pc, #376]	; (8001bb8 <main+0xa98>)
 8001a3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	4b62      	ldr	r3, [pc, #392]	; (8001bd0 <main+0xab0>)
 8001a48:	f7fe fdce 	bl	80005e8 <__aeabi_dmul>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	f7ff f878 	bl	8000b48 <__aeabi_d2iz>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	4a5e      	ldr	r2, [pc, #376]	; (8001bd4 <main+0xab4>)
 8001a5c:	6013      	str	r3, [r2, #0]

			for(int j=0;j<=99;j++){
 8001a5e:	2300      	movs	r3, #0
 8001a60:	627b      	str	r3, [r7, #36]	; 0x24
 8001a62:	e013      	b.n	8001a8c <main+0x96c>
							AVG8=AVG8+ADC_VAL8[j];
 8001a64:	4a5c      	ldr	r2, [pc, #368]	; (8001bd8 <main+0xab8>)
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fd51 	bl	8000514 <__aeabi_i2d>
 8001a72:	4b5a      	ldr	r3, [pc, #360]	; (8001bdc <main+0xabc>)
 8001a74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a78:	f7fe fc00 	bl	800027c <__adddf3>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	460b      	mov	r3, r1
 8001a80:	4956      	ldr	r1, [pc, #344]	; (8001bdc <main+0xabc>)
 8001a82:	e9c1 2300 	strd	r2, r3, [r1]
			for(int j=0;j<=99;j++){
 8001a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a88:	3301      	adds	r3, #1
 8001a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a8e:	2b63      	cmp	r3, #99	; 0x63
 8001a90:	dde8      	ble.n	8001a64 <main+0x944>

						}
			AVG8=AVG8/100;
 8001a92:	4b52      	ldr	r3, [pc, #328]	; (8001bdc <main+0xabc>)
 8001a94:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a98:	f04f 0200 	mov.w	r2, #0
 8001a9c:	4b47      	ldr	r3, [pc, #284]	; (8001bbc <main+0xa9c>)
 8001a9e:	f7fe fecd 	bl	800083c <__aeabi_ddiv>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	494d      	ldr	r1, [pc, #308]	; (8001bdc <main+0xabc>)
 8001aa8:	e9c1 2300 	strd	r2, r3, [r1]
			//avegare calculated
						//caculate de standard deviation


						for(int j=0;j<=99;j++){
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
 8001ab0:	e03f      	b.n	8001b32 <main+0xa12>
						  SD8+=pow(ADC_VAL8[j]-AVG8,2);
 8001ab2:	4a49      	ldr	r2, [pc, #292]	; (8001bd8 <main+0xab8>)
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fd2a 	bl	8000514 <__aeabi_i2d>
 8001ac0:	4b46      	ldr	r3, [pc, #280]	; (8001bdc <main+0xabc>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fbd7 	bl	8000278 <__aeabi_dsub>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	ec43 2b17 	vmov	d7, r2, r3
 8001ad2:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8001b78 <main+0xa58>
 8001ad6:	eeb0 0a47 	vmov.f32	s0, s14
 8001ada:	eef0 0a67 	vmov.f32	s1, s15
 8001ade:	f004 f867 	bl	8005bb0 <pow>
 8001ae2:	ec51 0b10 	vmov	r0, r1, d0
 8001ae6:	4b3e      	ldr	r3, [pc, #248]	; (8001be0 <main+0xac0>)
 8001ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aec:	f7fe fbc6 	bl	800027c <__adddf3>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	493a      	ldr	r1, [pc, #232]	; (8001be0 <main+0xac0>)
 8001af6:	e9c1 2300 	strd	r2, r3, [r1]
						  SD8=sqrt(SD8/100);
 8001afa:	4b39      	ldr	r3, [pc, #228]	; (8001be0 <main+0xac0>)
 8001afc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <main+0xa9c>)
 8001b06:	f7fe fe99 	bl	800083c <__aeabi_ddiv>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	ec43 2b17 	vmov	d7, r2, r3
 8001b12:	eeb0 0a47 	vmov.f32	s0, s14
 8001b16:	eef0 0a67 	vmov.f32	s1, s15
 8001b1a:	f004 f8f7 	bl	8005d0c <sqrt>
 8001b1e:	eeb0 7a40 	vmov.f32	s14, s0
 8001b22:	eef0 7a60 	vmov.f32	s15, s1
 8001b26:	4b2e      	ldr	r3, [pc, #184]	; (8001be0 <main+0xac0>)
 8001b28:	ed83 7b00 	vstr	d7, [r3]
						for(int j=0;j<=99;j++){
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	623b      	str	r3, [r7, #32]
 8001b32:	6a3b      	ldr	r3, [r7, #32]
 8001b34:	2b63      	cmp	r3, #99	; 0x63
 8001b36:	ddbc      	ble.n	8001ab2 <main+0x992>
						 }


						AVG_INT8=AVG8;
 8001b38:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <main+0xabc>)
 8001b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f7ff f801 	bl	8000b48 <__aeabi_d2iz>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4a26      	ldr	r2, [pc, #152]	; (8001be4 <main+0xac4>)
 8001b4a:	6013      	str	r3, [r2, #0]
						SD8_INT=SD8*1000;
 8001b4c:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <main+0xac0>)
 8001b4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	4b1e      	ldr	r3, [pc, #120]	; (8001bd0 <main+0xab0>)
 8001b58:	f7fe fd46 	bl	80005e8 <__aeabi_dmul>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f7fe fff0 	bl	8000b48 <__aeabi_d2iz>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4a1f      	ldr	r2, [pc, #124]	; (8001be8 <main+0xac8>)
 8001b6c:	6013      	str	r3, [r2, #0]

			for(int j=0;j<=99;j++){
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
 8001b72:	e04f      	b.n	8001c14 <main+0xaf4>
 8001b74:	f3af 8000 	nop.w
 8001b78:	00000000 	.word	0x00000000
 8001b7c:	40000000 	.word	0x40000000
 8001b80:	ae208c27 	.word	0xae208c27
 8001b84:	3fb0f55a 	.word	0x3fb0f55a
 8001b88:	00000000 	.word	0x00000000
 8001b8c:	40c57c00 	.word	0x40c57c00
 8001b90:	00000000 	.word	0x00000000
 8001b94:	40c38800 	.word	0x40c38800
 8001b98:	00000000 	.word	0x00000000
 8001b9c:	40af1000 	.word	0x40af1000
 8001ba0:	dcb5db83 	.word	0xdcb5db83
 8001ba4:	3f6b79e1 	.word	0x3f6b79e1
 8001ba8:	66666666 	.word	0x66666666
 8001bac:	40711266 	.word	0x40711266
 8001bb0:	20000e88 	.word	0x20000e88
 8001bb4:	200000c8 	.word	0x200000c8
 8001bb8:	20000110 	.word	0x20000110
 8001bbc:	40590000 	.word	0x40590000
 8001bc0:	40040000 	.word	0x40040000
 8001bc4:	40b00000 	.word	0x40b00000
 8001bc8:	3ff00000 	.word	0x3ff00000
 8001bcc:	20000164 	.word	0x20000164
 8001bd0:	408f4000 	.word	0x408f4000
 8001bd4:	20000140 	.word	0x20000140
 8001bd8:	20000cf8 	.word	0x20000cf8
 8001bdc:	200000d0 	.word	0x200000d0
 8001be0:	20000118 	.word	0x20000118
 8001be4:	20000168 	.word	0x20000168
 8001be8:	20000144 	.word	0x20000144
							AVG9=AVG9+ADC_VAL9[j];
 8001bec:	4a13      	ldr	r2, [pc, #76]	; (8001c3c <main+0xb1c>)
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fc8d 	bl	8000514 <__aeabi_i2d>
 8001bfa:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <main+0xb20>)
 8001bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c00:	f7fe fb3c 	bl	800027c <__adddf3>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	490d      	ldr	r1, [pc, #52]	; (8001c40 <main+0xb20>)
 8001c0a:	e9c1 2300 	strd	r2, r3, [r1]
			for(int j=0;j<=99;j++){
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3301      	adds	r3, #1
 8001c12:	61fb      	str	r3, [r7, #28]
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	2b63      	cmp	r3, #99	; 0x63
 8001c18:	dde8      	ble.n	8001bec <main+0xacc>

									}
			AVG9=AVG9/100;
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <main+0xb20>)
 8001c1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <main+0xb24>)
 8001c26:	f7fe fe09 	bl	800083c <__aeabi_ddiv>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4904      	ldr	r1, [pc, #16]	; (8001c40 <main+0xb20>)
 8001c30:	e9c1 2300 	strd	r2, r3, [r1]
			//avegare calculated
						//caculate de standard deviation


						for(int j=0;j<=99;j++){
 8001c34:	2300      	movs	r3, #0
 8001c36:	61bb      	str	r3, [r7, #24]
 8001c38:	e046      	b.n	8001cc8 <main+0xba8>
 8001c3a:	bf00      	nop
 8001c3c:	200001c0 	.word	0x200001c0
 8001c40:	200000d8 	.word	0x200000d8
 8001c44:	40590000 	.word	0x40590000
						  SD9+=pow(ADC_VAL9[j]-AVG9,2);
 8001c48:	4ab5      	ldr	r2, [pc, #724]	; (8001f20 <main+0xe00>)
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7fe fc5f 	bl	8000514 <__aeabi_i2d>
 8001c56:	4bb3      	ldr	r3, [pc, #716]	; (8001f24 <main+0xe04>)
 8001c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5c:	f7fe fb0c 	bl	8000278 <__aeabi_dsub>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	ec43 2b17 	vmov	d7, r2, r3
 8001c68:	ed9f 1bab 	vldr	d1, [pc, #684]	; 8001f18 <main+0xdf8>
 8001c6c:	eeb0 0a47 	vmov.f32	s0, s14
 8001c70:	eef0 0a67 	vmov.f32	s1, s15
 8001c74:	f003 ff9c 	bl	8005bb0 <pow>
 8001c78:	ec51 0b10 	vmov	r0, r1, d0
 8001c7c:	4baa      	ldr	r3, [pc, #680]	; (8001f28 <main+0xe08>)
 8001c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c82:	f7fe fafb 	bl	800027c <__adddf3>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	49a7      	ldr	r1, [pc, #668]	; (8001f28 <main+0xe08>)
 8001c8c:	e9c1 2300 	strd	r2, r3, [r1]
						  SD9=sqrt(SD9/100);
 8001c90:	4ba5      	ldr	r3, [pc, #660]	; (8001f28 <main+0xe08>)
 8001c92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c96:	f04f 0200 	mov.w	r2, #0
 8001c9a:	4ba4      	ldr	r3, [pc, #656]	; (8001f2c <main+0xe0c>)
 8001c9c:	f7fe fdce 	bl	800083c <__aeabi_ddiv>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	ec43 2b17 	vmov	d7, r2, r3
 8001ca8:	eeb0 0a47 	vmov.f32	s0, s14
 8001cac:	eef0 0a67 	vmov.f32	s1, s15
 8001cb0:	f004 f82c 	bl	8005d0c <sqrt>
 8001cb4:	eeb0 7a40 	vmov.f32	s14, s0
 8001cb8:	eef0 7a60 	vmov.f32	s15, s1
 8001cbc:	4b9a      	ldr	r3, [pc, #616]	; (8001f28 <main+0xe08>)
 8001cbe:	ed83 7b00 	vstr	d7, [r3]
						for(int j=0;j<=99;j++){
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	61bb      	str	r3, [r7, #24]
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2b63      	cmp	r3, #99	; 0x63
 8001ccc:	ddbc      	ble.n	8001c48 <main+0xb28>
						 }


						AVG_INT9=AVG9;
 8001cce:	4b95      	ldr	r3, [pc, #596]	; (8001f24 <main+0xe04>)
 8001cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd4:	4610      	mov	r0, r2
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	f7fe ff36 	bl	8000b48 <__aeabi_d2iz>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	4a94      	ldr	r2, [pc, #592]	; (8001f30 <main+0xe10>)
 8001ce0:	6013      	str	r3, [r2, #0]
						SD9_INT=SD9*1000;
 8001ce2:	4b91      	ldr	r3, [pc, #580]	; (8001f28 <main+0xe08>)
 8001ce4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	4b91      	ldr	r3, [pc, #580]	; (8001f34 <main+0xe14>)
 8001cee:	f7fe fc7b 	bl	80005e8 <__aeabi_dmul>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	460b      	mov	r3, r1
 8001cf6:	4610      	mov	r0, r2
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f7fe ff25 	bl	8000b48 <__aeabi_d2iz>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	4a8d      	ldr	r2, [pc, #564]	; (8001f38 <main+0xe18>)
 8001d02:	6013      	str	r3, [r2, #0]




 			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001d04:	2201      	movs	r2, #1
 8001d06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d0a:	488c      	ldr	r0, [pc, #560]	; (8001f3c <main+0xe1c>)
 8001d0c:	f001 fe9e 	bl	8003a4c <HAL_GPIO_WritePin>
			HAL_UART_Transmit(&huart1, "V1:", 3, 100);
 8001d10:	2364      	movs	r3, #100	; 0x64
 8001d12:	2203      	movs	r2, #3
 8001d14:	498a      	ldr	r1, [pc, #552]	; (8001f40 <main+0xe20>)
 8001d16:	488b      	ldr	r0, [pc, #556]	; (8001f44 <main+0xe24>)
 8001d18:	f003 f821 	bl	8004d5e <HAL_UART_Transmit>
			//for (int i = 0; i <= 99; i++) {

				sprintf(DATA, ";%d;----SIGMA:;%d", AVG_INT1,SD1_INT);
 8001d1c:	4b8a      	ldr	r3, [pc, #552]	; (8001f48 <main+0xe28>)
 8001d1e:	681a      	ldr	r2, [r3, #0]
 8001d20:	4b8a      	ldr	r3, [pc, #552]	; (8001f4c <main+0xe2c>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	498a      	ldr	r1, [pc, #552]	; (8001f50 <main+0xe30>)
 8001d26:	488b      	ldr	r0, [pc, #556]	; (8001f54 <main+0xe34>)
 8001d28:	f003 fb14 	bl	8005354 <siprintf>


				HAL_UART_Transmit(&huart1, DATA, sizeof(DATA), HAL_MAX_DELAY);
 8001d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001d30:	221e      	movs	r2, #30
 8001d32:	4988      	ldr	r1, [pc, #544]	; (8001f54 <main+0xe34>)
 8001d34:	4883      	ldr	r0, [pc, #524]	; (8001f44 <main+0xe24>)
 8001d36:	f003 f812 	bl	8004d5e <HAL_UART_Transmit>

			//}
			HAL_UART_Transmit(&huart1, "\n\r", 4, 100);
 8001d3a:	2364      	movs	r3, #100	; 0x64
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	4986      	ldr	r1, [pc, #536]	; (8001f58 <main+0xe38>)
 8001d40:	4880      	ldr	r0, [pc, #512]	; (8001f44 <main+0xe24>)
 8001d42:	f003 f80c 	bl	8004d5e <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart1, "V2:", 3, 100);
 8001d46:	2364      	movs	r3, #100	; 0x64
 8001d48:	2203      	movs	r2, #3
 8001d4a:	4984      	ldr	r1, [pc, #528]	; (8001f5c <main+0xe3c>)
 8001d4c:	487d      	ldr	r0, [pc, #500]	; (8001f44 <main+0xe24>)
 8001d4e:	f003 f806 	bl	8004d5e <HAL_UART_Transmit>
			//for (int i = 0; i <= 99; i++) {

			sprintf(DATA2, ";%d;----SIGMA:;%d", AVG_INT2,SD2_INT);
 8001d52:	4b83      	ldr	r3, [pc, #524]	; (8001f60 <main+0xe40>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	4b83      	ldr	r3, [pc, #524]	; (8001f64 <main+0xe44>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	497d      	ldr	r1, [pc, #500]	; (8001f50 <main+0xe30>)
 8001d5c:	4882      	ldr	r0, [pc, #520]	; (8001f68 <main+0xe48>)
 8001d5e:	f003 faf9 	bl	8005354 <siprintf>

				HAL_UART_Transmit(&huart1, DATA2, sizeof(DATA2), HAL_MAX_DELAY);
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295
 8001d66:	221e      	movs	r2, #30
 8001d68:	497f      	ldr	r1, [pc, #508]	; (8001f68 <main+0xe48>)
 8001d6a:	4876      	ldr	r0, [pc, #472]	; (8001f44 <main+0xe24>)
 8001d6c:	f002 fff7 	bl	8004d5e <HAL_UART_Transmit>

			//}
			HAL_UART_Transmit(&huart1, "\n\r", 4, 100);
 8001d70:	2364      	movs	r3, #100	; 0x64
 8001d72:	2204      	movs	r2, #4
 8001d74:	4978      	ldr	r1, [pc, #480]	; (8001f58 <main+0xe38>)
 8001d76:	4873      	ldr	r0, [pc, #460]	; (8001f44 <main+0xe24>)
 8001d78:	f002 fff1 	bl	8004d5e <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart1, "V3:", 3, 100);
 8001d7c:	2364      	movs	r3, #100	; 0x64
 8001d7e:	2203      	movs	r2, #3
 8001d80:	497a      	ldr	r1, [pc, #488]	; (8001f6c <main+0xe4c>)
 8001d82:	4870      	ldr	r0, [pc, #448]	; (8001f44 <main+0xe24>)
 8001d84:	f002 ffeb 	bl	8004d5e <HAL_UART_Transmit>
			//for (int i = 0; i <= 99; i++) {

			sprintf(DATA3, ";%d;----SIGMA:;%d", AVG_INT3,SD3_INT);
 8001d88:	4b79      	ldr	r3, [pc, #484]	; (8001f70 <main+0xe50>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	4b79      	ldr	r3, [pc, #484]	; (8001f74 <main+0xe54>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	496f      	ldr	r1, [pc, #444]	; (8001f50 <main+0xe30>)
 8001d92:	4879      	ldr	r0, [pc, #484]	; (8001f78 <main+0xe58>)
 8001d94:	f003 fade 	bl	8005354 <siprintf>

				HAL_UART_Transmit(&huart1, DATA3, sizeof(DATA3), HAL_MAX_DELAY);
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9c:	221e      	movs	r2, #30
 8001d9e:	4976      	ldr	r1, [pc, #472]	; (8001f78 <main+0xe58>)
 8001da0:	4868      	ldr	r0, [pc, #416]	; (8001f44 <main+0xe24>)
 8001da2:	f002 ffdc 	bl	8004d5e <HAL_UART_Transmit>

			//}
			HAL_UART_Transmit(&huart1, "\n\r", 4, 100);
 8001da6:	2364      	movs	r3, #100	; 0x64
 8001da8:	2204      	movs	r2, #4
 8001daa:	496b      	ldr	r1, [pc, #428]	; (8001f58 <main+0xe38>)
 8001dac:	4865      	ldr	r0, [pc, #404]	; (8001f44 <main+0xe24>)
 8001dae:	f002 ffd6 	bl	8004d5e <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart1, "V4:", 3, 100);
 8001db2:	2364      	movs	r3, #100	; 0x64
 8001db4:	2203      	movs	r2, #3
 8001db6:	4971      	ldr	r1, [pc, #452]	; (8001f7c <main+0xe5c>)
 8001db8:	4862      	ldr	r0, [pc, #392]	; (8001f44 <main+0xe24>)
 8001dba:	f002 ffd0 	bl	8004d5e <HAL_UART_Transmit>
			//for (int i = 0; i <= 99; i++) {

			sprintf(DATA4, ";%d;----SIGMA:;%d", AVG_INT4,SD4_INT);
 8001dbe:	4b70      	ldr	r3, [pc, #448]	; (8001f80 <main+0xe60>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	4b70      	ldr	r3, [pc, #448]	; (8001f84 <main+0xe64>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4962      	ldr	r1, [pc, #392]	; (8001f50 <main+0xe30>)
 8001dc8:	486f      	ldr	r0, [pc, #444]	; (8001f88 <main+0xe68>)
 8001dca:	f003 fac3 	bl	8005354 <siprintf>

				HAL_UART_Transmit(&huart1, DATA4, sizeof(DATA4), HAL_MAX_DELAY);
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd2:	221e      	movs	r2, #30
 8001dd4:	496c      	ldr	r1, [pc, #432]	; (8001f88 <main+0xe68>)
 8001dd6:	485b      	ldr	r0, [pc, #364]	; (8001f44 <main+0xe24>)
 8001dd8:	f002 ffc1 	bl	8004d5e <HAL_UART_Transmit>

			//}
			HAL_UART_Transmit(&huart1, "\n\r", 4, 100);
 8001ddc:	2364      	movs	r3, #100	; 0x64
 8001dde:	2204      	movs	r2, #4
 8001de0:	495d      	ldr	r1, [pc, #372]	; (8001f58 <main+0xe38>)
 8001de2:	4858      	ldr	r0, [pc, #352]	; (8001f44 <main+0xe24>)
 8001de4:	f002 ffbb 	bl	8004d5e <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart1, "V5:", 3, 100);
 8001de8:	2364      	movs	r3, #100	; 0x64
 8001dea:	2203      	movs	r2, #3
 8001dec:	4967      	ldr	r1, [pc, #412]	; (8001f8c <main+0xe6c>)
 8001dee:	4855      	ldr	r0, [pc, #340]	; (8001f44 <main+0xe24>)
 8001df0:	f002 ffb5 	bl	8004d5e <HAL_UART_Transmit>
			//for (int i = 0; i <= 99; i++) {

			sprintf(DATA5, ";%d;----SIGMA:;%d", AVG_INT5,SD5_INT);
 8001df4:	4b66      	ldr	r3, [pc, #408]	; (8001f90 <main+0xe70>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	4b66      	ldr	r3, [pc, #408]	; (8001f94 <main+0xe74>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4954      	ldr	r1, [pc, #336]	; (8001f50 <main+0xe30>)
 8001dfe:	4866      	ldr	r0, [pc, #408]	; (8001f98 <main+0xe78>)
 8001e00:	f003 faa8 	bl	8005354 <siprintf>

				HAL_UART_Transmit(&huart1, DATA5, sizeof(DATA5), HAL_MAX_DELAY);
 8001e04:	f04f 33ff 	mov.w	r3, #4294967295
 8001e08:	221e      	movs	r2, #30
 8001e0a:	4963      	ldr	r1, [pc, #396]	; (8001f98 <main+0xe78>)
 8001e0c:	484d      	ldr	r0, [pc, #308]	; (8001f44 <main+0xe24>)
 8001e0e:	f002 ffa6 	bl	8004d5e <HAL_UART_Transmit>

			//}
			HAL_UART_Transmit(&huart1, "\n\r", 4, 100);
 8001e12:	2364      	movs	r3, #100	; 0x64
 8001e14:	2204      	movs	r2, #4
 8001e16:	4950      	ldr	r1, [pc, #320]	; (8001f58 <main+0xe38>)
 8001e18:	484a      	ldr	r0, [pc, #296]	; (8001f44 <main+0xe24>)
 8001e1a:	f002 ffa0 	bl	8004d5e <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart1, "V6:", 3, 100);
 8001e1e:	2364      	movs	r3, #100	; 0x64
 8001e20:	2203      	movs	r2, #3
 8001e22:	495e      	ldr	r1, [pc, #376]	; (8001f9c <main+0xe7c>)
 8001e24:	4847      	ldr	r0, [pc, #284]	; (8001f44 <main+0xe24>)
 8001e26:	f002 ff9a 	bl	8004d5e <HAL_UART_Transmit>
			//for (int i = 0; i <= 99; i++) {

			sprintf(DATA6, ";%d;----SIGMA:;%d", AVG_INT6,SD6_INT);
 8001e2a:	4b5d      	ldr	r3, [pc, #372]	; (8001fa0 <main+0xe80>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	4b5d      	ldr	r3, [pc, #372]	; (8001fa4 <main+0xe84>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4947      	ldr	r1, [pc, #284]	; (8001f50 <main+0xe30>)
 8001e34:	485c      	ldr	r0, [pc, #368]	; (8001fa8 <main+0xe88>)
 8001e36:	f003 fa8d 	bl	8005354 <siprintf>

				HAL_UART_Transmit(&huart1, DATA6, sizeof(DATA6), HAL_MAX_DELAY);
 8001e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3e:	221e      	movs	r2, #30
 8001e40:	4959      	ldr	r1, [pc, #356]	; (8001fa8 <main+0xe88>)
 8001e42:	4840      	ldr	r0, [pc, #256]	; (8001f44 <main+0xe24>)
 8001e44:	f002 ff8b 	bl	8004d5e <HAL_UART_Transmit>

			//}
			HAL_UART_Transmit(&huart1, "\n\r", 4, 100);
 8001e48:	2364      	movs	r3, #100	; 0x64
 8001e4a:	2204      	movs	r2, #4
 8001e4c:	4942      	ldr	r1, [pc, #264]	; (8001f58 <main+0xe38>)
 8001e4e:	483d      	ldr	r0, [pc, #244]	; (8001f44 <main+0xe24>)
 8001e50:	f002 ff85 	bl	8004d5e <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart1, "V7:", 3, 100);
 8001e54:	2364      	movs	r3, #100	; 0x64
 8001e56:	2203      	movs	r2, #3
 8001e58:	4954      	ldr	r1, [pc, #336]	; (8001fac <main+0xe8c>)
 8001e5a:	483a      	ldr	r0, [pc, #232]	; (8001f44 <main+0xe24>)
 8001e5c:	f002 ff7f 	bl	8004d5e <HAL_UART_Transmit>
			//for (int i = 0; i <= 99; i++) {

			sprintf(DATA7, ";%d;----SIGMA:;%d", AVG_INT7,SD7_INT);
 8001e60:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <main+0xe90>)
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <main+0xe94>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4939      	ldr	r1, [pc, #228]	; (8001f50 <main+0xe30>)
 8001e6a:	4853      	ldr	r0, [pc, #332]	; (8001fb8 <main+0xe98>)
 8001e6c:	f003 fa72 	bl	8005354 <siprintf>

				HAL_UART_Transmit(&huart1, DATA7, sizeof(DATA7), HAL_MAX_DELAY);
 8001e70:	f04f 33ff 	mov.w	r3, #4294967295
 8001e74:	221e      	movs	r2, #30
 8001e76:	4950      	ldr	r1, [pc, #320]	; (8001fb8 <main+0xe98>)
 8001e78:	4832      	ldr	r0, [pc, #200]	; (8001f44 <main+0xe24>)
 8001e7a:	f002 ff70 	bl	8004d5e <HAL_UART_Transmit>

			//}
			HAL_UART_Transmit(&huart1, "\n\r", 4, 100);
 8001e7e:	2364      	movs	r3, #100	; 0x64
 8001e80:	2204      	movs	r2, #4
 8001e82:	4935      	ldr	r1, [pc, #212]	; (8001f58 <main+0xe38>)
 8001e84:	482f      	ldr	r0, [pc, #188]	; (8001f44 <main+0xe24>)
 8001e86:	f002 ff6a 	bl	8004d5e <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart1, "V8:", 3, 100);
 8001e8a:	2364      	movs	r3, #100	; 0x64
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	494b      	ldr	r1, [pc, #300]	; (8001fbc <main+0xe9c>)
 8001e90:	482c      	ldr	r0, [pc, #176]	; (8001f44 <main+0xe24>)
 8001e92:	f002 ff64 	bl	8004d5e <HAL_UART_Transmit>
			//for (int i = 0; i <= 99; i++) {

			sprintf(DATA8, ";%d;----SIGMA:;%d", AVG_INT8,SD8_INT);
 8001e96:	4b4a      	ldr	r3, [pc, #296]	; (8001fc0 <main+0xea0>)
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	4b4a      	ldr	r3, [pc, #296]	; (8001fc4 <main+0xea4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	492c      	ldr	r1, [pc, #176]	; (8001f50 <main+0xe30>)
 8001ea0:	4849      	ldr	r0, [pc, #292]	; (8001fc8 <main+0xea8>)
 8001ea2:	f003 fa57 	bl	8005354 <siprintf>

				HAL_UART_Transmit(&huart1, DATA8, sizeof(DATA8), HAL_MAX_DELAY);
 8001ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8001eaa:	221e      	movs	r2, #30
 8001eac:	4946      	ldr	r1, [pc, #280]	; (8001fc8 <main+0xea8>)
 8001eae:	4825      	ldr	r0, [pc, #148]	; (8001f44 <main+0xe24>)
 8001eb0:	f002 ff55 	bl	8004d5e <HAL_UART_Transmit>

			//}
			HAL_UART_Transmit(&huart1, "\n\r", 4, 100);
 8001eb4:	2364      	movs	r3, #100	; 0x64
 8001eb6:	2204      	movs	r2, #4
 8001eb8:	4927      	ldr	r1, [pc, #156]	; (8001f58 <main+0xe38>)
 8001eba:	4822      	ldr	r0, [pc, #136]	; (8001f44 <main+0xe24>)
 8001ebc:	f002 ff4f 	bl	8004d5e <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart1, "V9", 3, 100);
 8001ec0:	2364      	movs	r3, #100	; 0x64
 8001ec2:	2203      	movs	r2, #3
 8001ec4:	4941      	ldr	r1, [pc, #260]	; (8001fcc <main+0xeac>)
 8001ec6:	481f      	ldr	r0, [pc, #124]	; (8001f44 <main+0xe24>)
 8001ec8:	f002 ff49 	bl	8004d5e <HAL_UART_Transmit>
			//for (int i = 0; i <= 99; i++) {

			sprintf(DATA9, ";%d;----SIGMA:;%d", AVG_INT9,SD9_INT);
 8001ecc:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <main+0xe10>)
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <main+0xe18>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	491e      	ldr	r1, [pc, #120]	; (8001f50 <main+0xe30>)
 8001ed6:	483e      	ldr	r0, [pc, #248]	; (8001fd0 <main+0xeb0>)
 8001ed8:	f003 fa3c 	bl	8005354 <siprintf>

				HAL_UART_Transmit(&huart1, DATA9, sizeof(DATA9), HAL_MAX_DELAY);
 8001edc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee0:	221e      	movs	r2, #30
 8001ee2:	493b      	ldr	r1, [pc, #236]	; (8001fd0 <main+0xeb0>)
 8001ee4:	4817      	ldr	r0, [pc, #92]	; (8001f44 <main+0xe24>)
 8001ee6:	f002 ff3a 	bl	8004d5e <HAL_UART_Transmit>

			//}
			HAL_UART_Transmit(&huart1, "\n\r", 4, 100);
 8001eea:	2364      	movs	r3, #100	; 0x64
 8001eec:	2204      	movs	r2, #4
 8001eee:	491a      	ldr	r1, [pc, #104]	; (8001f58 <main+0xe38>)
 8001ef0:	4814      	ldr	r0, [pc, #80]	; (8001f44 <main+0xe24>)
 8001ef2:	f002 ff34 	bl	8004d5e <HAL_UART_Transmit>




		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001efc:	480f      	ldr	r0, [pc, #60]	; (8001f3c <main+0xe1c>)
 8001efe:	f001 fda5 	bl	8003a4c <HAL_GPIO_WritePin>
		  HAL_TIM_Base_Start_IT(&htim2);
 8001f02:	4834      	ldr	r0, [pc, #208]	; (8001fd4 <main+0xeb4>)
 8001f04:	f002 fa7e 	bl	8004404 <HAL_TIM_Base_Start_IT>

//reset variables
		  AVG1=0;
 8001f08:	4933      	ldr	r1, [pc, #204]	; (8001fd8 <main+0xeb8>)
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	e063      	b.n	8001fdc <main+0xebc>
 8001f14:	f3af 8000 	nop.w
 8001f18:	00000000 	.word	0x00000000
 8001f1c:	40000000 	.word	0x40000000
 8001f20:	200001c0 	.word	0x200001c0
 8001f24:	200000d8 	.word	0x200000d8
 8001f28:	20000120 	.word	0x20000120
 8001f2c:	40590000 	.word	0x40590000
 8001f30:	2000016c 	.word	0x2000016c
 8001f34:	408f4000 	.word	0x408f4000
 8001f38:	20000148 	.word	0x20000148
 8001f3c:	40020000 	.word	0x40020000
 8001f40:	08006ba0 	.word	0x08006ba0
 8001f44:	20000738 	.word	0x20000738
 8001f48:	2000014c 	.word	0x2000014c
 8001f4c:	20000128 	.word	0x20000128
 8001f50:	08006ba4 	.word	0x08006ba4
 8001f54:	20000180 	.word	0x20000180
 8001f58:	08006bb8 	.word	0x08006bb8
 8001f5c:	08006bbc 	.word	0x08006bbc
 8001f60:	20000150 	.word	0x20000150
 8001f64:	2000012c 	.word	0x2000012c
 8001f68:	20000520 	.word	0x20000520
 8001f6c:	08006bc0 	.word	0x08006bc0
 8001f70:	20000154 	.word	0x20000154
 8001f74:	20000130 	.word	0x20000130
 8001f78:	20000350 	.word	0x20000350
 8001f7c:	08006bc4 	.word	0x08006bc4
 8001f80:	20000158 	.word	0x20000158
 8001f84:	20000134 	.word	0x20000134
 8001f88:	20000a9c 	.word	0x20000a9c
 8001f8c:	08006bc8 	.word	0x08006bc8
 8001f90:	2000015c 	.word	0x2000015c
 8001f94:	20000138 	.word	0x20000138
 8001f98:	200001a0 	.word	0x200001a0
 8001f9c:	08006bcc 	.word	0x08006bcc
 8001fa0:	20000160 	.word	0x20000160
 8001fa4:	2000013c 	.word	0x2000013c
 8001fa8:	20000540 	.word	0x20000540
 8001fac:	08006bd0 	.word	0x08006bd0
 8001fb0:	20000164 	.word	0x20000164
 8001fb4:	20000140 	.word	0x20000140
 8001fb8:	20000370 	.word	0x20000370
 8001fbc:	08006bd4 	.word	0x08006bd4
 8001fc0:	20000168 	.word	0x20000168
 8001fc4:	20000144 	.word	0x20000144
 8001fc8:	20000abc 	.word	0x20000abc
 8001fcc:	08006bd8 	.word	0x08006bd8
 8001fd0:	20001018 	.word	0x20001018
 8001fd4:	20000adc 	.word	0x20000adc
 8001fd8:	20000098 	.word	0x20000098
 8001fdc:	e9c1 2300 	strd	r2, r3, [r1]
		  AVG2=0;
 8001fe0:	493c      	ldr	r1, [pc, #240]	; (80020d4 <main+0xfb4>)
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	f04f 0300 	mov.w	r3, #0
 8001fea:	e9c1 2300 	strd	r2, r3, [r1]
		  AVG3=0;
 8001fee:	493a      	ldr	r1, [pc, #232]	; (80020d8 <main+0xfb8>)
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	e9c1 2300 	strd	r2, r3, [r1]
		  AVG4=0;
 8001ffc:	4937      	ldr	r1, [pc, #220]	; (80020dc <main+0xfbc>)
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	e9c1 2300 	strd	r2, r3, [r1]
		  AVG5=0;
 800200a:	4935      	ldr	r1, [pc, #212]	; (80020e0 <main+0xfc0>)
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	e9c1 2300 	strd	r2, r3, [r1]
		  AVG6=0;
 8002018:	4932      	ldr	r1, [pc, #200]	; (80020e4 <main+0xfc4>)
 800201a:	f04f 0200 	mov.w	r2, #0
 800201e:	f04f 0300 	mov.w	r3, #0
 8002022:	e9c1 2300 	strd	r2, r3, [r1]
		  AVG7=0;
 8002026:	4930      	ldr	r1, [pc, #192]	; (80020e8 <main+0xfc8>)
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	f04f 0300 	mov.w	r3, #0
 8002030:	e9c1 2300 	strd	r2, r3, [r1]
		  AVG8=0;
 8002034:	492d      	ldr	r1, [pc, #180]	; (80020ec <main+0xfcc>)
 8002036:	f04f 0200 	mov.w	r2, #0
 800203a:	f04f 0300 	mov.w	r3, #0
 800203e:	e9c1 2300 	strd	r2, r3, [r1]
		  AVG9=0;
 8002042:	492b      	ldr	r1, [pc, #172]	; (80020f0 <main+0xfd0>)
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	e9c1 2300 	strd	r2, r3, [r1]
		  SD1=0;
 8002050:	4928      	ldr	r1, [pc, #160]	; (80020f4 <main+0xfd4>)
 8002052:	f04f 0200 	mov.w	r2, #0
 8002056:	f04f 0300 	mov.w	r3, #0
 800205a:	e9c1 2300 	strd	r2, r3, [r1]
		  SD2=0;
 800205e:	4926      	ldr	r1, [pc, #152]	; (80020f8 <main+0xfd8>)
 8002060:	f04f 0200 	mov.w	r2, #0
 8002064:	f04f 0300 	mov.w	r3, #0
 8002068:	e9c1 2300 	strd	r2, r3, [r1]
		  SD3=0;
 800206c:	4923      	ldr	r1, [pc, #140]	; (80020fc <main+0xfdc>)
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	e9c1 2300 	strd	r2, r3, [r1]
		  SD4=0;
 800207a:	4921      	ldr	r1, [pc, #132]	; (8002100 <main+0xfe0>)
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	e9c1 2300 	strd	r2, r3, [r1]
		  SD5=0;
 8002088:	491e      	ldr	r1, [pc, #120]	; (8002104 <main+0xfe4>)
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	f04f 0300 	mov.w	r3, #0
 8002092:	e9c1 2300 	strd	r2, r3, [r1]
		  SD6=0;
 8002096:	491c      	ldr	r1, [pc, #112]	; (8002108 <main+0xfe8>)
 8002098:	f04f 0200 	mov.w	r2, #0
 800209c:	f04f 0300 	mov.w	r3, #0
 80020a0:	e9c1 2300 	strd	r2, r3, [r1]
		  SD7=0;
 80020a4:	4919      	ldr	r1, [pc, #100]	; (800210c <main+0xfec>)
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	e9c1 2300 	strd	r2, r3, [r1]
		  SD8=0;
 80020b2:	4917      	ldr	r1, [pc, #92]	; (8002110 <main+0xff0>)
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	e9c1 2300 	strd	r2, r3, [r1]
		  SD9=0;
 80020c0:	4914      	ldr	r1, [pc, #80]	; (8002114 <main+0xff4>)
 80020c2:	f04f 0200 	mov.w	r2, #0
 80020c6:	f04f 0300 	mov.w	r3, #0
 80020ca:	e9c1 2300 	strd	r2, r3, [r1]
		if (FLAG_ADC == 1) {
 80020ce:	f7ff b83d 	b.w	800114c <main+0x2c>
 80020d2:	bf00      	nop
 80020d4:	200000a0 	.word	0x200000a0
 80020d8:	200000a8 	.word	0x200000a8
 80020dc:	200000b0 	.word	0x200000b0
 80020e0:	200000b8 	.word	0x200000b8
 80020e4:	200000c0 	.word	0x200000c0
 80020e8:	200000c8 	.word	0x200000c8
 80020ec:	200000d0 	.word	0x200000d0
 80020f0:	200000d8 	.word	0x200000d8
 80020f4:	200000e0 	.word	0x200000e0
 80020f8:	200000e8 	.word	0x200000e8
 80020fc:	200000f0 	.word	0x200000f0
 8002100:	200000f8 	.word	0x200000f8
 8002104:	20000100 	.word	0x20000100
 8002108:	20000108 	.word	0x20000108
 800210c:	20000110 	.word	0x20000110
 8002110:	20000118 	.word	0x20000118
 8002114:	20000120 	.word	0x20000120

08002118 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b094      	sub	sp, #80	; 0x50
 800211c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800211e:	f107 0320 	add.w	r3, r7, #32
 8002122:	2230      	movs	r2, #48	; 0x30
 8002124:	2100      	movs	r1, #0
 8002126:	4618      	mov	r0, r3
 8002128:	f003 f90c 	bl	8005344 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	2200      	movs	r2, #0
 8002132:	601a      	str	r2, [r3, #0]
 8002134:	605a      	str	r2, [r3, #4]
 8002136:	609a      	str	r2, [r3, #8]
 8002138:	60da      	str	r2, [r3, #12]
 800213a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	4b28      	ldr	r3, [pc, #160]	; (80021e4 <SystemClock_Config+0xcc>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	4a27      	ldr	r2, [pc, #156]	; (80021e4 <SystemClock_Config+0xcc>)
 8002146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214a:	6413      	str	r3, [r2, #64]	; 0x40
 800214c:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <SystemClock_Config+0xcc>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002158:	2300      	movs	r3, #0
 800215a:	607b      	str	r3, [r7, #4]
 800215c:	4b22      	ldr	r3, [pc, #136]	; (80021e8 <SystemClock_Config+0xd0>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a21      	ldr	r2, [pc, #132]	; (80021e8 <SystemClock_Config+0xd0>)
 8002162:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b1f      	ldr	r3, [pc, #124]	; (80021e8 <SystemClock_Config+0xd0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002174:	2301      	movs	r3, #1
 8002176:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002178:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800217c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800217e:	2302      	movs	r3, #2
 8002180:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002182:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002186:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002188:	2308      	movs	r3, #8
 800218a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800218c:	2354      	movs	r3, #84	; 0x54
 800218e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002190:	2302      	movs	r3, #2
 8002192:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002194:	2304      	movs	r3, #4
 8002196:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002198:	f107 0320 	add.w	r3, r7, #32
 800219c:	4618      	mov	r0, r3
 800219e:	f001 fc6f 	bl	8003a80 <HAL_RCC_OscConfig>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021a8:	f000 fb3c 	bl	8002824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021ac:	230f      	movs	r3, #15
 80021ae:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021b0:	2302      	movs	r3, #2
 80021b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021b4:	2300      	movs	r3, #0
 80021b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021bc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021c4:	f107 030c 	add.w	r3, r7, #12
 80021c8:	2102      	movs	r1, #2
 80021ca:	4618      	mov	r0, r3
 80021cc:	f001 fed0 	bl	8003f70 <HAL_RCC_ClockConfig>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80021d6:	f000 fb25 	bl	8002824 <Error_Handler>
  }
}
 80021da:	bf00      	nop
 80021dc:	3750      	adds	r7, #80	; 0x50
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40023800 	.word	0x40023800
 80021e8:	40007000 	.word	0x40007000

080021ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021f2:	463b      	mov	r3, r7
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80021fe:	4b59      	ldr	r3, [pc, #356]	; (8002364 <MX_ADC1_Init+0x178>)
 8002200:	4a59      	ldr	r2, [pc, #356]	; (8002368 <MX_ADC1_Init+0x17c>)
 8002202:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002204:	4b57      	ldr	r3, [pc, #348]	; (8002364 <MX_ADC1_Init+0x178>)
 8002206:	2200      	movs	r2, #0
 8002208:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800220a:	4b56      	ldr	r3, [pc, #344]	; (8002364 <MX_ADC1_Init+0x178>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8002210:	4b54      	ldr	r3, [pc, #336]	; (8002364 <MX_ADC1_Init+0x178>)
 8002212:	2201      	movs	r2, #1
 8002214:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002216:	4b53      	ldr	r3, [pc, #332]	; (8002364 <MX_ADC1_Init+0x178>)
 8002218:	2201      	movs	r2, #1
 800221a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800221c:	4b51      	ldr	r3, [pc, #324]	; (8002364 <MX_ADC1_Init+0x178>)
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002224:	4b4f      	ldr	r3, [pc, #316]	; (8002364 <MX_ADC1_Init+0x178>)
 8002226:	2200      	movs	r2, #0
 8002228:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800222a:	4b4e      	ldr	r3, [pc, #312]	; (8002364 <MX_ADC1_Init+0x178>)
 800222c:	4a4f      	ldr	r2, [pc, #316]	; (800236c <MX_ADC1_Init+0x180>)
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002230:	4b4c      	ldr	r3, [pc, #304]	; (8002364 <MX_ADC1_Init+0x178>)
 8002232:	2200      	movs	r2, #0
 8002234:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 9;
 8002236:	4b4b      	ldr	r3, [pc, #300]	; (8002364 <MX_ADC1_Init+0x178>)
 8002238:	2209      	movs	r2, #9
 800223a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800223c:	4b49      	ldr	r3, [pc, #292]	; (8002364 <MX_ADC1_Init+0x178>)
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002244:	4b47      	ldr	r3, [pc, #284]	; (8002364 <MX_ADC1_Init+0x178>)
 8002246:	2201      	movs	r2, #1
 8002248:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800224a:	4846      	ldr	r0, [pc, #280]	; (8002364 <MX_ADC1_Init+0x178>)
 800224c:	f000 fd50 	bl	8002cf0 <HAL_ADC_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8002256:	f000 fae5 	bl	8002824 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800225a:	2304      	movs	r3, #4
 800225c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800225e:	2301      	movs	r3, #1
 8002260:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002262:	2307      	movs	r3, #7
 8002264:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002266:	463b      	mov	r3, r7
 8002268:	4619      	mov	r1, r3
 800226a:	483e      	ldr	r0, [pc, #248]	; (8002364 <MX_ADC1_Init+0x178>)
 800226c:	f000 ff22 	bl	80030b4 <HAL_ADC_ConfigChannel>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8002276:	f000 fad5 	bl	8002824 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800227a:	2305      	movs	r3, #5
 800227c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800227e:	2302      	movs	r3, #2
 8002280:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002282:	463b      	mov	r3, r7
 8002284:	4619      	mov	r1, r3
 8002286:	4837      	ldr	r0, [pc, #220]	; (8002364 <MX_ADC1_Init+0x178>)
 8002288:	f000 ff14 	bl	80030b4 <HAL_ADC_ConfigChannel>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8002292:	f000 fac7 	bl	8002824 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002296:	2306      	movs	r3, #6
 8002298:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800229a:	2303      	movs	r3, #3
 800229c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800229e:	463b      	mov	r3, r7
 80022a0:	4619      	mov	r1, r3
 80022a2:	4830      	ldr	r0, [pc, #192]	; (8002364 <MX_ADC1_Init+0x178>)
 80022a4:	f000 ff06 	bl	80030b4 <HAL_ADC_ConfigChannel>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80022ae:	f000 fab9 	bl	8002824 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80022b2:	2307      	movs	r3, #7
 80022b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80022b6:	2304      	movs	r3, #4
 80022b8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022ba:	463b      	mov	r3, r7
 80022bc:	4619      	mov	r1, r3
 80022be:	4829      	ldr	r0, [pc, #164]	; (8002364 <MX_ADC1_Init+0x178>)
 80022c0:	f000 fef8 	bl	80030b4 <HAL_ADC_ConfigChannel>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80022ca:	f000 faab 	bl	8002824 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80022ce:	2308      	movs	r3, #8
 80022d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80022d2:	2305      	movs	r3, #5
 80022d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022d6:	463b      	mov	r3, r7
 80022d8:	4619      	mov	r1, r3
 80022da:	4822      	ldr	r0, [pc, #136]	; (8002364 <MX_ADC1_Init+0x178>)
 80022dc:	f000 feea 	bl	80030b4 <HAL_ADC_ConfigChannel>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80022e6:	f000 fa9d 	bl	8002824 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80022ea:	2309      	movs	r3, #9
 80022ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80022ee:	2306      	movs	r3, #6
 80022f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022f2:	463b      	mov	r3, r7
 80022f4:	4619      	mov	r1, r3
 80022f6:	481b      	ldr	r0, [pc, #108]	; (8002364 <MX_ADC1_Init+0x178>)
 80022f8:	f000 fedc 	bl	80030b4 <HAL_ADC_ConfigChannel>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 8002302:	f000 fa8f 	bl	8002824 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002306:	230c      	movs	r3, #12
 8002308:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800230a:	2307      	movs	r3, #7
 800230c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800230e:	463b      	mov	r3, r7
 8002310:	4619      	mov	r1, r3
 8002312:	4814      	ldr	r0, [pc, #80]	; (8002364 <MX_ADC1_Init+0x178>)
 8002314:	f000 fece 	bl	80030b4 <HAL_ADC_ConfigChannel>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 800231e:	f000 fa81 	bl	8002824 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8002322:	230e      	movs	r3, #14
 8002324:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8002326:	2308      	movs	r3, #8
 8002328:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800232a:	463b      	mov	r3, r7
 800232c:	4619      	mov	r1, r3
 800232e:	480d      	ldr	r0, [pc, #52]	; (8002364 <MX_ADC1_Init+0x178>)
 8002330:	f000 fec0 	bl	80030b4 <HAL_ADC_ConfigChannel>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800233a:	f000 fa73 	bl	8002824 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800233e:	230f      	movs	r3, #15
 8002340:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8002342:	2309      	movs	r3, #9
 8002344:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002346:	463b      	mov	r3, r7
 8002348:	4619      	mov	r1, r3
 800234a:	4806      	ldr	r0, [pc, #24]	; (8002364 <MX_ADC1_Init+0x178>)
 800234c:	f000 feb2 	bl	80030b4 <HAL_ADC_ConfigChannel>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 8002356:	f000 fa65 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800235a:	bf00      	nop
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	20000560 	.word	0x20000560
 8002368:	40012000 	.word	0x40012000
 800236c:	0f000001 	.word	0x0f000001

08002370 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002376:	f107 0308 	add.w	r3, r7, #8
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]
 8002380:	609a      	str	r2, [r3, #8]
 8002382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002384:	463b      	mov	r3, r7
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800238c:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <MX_TIM2_Init+0x94>)
 800238e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002392:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400;
 8002394:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <MX_TIM2_Init+0x94>)
 8002396:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800239a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <MX_TIM2_Init+0x94>)
 800239e:	2200      	movs	r2, #0
 80023a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 80023a2:	4b18      	ldr	r3, [pc, #96]	; (8002404 <MX_TIM2_Init+0x94>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a8:	4b16      	ldr	r3, [pc, #88]	; (8002404 <MX_TIM2_Init+0x94>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <MX_TIM2_Init+0x94>)
 80023b0:	2280      	movs	r2, #128	; 0x80
 80023b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023b4:	4813      	ldr	r0, [pc, #76]	; (8002404 <MX_TIM2_Init+0x94>)
 80023b6:	f001 ffd5 	bl	8004364 <HAL_TIM_Base_Init>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d001      	beq.n	80023c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80023c0:	f000 fa30 	bl	8002824 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023ca:	f107 0308 	add.w	r3, r7, #8
 80023ce:	4619      	mov	r1, r3
 80023d0:	480c      	ldr	r0, [pc, #48]	; (8002404 <MX_TIM2_Init+0x94>)
 80023d2:	f002 f9be 	bl	8004752 <HAL_TIM_ConfigClockSource>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80023dc:	f000 fa22 	bl	8002824 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e0:	2300      	movs	r3, #0
 80023e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023e8:	463b      	mov	r3, r7
 80023ea:	4619      	mov	r1, r3
 80023ec:	4805      	ldr	r0, [pc, #20]	; (8002404 <MX_TIM2_Init+0x94>)
 80023ee:	f002 fbd9 	bl	8004ba4 <HAL_TIMEx_MasterConfigSynchronization>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80023f8:	f000 fa14 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80023fc:	bf00      	nop
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20000adc 	.word	0x20000adc

08002408 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800240c:	4b11      	ldr	r3, [pc, #68]	; (8002454 <MX_USART1_UART_Init+0x4c>)
 800240e:	4a12      	ldr	r2, [pc, #72]	; (8002458 <MX_USART1_UART_Init+0x50>)
 8002410:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8002412:	4b10      	ldr	r3, [pc, #64]	; (8002454 <MX_USART1_UART_Init+0x4c>)
 8002414:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8002418:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800241a:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <MX_USART1_UART_Init+0x4c>)
 800241c:	2200      	movs	r2, #0
 800241e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <MX_USART1_UART_Init+0x4c>)
 8002422:	2200      	movs	r2, #0
 8002424:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002426:	4b0b      	ldr	r3, [pc, #44]	; (8002454 <MX_USART1_UART_Init+0x4c>)
 8002428:	2200      	movs	r2, #0
 800242a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800242c:	4b09      	ldr	r3, [pc, #36]	; (8002454 <MX_USART1_UART_Init+0x4c>)
 800242e:	220c      	movs	r2, #12
 8002430:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <MX_USART1_UART_Init+0x4c>)
 8002434:	2200      	movs	r2, #0
 8002436:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002438:	4b06      	ldr	r3, [pc, #24]	; (8002454 <MX_USART1_UART_Init+0x4c>)
 800243a:	2200      	movs	r2, #0
 800243c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800243e:	4805      	ldr	r0, [pc, #20]	; (8002454 <MX_USART1_UART_Init+0x4c>)
 8002440:	f002 fc40 	bl	8004cc4 <HAL_UART_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800244a:	f000 f9eb 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	20000738 	.word	0x20000738
 8002458:	40011000 	.word	0x40011000

0800245c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002460:	4b11      	ldr	r3, [pc, #68]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 8002462:	4a12      	ldr	r2, [pc, #72]	; (80024ac <MX_USART2_UART_Init+0x50>)
 8002464:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 8002468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800246c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800246e:	4b0e      	ldr	r3, [pc, #56]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002474:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 8002476:	2200      	movs	r2, #0
 8002478:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800247a:	4b0b      	ldr	r3, [pc, #44]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 8002482:	220c      	movs	r2, #12
 8002484:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002486:	4b08      	ldr	r3, [pc, #32]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 800248e:	2200      	movs	r2, #0
 8002490:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002492:	4805      	ldr	r0, [pc, #20]	; (80024a8 <MX_USART2_UART_Init+0x4c>)
 8002494:	f002 fc16 	bl	8004cc4 <HAL_UART_Init>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d001      	beq.n	80024a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800249e:	f000 f9c1 	bl	8002824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000cb4 	.word	0x20000cb4
 80024ac:	40004400 	.word	0x40004400

080024b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08c      	sub	sp, #48	; 0x30
 80024b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b6:	f107 031c 	add.w	r3, r7, #28
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
 80024c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	61bb      	str	r3, [r7, #24]
 80024ca:	4b54      	ldr	r3, [pc, #336]	; (800261c <MX_GPIO_Init+0x16c>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	4a53      	ldr	r2, [pc, #332]	; (800261c <MX_GPIO_Init+0x16c>)
 80024d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024d4:	6313      	str	r3, [r2, #48]	; 0x30
 80024d6:	4b51      	ldr	r3, [pc, #324]	; (800261c <MX_GPIO_Init+0x16c>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024de:	61bb      	str	r3, [r7, #24]
 80024e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	4b4d      	ldr	r3, [pc, #308]	; (800261c <MX_GPIO_Init+0x16c>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4a4c      	ldr	r2, [pc, #304]	; (800261c <MX_GPIO_Init+0x16c>)
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	6313      	str	r3, [r2, #48]	; 0x30
 80024f2:	4b4a      	ldr	r3, [pc, #296]	; (800261c <MX_GPIO_Init+0x16c>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f003 0304 	and.w	r3, r3, #4
 80024fa:	617b      	str	r3, [r7, #20]
 80024fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	4b46      	ldr	r3, [pc, #280]	; (800261c <MX_GPIO_Init+0x16c>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	4a45      	ldr	r2, [pc, #276]	; (800261c <MX_GPIO_Init+0x16c>)
 8002508:	f043 0301 	orr.w	r3, r3, #1
 800250c:	6313      	str	r3, [r2, #48]	; 0x30
 800250e:	4b43      	ldr	r3, [pc, #268]	; (800261c <MX_GPIO_Init+0x16c>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	4b3f      	ldr	r3, [pc, #252]	; (800261c <MX_GPIO_Init+0x16c>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	4a3e      	ldr	r2, [pc, #248]	; (800261c <MX_GPIO_Init+0x16c>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	6313      	str	r3, [r2, #48]	; 0x30
 800252a:	4b3c      	ldr	r3, [pc, #240]	; (800261c <MX_GPIO_Init+0x16c>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	4b38      	ldr	r3, [pc, #224]	; (800261c <MX_GPIO_Init+0x16c>)
 800253c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253e:	4a37      	ldr	r2, [pc, #220]	; (800261c <MX_GPIO_Init+0x16c>)
 8002540:	f043 0310 	orr.w	r3, r3, #16
 8002544:	6313      	str	r3, [r2, #48]	; 0x30
 8002546:	4b35      	ldr	r3, [pc, #212]	; (800261c <MX_GPIO_Init+0x16c>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	4b31      	ldr	r3, [pc, #196]	; (800261c <MX_GPIO_Init+0x16c>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a30      	ldr	r2, [pc, #192]	; (800261c <MX_GPIO_Init+0x16c>)
 800255c:	f043 0308 	orr.w	r3, r3, #8
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b2e      	ldr	r3, [pc, #184]	; (800261c <MX_GPIO_Init+0x16c>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0308 	and.w	r3, r3, #8
 800256a:	607b      	str	r3, [r7, #4]
 800256c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14
 800256e:	2200      	movs	r2, #0
 8002570:	f44f 4166 	mov.w	r1, #58880	; 0xe600
 8002574:	482a      	ldr	r0, [pc, #168]	; (8002620 <MX_GPIO_Init+0x170>)
 8002576:	f001 fa69 	bl	8003a4c <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_12, GPIO_PIN_RESET);
 800257a:	2200      	movs	r2, #0
 800257c:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8002580:	4828      	ldr	r0, [pc, #160]	; (8002624 <MX_GPIO_Init+0x174>)
 8002582:	f001 fa63 	bl	8003a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8002586:	2200      	movs	r2, #0
 8002588:	2118      	movs	r1, #24
 800258a:	4827      	ldr	r0, [pc, #156]	; (8002628 <MX_GPIO_Init+0x178>)
 800258c:	f001 fa5e 	bl	8003a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8002590:	2200      	movs	r2, #0
 8002592:	f44f 7140 	mov.w	r1, #768	; 0x300
 8002596:	4825      	ldr	r0, [pc, #148]	; (800262c <MX_GPIO_Init+0x17c>)
 8002598:	f001 fa58 	bl	8003a4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE9 PE10 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14
 800259c:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80025a0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025a2:	2301      	movs	r3, #1
 80025a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a6:	2300      	movs	r3, #0
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025aa:	2300      	movs	r3, #0
 80025ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025ae:	f107 031c 	add.w	r3, r7, #28
 80025b2:	4619      	mov	r1, r3
 80025b4:	481a      	ldr	r0, [pc, #104]	; (8002620 <MX_GPIO_Init+0x170>)
 80025b6:	f001 f8ad 	bl	8003714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80025ba:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80025be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025c0:	2301      	movs	r3, #1
 80025c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025cc:	f107 031c 	add.w	r3, r7, #28
 80025d0:	4619      	mov	r1, r3
 80025d2:	4814      	ldr	r0, [pc, #80]	; (8002624 <MX_GPIO_Init+0x174>)
 80025d4:	f001 f89e 	bl	8003714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80025d8:	2318      	movs	r3, #24
 80025da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025dc:	2301      	movs	r3, #1
 80025de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e4:	2300      	movs	r3, #0
 80025e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025e8:	f107 031c 	add.w	r3, r7, #28
 80025ec:	4619      	mov	r1, r3
 80025ee:	480e      	ldr	r0, [pc, #56]	; (8002628 <MX_GPIO_Init+0x178>)
 80025f0:	f001 f890 	bl	8003714 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025fa:	2301      	movs	r3, #1
 80025fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	2300      	movs	r3, #0
 8002604:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002606:	f107 031c 	add.w	r3, r7, #28
 800260a:	4619      	mov	r1, r3
 800260c:	4807      	ldr	r0, [pc, #28]	; (800262c <MX_GPIO_Init+0x17c>)
 800260e:	f001 f881 	bl	8003714 <HAL_GPIO_Init>

}
 8002612:	bf00      	nop
 8002614:	3730      	adds	r7, #48	; 0x30
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800
 8002620:	40021000 	.word	0x40021000
 8002624:	40020000 	.word	0x40020000
 8002628:	40020c00 	.word	0x40020c00
 800262c:	40020400 	.word	0x40020400

08002630 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void 	HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]




		SelectCh4();
 8002638:	f7fe fc2a 	bl	8000e90 <SelectCh4>
	  	  	HAL_ADC_Start(&hadc1);
 800263c:	486c      	ldr	r0, [pc, #432]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800263e:	f000 fb9b 	bl	8002d78 <HAL_ADC_Start>
	  	  	HAL_ADC_PollForConversion(&hadc1, 100);
 8002642:	2164      	movs	r1, #100	; 0x64
 8002644:	486a      	ldr	r0, [pc, #424]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002646:	f000 fc9c 	bl	8002f82 <HAL_ADC_PollForConversion>
	  	    ADC_VAL[indice]=HAL_ADC_GetValue(&hadc1);
 800264a:	4869      	ldr	r0, [pc, #420]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800264c:	f000 fd24 	bl	8003098 <HAL_ADC_GetValue>
 8002650:	4602      	mov	r2, r0
 8002652:	4b68      	ldr	r3, [pc, #416]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4611      	mov	r1, r2
 8002658:	4a67      	ldr	r2, [pc, #412]	; (80027f8 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800265a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	    HAL_ADC_Stop(&hadc1);
 800265e:	4864      	ldr	r0, [pc, #400]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002660:	f000 fc5c 	bl	8002f1c <HAL_ADC_Stop>

	  	  SelectCh5();
 8002664:	f7fe fc34 	bl	8000ed0 <SelectCh5>
	  	  	  	  	HAL_ADC_Start(&hadc1);
 8002668:	4861      	ldr	r0, [pc, #388]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800266a:	f000 fb85 	bl	8002d78 <HAL_ADC_Start>
	  	  	  	  	HAL_ADC_PollForConversion(&hadc1, 100);
 800266e:	2164      	movs	r1, #100	; 0x64
 8002670:	485f      	ldr	r0, [pc, #380]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002672:	f000 fc86 	bl	8002f82 <HAL_ADC_PollForConversion>
	  	  	  	    ADC_VAL2[indice]=HAL_ADC_GetValue(&hadc1);
 8002676:	485e      	ldr	r0, [pc, #376]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002678:	f000 fd0e 	bl	8003098 <HAL_ADC_GetValue>
 800267c:	4602      	mov	r2, r0
 800267e:	4b5d      	ldr	r3, [pc, #372]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4611      	mov	r1, r2
 8002684:	4a5d      	ldr	r2, [pc, #372]	; (80027fc <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002686:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	  	  	    HAL_ADC_Stop(&hadc1);
 800268a:	4859      	ldr	r0, [pc, #356]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800268c:	f000 fc46 	bl	8002f1c <HAL_ADC_Stop>
	  	  	  	SelectCh6();
 8002690:	f7fe fc3e 	bl	8000f10 <SelectCh6>
	  	  	  		  	  	HAL_ADC_Start(&hadc1);
 8002694:	4856      	ldr	r0, [pc, #344]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002696:	f000 fb6f 	bl	8002d78 <HAL_ADC_Start>
	  	  	  		  	  	HAL_ADC_PollForConversion(&hadc1, 100);
 800269a:	2164      	movs	r1, #100	; 0x64
 800269c:	4854      	ldr	r0, [pc, #336]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800269e:	f000 fc70 	bl	8002f82 <HAL_ADC_PollForConversion>
	  	  	  		  	    ADC_VAL3[indice]=HAL_ADC_GetValue(&hadc1);
 80026a2:	4853      	ldr	r0, [pc, #332]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80026a4:	f000 fcf8 	bl	8003098 <HAL_ADC_GetValue>
 80026a8:	4602      	mov	r2, r0
 80026aa:	4b52      	ldr	r3, [pc, #328]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4611      	mov	r1, r2
 80026b0:	4a53      	ldr	r2, [pc, #332]	; (8002800 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80026b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	  	  		  	    HAL_ADC_Stop(&hadc1);
 80026b6:	484e      	ldr	r0, [pc, #312]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80026b8:	f000 fc30 	bl	8002f1c <HAL_ADC_Stop>
	  	  	  		  SelectCh7();
 80026bc:	f7fe fc48 	bl	8000f50 <SelectCh7>
	  	  	  		  	  	  	HAL_ADC_Start(&hadc1);
 80026c0:	484b      	ldr	r0, [pc, #300]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80026c2:	f000 fb59 	bl	8002d78 <HAL_ADC_Start>
	  	  	  		  	  	  	HAL_ADC_PollForConversion(&hadc1, 100);
 80026c6:	2164      	movs	r1, #100	; 0x64
 80026c8:	4849      	ldr	r0, [pc, #292]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80026ca:	f000 fc5a 	bl	8002f82 <HAL_ADC_PollForConversion>
	  	  	  		  	  	    ADC_VAL4[indice]=HAL_ADC_GetValue(&hadc1);
 80026ce:	4848      	ldr	r0, [pc, #288]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80026d0:	f000 fce2 	bl	8003098 <HAL_ADC_GetValue>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4b47      	ldr	r3, [pc, #284]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4611      	mov	r1, r2
 80026dc:	4a49      	ldr	r2, [pc, #292]	; (8002804 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80026de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	  	  		  	  	    HAL_ADC_Stop(&hadc1);
 80026e2:	4843      	ldr	r0, [pc, #268]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80026e4:	f000 fc1a 	bl	8002f1c <HAL_ADC_Stop>
	  	  	  		  	SelectCh8();
 80026e8:	f7fe fc52 	bl	8000f90 <SelectCh8>
	  	  	  		  		  	  	HAL_ADC_Start(&hadc1);
 80026ec:	4840      	ldr	r0, [pc, #256]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80026ee:	f000 fb43 	bl	8002d78 <HAL_ADC_Start>
	  	  	  		  		  	  	HAL_ADC_PollForConversion(&hadc1, 100);
 80026f2:	2164      	movs	r1, #100	; 0x64
 80026f4:	483e      	ldr	r0, [pc, #248]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80026f6:	f000 fc44 	bl	8002f82 <HAL_ADC_PollForConversion>
	  	  	  		  		  	    ADC_VAL5[indice]=HAL_ADC_GetValue(&hadc1);
 80026fa:	483d      	ldr	r0, [pc, #244]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80026fc:	f000 fccc 	bl	8003098 <HAL_ADC_GetValue>
 8002700:	4602      	mov	r2, r0
 8002702:	4b3c      	ldr	r3, [pc, #240]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4611      	mov	r1, r2
 8002708:	4a3f      	ldr	r2, [pc, #252]	; (8002808 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800270a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	  	  		  		  	    HAL_ADC_Stop(&hadc1);
 800270e:	4838      	ldr	r0, [pc, #224]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002710:	f000 fc04 	bl	8002f1c <HAL_ADC_Stop>
	  	  	  		  		SelectCh9();
 8002714:	f7fe fc5c 	bl	8000fd0 <SelectCh9>
	  	  	  		  			  	  	HAL_ADC_Start(&hadc1);
 8002718:	4835      	ldr	r0, [pc, #212]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800271a:	f000 fb2d 	bl	8002d78 <HAL_ADC_Start>
	  	  	  		  			  	  	HAL_ADC_PollForConversion(&hadc1, 100);
 800271e:	2164      	movs	r1, #100	; 0x64
 8002720:	4833      	ldr	r0, [pc, #204]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002722:	f000 fc2e 	bl	8002f82 <HAL_ADC_PollForConversion>
	  	  	  		  			  	    ADC_VAL6[indice]=HAL_ADC_GetValue(&hadc1);
 8002726:	4832      	ldr	r0, [pc, #200]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002728:	f000 fcb6 	bl	8003098 <HAL_ADC_GetValue>
 800272c:	4602      	mov	r2, r0
 800272e:	4b31      	ldr	r3, [pc, #196]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4611      	mov	r1, r2
 8002734:	4a35      	ldr	r2, [pc, #212]	; (800280c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8002736:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	  	  		  			  	    HAL_ADC_Stop(&hadc1);
 800273a:	482d      	ldr	r0, [pc, #180]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800273c:	f000 fbee 	bl	8002f1c <HAL_ADC_Stop>
	  	  	  		  			SelectCh12();
 8002740:	f7fe fc66 	bl	8001010 <SelectCh12>
	  	  	  		  				  	  	HAL_ADC_Start(&hadc1);
 8002744:	482a      	ldr	r0, [pc, #168]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002746:	f000 fb17 	bl	8002d78 <HAL_ADC_Start>
	  	  	  		  				  	  	HAL_ADC_PollForConversion(&hadc1, 100);
 800274a:	2164      	movs	r1, #100	; 0x64
 800274c:	4828      	ldr	r0, [pc, #160]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800274e:	f000 fc18 	bl	8002f82 <HAL_ADC_PollForConversion>
	  	  	  		  				  	    ADC_VAL7[indice]=HAL_ADC_GetValue(&hadc1);
 8002752:	4827      	ldr	r0, [pc, #156]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002754:	f000 fca0 	bl	8003098 <HAL_ADC_GetValue>
 8002758:	4602      	mov	r2, r0
 800275a:	4b26      	ldr	r3, [pc, #152]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4611      	mov	r1, r2
 8002760:	4a2b      	ldr	r2, [pc, #172]	; (8002810 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8002762:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	  	  		  				  	    HAL_ADC_Stop(&hadc1);
 8002766:	4822      	ldr	r0, [pc, #136]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002768:	f000 fbd8 	bl	8002f1c <HAL_ADC_Stop>
	  	  	  		  				SelectCh14();
 800276c:	f7fe fc70 	bl	8001050 <SelectCh14>
	  	  	  		  					  	  	HAL_ADC_Start(&hadc1);
 8002770:	481f      	ldr	r0, [pc, #124]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002772:	f000 fb01 	bl	8002d78 <HAL_ADC_Start>
	  	  	  		  					  	  	HAL_ADC_PollForConversion(&hadc1, 100);
 8002776:	2164      	movs	r1, #100	; 0x64
 8002778:	481d      	ldr	r0, [pc, #116]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800277a:	f000 fc02 	bl	8002f82 <HAL_ADC_PollForConversion>
	  	  	  		  					  	    ADC_VAL8[indice]=HAL_ADC_GetValue(&hadc1);
 800277e:	481c      	ldr	r0, [pc, #112]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002780:	f000 fc8a 	bl	8003098 <HAL_ADC_GetValue>
 8002784:	4602      	mov	r2, r0
 8002786:	4b1b      	ldr	r3, [pc, #108]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4611      	mov	r1, r2
 800278c:	4a21      	ldr	r2, [pc, #132]	; (8002814 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800278e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	  	  		  					  	    HAL_ADC_Stop(&hadc1);
 8002792:	4817      	ldr	r0, [pc, #92]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002794:	f000 fbc2 	bl	8002f1c <HAL_ADC_Stop>


	  	  	  		  					SelectCh15();
 8002798:	f7fe fc7a 	bl	8001090 <SelectCh15>
	  	  	  		  						  	  	HAL_ADC_Start(&hadc1);
 800279c:	4814      	ldr	r0, [pc, #80]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 800279e:	f000 faeb 	bl	8002d78 <HAL_ADC_Start>
	  	  	  		  						  	  	HAL_ADC_PollForConversion(&hadc1, 100);
 80027a2:	2164      	movs	r1, #100	; 0x64
 80027a4:	4812      	ldr	r0, [pc, #72]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80027a6:	f000 fbec 	bl	8002f82 <HAL_ADC_PollForConversion>
	  	  	  		  						  	    ADC_VAL9[indice]=HAL_ADC_GetValue(&hadc1);
 80027aa:	4811      	ldr	r0, [pc, #68]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80027ac:	f000 fc74 	bl	8003098 <HAL_ADC_GetValue>
 80027b0:	4602      	mov	r2, r0
 80027b2:	4b10      	ldr	r3, [pc, #64]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4611      	mov	r1, r2
 80027b8:	4a17      	ldr	r2, [pc, #92]	; (8002818 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80027ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  	  	  		  						  	    HAL_ADC_Stop(&hadc1);
 80027be:	480c      	ldr	r0, [pc, #48]	; (80027f0 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80027c0:	f000 fbac 	bl	8002f1c <HAL_ADC_Stop>





	  	    indice++;
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	3301      	adds	r3, #1
 80027ca:	4a0a      	ldr	r2, [pc, #40]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80027cc:	6013      	str	r3, [r2, #0]
	  	    if (indice>=buffer){
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b63      	cmp	r3, #99	; 0x63
 80027d4:	dd08      	ble.n	80027e8 <HAL_TIM_PeriodElapsedCallback+0x1b8>
	  	    	HAL_TIM_Base_Stop_IT(&htim2);
 80027d6:	4811      	ldr	r0, [pc, #68]	; (800281c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80027d8:	f001 fe84 	bl	80044e4 <HAL_TIM_Base_Stop_IT>
	  	    	FLAG_ADC=1;
 80027dc:	4b10      	ldr	r3, [pc, #64]	; (8002820 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]
 	  	    		indice=0;
 80027e2:	4b04      	ldr	r3, [pc, #16]	; (80027f4 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
	  	    }
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	20000560 	.word	0x20000560
 80027f4:	20000170 	.word	0x20000170
 80027f8:	2000090c 	.word	0x2000090c
 80027fc:	20000b24 	.word	0x20000b24
 8002800:	200005a8 	.word	0x200005a8
 8002804:	20001038 	.word	0x20001038
 8002808:	2000077c 	.word	0x2000077c
 800280c:	20000390 	.word	0x20000390
 8002810:	20000e88 	.word	0x20000e88
 8002814:	20000cf8 	.word	0x20000cf8
 8002818:	200001c0 	.word	0x200001c0
 800281c:	20000adc 	.word	0x20000adc
 8002820:	20000094 	.word	0x20000094

08002824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002828:	b672      	cpsid	i
}
 800282a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800282c:	e7fe      	b.n	800282c <Error_Handler+0x8>
	...

08002830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	607b      	str	r3, [r7, #4]
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <HAL_MspInit+0x4c>)
 800283c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283e:	4a0f      	ldr	r2, [pc, #60]	; (800287c <HAL_MspInit+0x4c>)
 8002840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002844:	6453      	str	r3, [r2, #68]	; 0x44
 8002846:	4b0d      	ldr	r3, [pc, #52]	; (800287c <HAL_MspInit+0x4c>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284e:	607b      	str	r3, [r7, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002852:	2300      	movs	r3, #0
 8002854:	603b      	str	r3, [r7, #0]
 8002856:	4b09      	ldr	r3, [pc, #36]	; (800287c <HAL_MspInit+0x4c>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	4a08      	ldr	r2, [pc, #32]	; (800287c <HAL_MspInit+0x4c>)
 800285c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002860:	6413      	str	r3, [r2, #64]	; 0x40
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_MspInit+0x4c>)
 8002864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800

08002880 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08c      	sub	sp, #48	; 0x30
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002888:	f107 031c 	add.w	r3, r7, #28
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a31      	ldr	r2, [pc, #196]	; (8002964 <HAL_ADC_MspInit+0xe4>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d15b      	bne.n	800295a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	4b30      	ldr	r3, [pc, #192]	; (8002968 <HAL_ADC_MspInit+0xe8>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	4a2f      	ldr	r2, [pc, #188]	; (8002968 <HAL_ADC_MspInit+0xe8>)
 80028ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028b0:	6453      	str	r3, [r2, #68]	; 0x44
 80028b2:	4b2d      	ldr	r3, [pc, #180]	; (8002968 <HAL_ADC_MspInit+0xe8>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ba:	61bb      	str	r3, [r7, #24]
 80028bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	617b      	str	r3, [r7, #20]
 80028c2:	4b29      	ldr	r3, [pc, #164]	; (8002968 <HAL_ADC_MspInit+0xe8>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	4a28      	ldr	r2, [pc, #160]	; (8002968 <HAL_ADC_MspInit+0xe8>)
 80028c8:	f043 0304 	orr.w	r3, r3, #4
 80028cc:	6313      	str	r3, [r2, #48]	; 0x30
 80028ce:	4b26      	ldr	r3, [pc, #152]	; (8002968 <HAL_ADC_MspInit+0xe8>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f003 0304 	and.w	r3, r3, #4
 80028d6:	617b      	str	r3, [r7, #20]
 80028d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
 80028de:	4b22      	ldr	r3, [pc, #136]	; (8002968 <HAL_ADC_MspInit+0xe8>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a21      	ldr	r2, [pc, #132]	; (8002968 <HAL_ADC_MspInit+0xe8>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b1f      	ldr	r3, [pc, #124]	; (8002968 <HAL_ADC_MspInit+0xe8>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	613b      	str	r3, [r7, #16]
 80028f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	60fb      	str	r3, [r7, #12]
 80028fa:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <HAL_ADC_MspInit+0xe8>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a1a      	ldr	r2, [pc, #104]	; (8002968 <HAL_ADC_MspInit+0xe8>)
 8002900:	f043 0302 	orr.w	r3, r3, #2
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b18      	ldr	r3, [pc, #96]	; (8002968 <HAL_ADC_MspInit+0xe8>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8002912:	2334      	movs	r3, #52	; 0x34
 8002914:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002916:	2303      	movs	r3, #3
 8002918:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291a:	2300      	movs	r3, #0
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800291e:	f107 031c 	add.w	r3, r7, #28
 8002922:	4619      	mov	r1, r3
 8002924:	4811      	ldr	r0, [pc, #68]	; (800296c <HAL_ADC_MspInit+0xec>)
 8002926:	f000 fef5 	bl	8003714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800292a:	23f0      	movs	r3, #240	; 0xf0
 800292c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800292e:	2303      	movs	r3, #3
 8002930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002936:	f107 031c 	add.w	r3, r7, #28
 800293a:	4619      	mov	r1, r3
 800293c:	480c      	ldr	r0, [pc, #48]	; (8002970 <HAL_ADC_MspInit+0xf0>)
 800293e:	f000 fee9 	bl	8003714 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002942:	2303      	movs	r3, #3
 8002944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002946:	2303      	movs	r3, #3
 8002948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800294e:	f107 031c 	add.w	r3, r7, #28
 8002952:	4619      	mov	r1, r3
 8002954:	4807      	ldr	r0, [pc, #28]	; (8002974 <HAL_ADC_MspInit+0xf4>)
 8002956:	f000 fedd 	bl	8003714 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800295a:	bf00      	nop
 800295c:	3730      	adds	r7, #48	; 0x30
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40012000 	.word	0x40012000
 8002968:	40023800 	.word	0x40023800
 800296c:	40020800 	.word	0x40020800
 8002970:	40020000 	.word	0x40020000
 8002974:	40020400 	.word	0x40020400

08002978 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002988:	d115      	bne.n	80029b6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
 800298e:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <HAL_TIM_Base_MspInit+0x48>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	4a0b      	ldr	r2, [pc, #44]	; (80029c0 <HAL_TIM_Base_MspInit+0x48>)
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	6413      	str	r3, [r2, #64]	; 0x40
 800299a:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <HAL_TIM_Base_MspInit+0x48>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2100      	movs	r1, #0
 80029aa:	201c      	movs	r0, #28
 80029ac:	f000 fe7b 	bl	80036a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80029b0:	201c      	movs	r0, #28
 80029b2:	f000 fe94 	bl	80036de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023800 	.word	0x40023800

080029c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08c      	sub	sp, #48	; 0x30
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029cc:	f107 031c 	add.w	r3, r7, #28
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a32      	ldr	r2, [pc, #200]	; (8002aac <HAL_UART_MspInit+0xe8>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d12d      	bne.n	8002a42 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	4b31      	ldr	r3, [pc, #196]	; (8002ab0 <HAL_UART_MspInit+0xec>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	4a30      	ldr	r2, [pc, #192]	; (8002ab0 <HAL_UART_MspInit+0xec>)
 80029f0:	f043 0310 	orr.w	r3, r3, #16
 80029f4:	6453      	str	r3, [r2, #68]	; 0x44
 80029f6:	4b2e      	ldr	r3, [pc, #184]	; (8002ab0 <HAL_UART_MspInit+0xec>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	f003 0310 	and.w	r3, r3, #16
 80029fe:	61bb      	str	r3, [r7, #24]
 8002a00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a02:	2300      	movs	r3, #0
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	4b2a      	ldr	r3, [pc, #168]	; (8002ab0 <HAL_UART_MspInit+0xec>)
 8002a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0a:	4a29      	ldr	r2, [pc, #164]	; (8002ab0 <HAL_UART_MspInit+0xec>)
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	6313      	str	r3, [r2, #48]	; 0x30
 8002a12:	4b27      	ldr	r3, [pc, #156]	; (8002ab0 <HAL_UART_MspInit+0xec>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	617b      	str	r3, [r7, #20]
 8002a1c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002a1e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a24:	2302      	movs	r3, #2
 8002a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002a30:	2307      	movs	r3, #7
 8002a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a34:	f107 031c 	add.w	r3, r7, #28
 8002a38:	4619      	mov	r1, r3
 8002a3a:	481e      	ldr	r0, [pc, #120]	; (8002ab4 <HAL_UART_MspInit+0xf0>)
 8002a3c:	f000 fe6a 	bl	8003714 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a40:	e030      	b.n	8002aa4 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a1c      	ldr	r2, [pc, #112]	; (8002ab8 <HAL_UART_MspInit+0xf4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d12b      	bne.n	8002aa4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	4b17      	ldr	r3, [pc, #92]	; (8002ab0 <HAL_UART_MspInit+0xec>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	4a16      	ldr	r2, [pc, #88]	; (8002ab0 <HAL_UART_MspInit+0xec>)
 8002a56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5c:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <HAL_UART_MspInit+0xec>)
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a64:	613b      	str	r3, [r7, #16]
 8002a66:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	4b10      	ldr	r3, [pc, #64]	; (8002ab0 <HAL_UART_MspInit+0xec>)
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a70:	4a0f      	ldr	r2, [pc, #60]	; (8002ab0 <HAL_UART_MspInit+0xec>)
 8002a72:	f043 0308 	orr.w	r3, r3, #8
 8002a76:	6313      	str	r3, [r2, #48]	; 0x30
 8002a78:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <HAL_UART_MspInit+0xec>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002a84:	2360      	movs	r3, #96	; 0x60
 8002a86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a90:	2303      	movs	r3, #3
 8002a92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a94:	2307      	movs	r3, #7
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a98:	f107 031c 	add.w	r3, r7, #28
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4807      	ldr	r0, [pc, #28]	; (8002abc <HAL_UART_MspInit+0xf8>)
 8002aa0:	f000 fe38 	bl	8003714 <HAL_GPIO_Init>
}
 8002aa4:	bf00      	nop
 8002aa6:	3730      	adds	r7, #48	; 0x30
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40011000 	.word	0x40011000
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	40020000 	.word	0x40020000
 8002ab8:	40004400 	.word	0x40004400
 8002abc:	40020c00 	.word	0x40020c00

08002ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ac4:	e7fe      	b.n	8002ac4 <NMI_Handler+0x4>

08002ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aca:	e7fe      	b.n	8002aca <HardFault_Handler+0x4>

08002acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ad0:	e7fe      	b.n	8002ad0 <MemManage_Handler+0x4>

08002ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ad6:	e7fe      	b.n	8002ad6 <BusFault_Handler+0x4>

08002ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002adc:	e7fe      	b.n	8002adc <UsageFault_Handler+0x4>

08002ade <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002afa:	b480      	push	{r7}
 8002afc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b0c:	f000 f8d0 	bl	8002cb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b10:	bf00      	nop
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b18:	4802      	ldr	r0, [pc, #8]	; (8002b24 <TIM2_IRQHandler+0x10>)
 8002b1a:	f001 fd12 	bl	8004542 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b1e:	bf00      	nop
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	20000adc 	.word	0x20000adc

08002b28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b30:	4a14      	ldr	r2, [pc, #80]	; (8002b84 <_sbrk+0x5c>)
 8002b32:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <_sbrk+0x60>)
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b3c:	4b13      	ldr	r3, [pc, #76]	; (8002b8c <_sbrk+0x64>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d102      	bne.n	8002b4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b44:	4b11      	ldr	r3, [pc, #68]	; (8002b8c <_sbrk+0x64>)
 8002b46:	4a12      	ldr	r2, [pc, #72]	; (8002b90 <_sbrk+0x68>)
 8002b48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b4a:	4b10      	ldr	r3, [pc, #64]	; (8002b8c <_sbrk+0x64>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4413      	add	r3, r2
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d207      	bcs.n	8002b68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b58:	f002 fbca 	bl	80052f0 <__errno>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	220c      	movs	r2, #12
 8002b60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
 8002b66:	e009      	b.n	8002b7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b68:	4b08      	ldr	r3, [pc, #32]	; (8002b8c <_sbrk+0x64>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b6e:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <_sbrk+0x64>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4413      	add	r3, r2
 8002b76:	4a05      	ldr	r2, [pc, #20]	; (8002b8c <_sbrk+0x64>)
 8002b78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	20020000 	.word	0x20020000
 8002b88:	00000400 	.word	0x00000400
 8002b8c:	20000174 	.word	0x20000174
 8002b90:	200011e0 	.word	0x200011e0

08002b94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <SystemInit+0x20>)
 8002b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9e:	4a05      	ldr	r2, [pc, #20]	; (8002bb4 <SystemInit+0x20>)
 8002ba0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ba4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ba8:	bf00      	nop
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	e000ed00 	.word	0xe000ed00

08002bb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002bb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bf0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002bbc:	480d      	ldr	r0, [pc, #52]	; (8002bf4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002bbe:	490e      	ldr	r1, [pc, #56]	; (8002bf8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002bc0:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bc4:	e002      	b.n	8002bcc <LoopCopyDataInit>

08002bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bca:	3304      	adds	r3, #4

08002bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bd0:	d3f9      	bcc.n	8002bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bd2:	4a0b      	ldr	r2, [pc, #44]	; (8002c00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002bd4:	4c0b      	ldr	r4, [pc, #44]	; (8002c04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bd8:	e001      	b.n	8002bde <LoopFillZerobss>

08002bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bdc:	3204      	adds	r2, #4

08002bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002be0:	d3fb      	bcc.n	8002bda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002be2:	f7ff ffd7 	bl	8002b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002be6:	f002 fb89 	bl	80052fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002bea:	f7fe fa99 	bl	8001120 <main>
  bx  lr    
 8002bee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002bf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002bf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002bf8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002bfc:	08006c78 	.word	0x08006c78
  ldr r2, =_sbss
 8002c00:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002c04:	200011dc 	.word	0x200011dc

08002c08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c08:	e7fe      	b.n	8002c08 <ADC_IRQHandler>
	...

08002c0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c10:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <HAL_Init+0x40>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0d      	ldr	r2, [pc, #52]	; (8002c4c <HAL_Init+0x40>)
 8002c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c1c:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <HAL_Init+0x40>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <HAL_Init+0x40>)
 8002c22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c28:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <HAL_Init+0x40>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a07      	ldr	r2, [pc, #28]	; (8002c4c <HAL_Init+0x40>)
 8002c2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c34:	2003      	movs	r0, #3
 8002c36:	f000 fd2b 	bl	8003690 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c3a:	200f      	movs	r0, #15
 8002c3c:	f000 f808 	bl	8002c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c40:	f7ff fdf6 	bl	8002830 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023c00 	.word	0x40023c00

08002c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c58:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_InitTick+0x54>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <HAL_InitTick+0x58>)
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	4619      	mov	r1, r3
 8002c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fd43 	bl	80036fa <HAL_SYSTICK_Config>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e00e      	b.n	8002c9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b0f      	cmp	r3, #15
 8002c82:	d80a      	bhi.n	8002c9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c84:	2200      	movs	r2, #0
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	f04f 30ff 	mov.w	r0, #4294967295
 8002c8c:	f000 fd0b 	bl	80036a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c90:	4a06      	ldr	r2, [pc, #24]	; (8002cac <HAL_InitTick+0x5c>)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
 8002c98:	e000      	b.n	8002c9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	20000008 	.word	0x20000008
 8002cac:	20000004 	.word	0x20000004

08002cb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cb4:	4b06      	ldr	r3, [pc, #24]	; (8002cd0 <HAL_IncTick+0x20>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <HAL_IncTick+0x24>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	4a04      	ldr	r2, [pc, #16]	; (8002cd4 <HAL_IncTick+0x24>)
 8002cc2:	6013      	str	r3, [r2, #0]
}
 8002cc4:	bf00      	nop
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	20000008 	.word	0x20000008
 8002cd4:	200011c8 	.word	0x200011c8

08002cd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  return uwTick;
 8002cdc:	4b03      	ldr	r3, [pc, #12]	; (8002cec <HAL_GetTick+0x14>)
 8002cde:	681b      	ldr	r3, [r3, #0]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	200011c8 	.word	0x200011c8

08002cf0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e033      	b.n	8002d6e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7ff fdb6 	bl	8002880 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f003 0310 	and.w	r3, r3, #16
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d118      	bne.n	8002d60 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d32:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d36:	f023 0302 	bic.w	r3, r3, #2
 8002d3a:	f043 0202 	orr.w	r2, r3, #2
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fad8 	bl	80032f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f023 0303 	bic.w	r3, r3, #3
 8002d56:	f043 0201 	orr.w	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	641a      	str	r2, [r3, #64]	; 0x40
 8002d5e:	e001      	b.n	8002d64 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
	...

08002d78 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d101      	bne.n	8002d92 <HAL_ADC_Start+0x1a>
 8002d8e:	2302      	movs	r3, #2
 8002d90:	e0b2      	b.n	8002ef8 <HAL_ADC_Start+0x180>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2201      	movs	r2, #1
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d018      	beq.n	8002dda <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689a      	ldr	r2, [r3, #8]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002db8:	4b52      	ldr	r3, [pc, #328]	; (8002f04 <HAL_ADC_Start+0x18c>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a52      	ldr	r2, [pc, #328]	; (8002f08 <HAL_ADC_Start+0x190>)
 8002dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc2:	0c9a      	lsrs	r2, r3, #18
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	4413      	add	r3, r2
 8002dca:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002dcc:	e002      	b.n	8002dd4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f9      	bne.n	8002dce <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d17a      	bne.n	8002ede <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002df0:	f023 0301 	bic.w	r3, r3, #1
 8002df4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d007      	beq.n	8002e1a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e26:	d106      	bne.n	8002e36 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2c:	f023 0206 	bic.w	r2, r3, #6
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	645a      	str	r2, [r3, #68]	; 0x44
 8002e34:	e002      	b.n	8002e3c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e44:	4b31      	ldr	r3, [pc, #196]	; (8002f0c <HAL_ADC_Start+0x194>)
 8002e46:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002e50:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 031f 	and.w	r3, r3, #31
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d12a      	bne.n	8002eb4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a2b      	ldr	r2, [pc, #172]	; (8002f10 <HAL_ADC_Start+0x198>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d015      	beq.n	8002e94 <HAL_ADC_Start+0x11c>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a29      	ldr	r2, [pc, #164]	; (8002f14 <HAL_ADC_Start+0x19c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d105      	bne.n	8002e7e <HAL_ADC_Start+0x106>
 8002e72:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <HAL_ADC_Start+0x194>)
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 031f 	and.w	r3, r3, #31
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a25      	ldr	r2, [pc, #148]	; (8002f18 <HAL_ADC_Start+0x1a0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d136      	bne.n	8002ef6 <HAL_ADC_Start+0x17e>
 8002e88:	4b20      	ldr	r3, [pc, #128]	; (8002f0c <HAL_ADC_Start+0x194>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f003 0310 	and.w	r3, r3, #16
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d130      	bne.n	8002ef6 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d129      	bne.n	8002ef6 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002eb0:	609a      	str	r2, [r3, #8]
 8002eb2:	e020      	b.n	8002ef6 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a15      	ldr	r2, [pc, #84]	; (8002f10 <HAL_ADC_Start+0x198>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d11b      	bne.n	8002ef6 <HAL_ADC_Start+0x17e>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d114      	bne.n	8002ef6 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689a      	ldr	r2, [r3, #8]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002eda:	609a      	str	r2, [r3, #8]
 8002edc:	e00b      	b.n	8002ef6 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee2:	f043 0210 	orr.w	r2, r3, #16
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eee:	f043 0201 	orr.w	r2, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3714      	adds	r7, #20
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	20000000 	.word	0x20000000
 8002f08:	431bde83 	.word	0x431bde83
 8002f0c:	40012300 	.word	0x40012300
 8002f10:	40012000 	.word	0x40012000
 8002f14:	40012100 	.word	0x40012100
 8002f18:	40012200 	.word	0x40012200

08002f1c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_ADC_Stop+0x16>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e021      	b.n	8002f76 <HAL_ADC_Stop+0x5a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0201 	bic.w	r2, r2, #1
 8002f48:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d109      	bne.n	8002f6c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f60:	f023 0301 	bic.w	r3, r3, #1
 8002f64:	f043 0201 	orr.w	r2, r3, #1
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9e:	d113      	bne.n	8002fc8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fae:	d10b      	bne.n	8002fc8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	f043 0220 	orr.w	r2, r3, #32
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e063      	b.n	8003090 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002fc8:	f7ff fe86 	bl	8002cd8 <HAL_GetTick>
 8002fcc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002fce:	e021      	b.n	8003014 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd6:	d01d      	beq.n	8003014 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d007      	beq.n	8002fee <HAL_ADC_PollForConversion+0x6c>
 8002fde:	f7ff fe7b 	bl	8002cd8 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d212      	bcs.n	8003014 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0302 	and.w	r3, r3, #2
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d00b      	beq.n	8003014 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	f043 0204 	orr.w	r2, r3, #4
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e03d      	b.n	8003090 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b02      	cmp	r3, #2
 8003020:	d1d6      	bne.n	8002fd0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f06f 0212 	mvn.w	r2, #18
 800302a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d123      	bne.n	800308e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800304a:	2b00      	cmp	r3, #0
 800304c:	d11f      	bne.n	800308e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003054:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003058:	2b00      	cmp	r3, #0
 800305a:	d006      	beq.n	800306a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003066:	2b00      	cmp	r3, #0
 8003068:	d111      	bne.n	800308e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d105      	bne.n	800308e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f043 0201 	orr.w	r2, r3, #1
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3710      	adds	r7, #16
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
	...

080030b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x1c>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e105      	b.n	80032dc <HAL_ADC_ConfigChannel+0x228>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b09      	cmp	r3, #9
 80030de:	d925      	bls.n	800312c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68d9      	ldr	r1, [r3, #12]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	461a      	mov	r2, r3
 80030ee:	4613      	mov	r3, r2
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	4413      	add	r3, r2
 80030f4:	3b1e      	subs	r3, #30
 80030f6:	2207      	movs	r2, #7
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43da      	mvns	r2, r3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	400a      	ands	r2, r1
 8003104:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68d9      	ldr	r1, [r3, #12]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	b29b      	uxth	r3, r3
 8003116:	4618      	mov	r0, r3
 8003118:	4603      	mov	r3, r0
 800311a:	005b      	lsls	r3, r3, #1
 800311c:	4403      	add	r3, r0
 800311e:	3b1e      	subs	r3, #30
 8003120:	409a      	lsls	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	60da      	str	r2, [r3, #12]
 800312a:	e022      	b.n	8003172 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	6919      	ldr	r1, [r3, #16]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	b29b      	uxth	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	4613      	mov	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	4413      	add	r3, r2
 8003140:	2207      	movs	r2, #7
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43da      	mvns	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	400a      	ands	r2, r1
 800314e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6919      	ldr	r1, [r3, #16]
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	b29b      	uxth	r3, r3
 8003160:	4618      	mov	r0, r3
 8003162:	4603      	mov	r3, r0
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	4403      	add	r3, r0
 8003168:	409a      	lsls	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b06      	cmp	r3, #6
 8003178:	d824      	bhi.n	80031c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	3b05      	subs	r3, #5
 800318c:	221f      	movs	r2, #31
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43da      	mvns	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	400a      	ands	r2, r1
 800319a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	4618      	mov	r0, r3
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	4613      	mov	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	3b05      	subs	r3, #5
 80031b6:	fa00 f203 	lsl.w	r2, r0, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	635a      	str	r2, [r3, #52]	; 0x34
 80031c2:	e04c      	b.n	800325e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	2b0c      	cmp	r3, #12
 80031ca:	d824      	bhi.n	8003216 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	3b23      	subs	r3, #35	; 0x23
 80031de:	221f      	movs	r2, #31
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	43da      	mvns	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	400a      	ands	r2, r1
 80031ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	4618      	mov	r0, r3
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685a      	ldr	r2, [r3, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	4413      	add	r3, r2
 8003206:	3b23      	subs	r3, #35	; 0x23
 8003208:	fa00 f203 	lsl.w	r2, r0, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	430a      	orrs	r2, r1
 8003212:	631a      	str	r2, [r3, #48]	; 0x30
 8003214:	e023      	b.n	800325e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	3b41      	subs	r3, #65	; 0x41
 8003228:	221f      	movs	r2, #31
 800322a:	fa02 f303 	lsl.w	r3, r2, r3
 800322e:	43da      	mvns	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	400a      	ands	r2, r1
 8003236:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	b29b      	uxth	r3, r3
 8003244:	4618      	mov	r0, r3
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	685a      	ldr	r2, [r3, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	3b41      	subs	r3, #65	; 0x41
 8003252:	fa00 f203 	lsl.w	r2, r0, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800325e:	4b22      	ldr	r3, [pc, #136]	; (80032e8 <HAL_ADC_ConfigChannel+0x234>)
 8003260:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a21      	ldr	r2, [pc, #132]	; (80032ec <HAL_ADC_ConfigChannel+0x238>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d109      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x1cc>
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b12      	cmp	r3, #18
 8003272:	d105      	bne.n	8003280 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a19      	ldr	r2, [pc, #100]	; (80032ec <HAL_ADC_ConfigChannel+0x238>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d123      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x21e>
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b10      	cmp	r3, #16
 8003290:	d003      	beq.n	800329a <HAL_ADC_ConfigChannel+0x1e6>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b11      	cmp	r3, #17
 8003298:	d11b      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b10      	cmp	r3, #16
 80032ac:	d111      	bne.n	80032d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032ae:	4b10      	ldr	r3, [pc, #64]	; (80032f0 <HAL_ADC_ConfigChannel+0x23c>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a10      	ldr	r2, [pc, #64]	; (80032f4 <HAL_ADC_ConfigChannel+0x240>)
 80032b4:	fba2 2303 	umull	r2, r3, r2, r3
 80032b8:	0c9a      	lsrs	r2, r3, #18
 80032ba:	4613      	mov	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	005b      	lsls	r3, r3, #1
 80032c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032c4:	e002      	b.n	80032cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1f9      	bne.n	80032c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40012300 	.word	0x40012300
 80032ec:	40012000 	.word	0x40012000
 80032f0:	20000000 	.word	0x20000000
 80032f4:	431bde83 	.word	0x431bde83

080032f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003300:	4b79      	ldr	r3, [pc, #484]	; (80034e8 <ADC_Init+0x1f0>)
 8003302:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	431a      	orrs	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	685a      	ldr	r2, [r3, #4]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800332c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6859      	ldr	r1, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	021a      	lsls	r2, r3, #8
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003350:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6859      	ldr	r1, [r3, #4]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689a      	ldr	r2, [r3, #8]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003372:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6899      	ldr	r1, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338a:	4a58      	ldr	r2, [pc, #352]	; (80034ec <ADC_Init+0x1f4>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d022      	beq.n	80033d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	689a      	ldr	r2, [r3, #8]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800339e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6899      	ldr	r1, [r3, #8]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	6899      	ldr	r1, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	e00f      	b.n	80033f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80033f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 0202 	bic.w	r2, r2, #2
 8003404:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6899      	ldr	r1, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	7e1b      	ldrb	r3, [r3, #24]
 8003410:	005a      	lsls	r2, r3, #1
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	430a      	orrs	r2, r1
 8003418:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01b      	beq.n	800345c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003432:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	685a      	ldr	r2, [r3, #4]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003442:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6859      	ldr	r1, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344e:	3b01      	subs	r3, #1
 8003450:	035a      	lsls	r2, r3, #13
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
 800345a:	e007      	b.n	800346c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800346a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800347a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	3b01      	subs	r3, #1
 8003488:	051a      	lsls	r2, r3, #20
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	6899      	ldr	r1, [r3, #8]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034ae:	025a      	lsls	r2, r3, #9
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6899      	ldr	r1, [r3, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	029a      	lsls	r2, r3, #10
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	609a      	str	r2, [r3, #8]
}
 80034dc:	bf00      	nop
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	40012300 	.word	0x40012300
 80034ec:	0f000001 	.word	0x0f000001

080034f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003500:	4b0c      	ldr	r3, [pc, #48]	; (8003534 <__NVIC_SetPriorityGrouping+0x44>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800350c:	4013      	ands	r3, r2
 800350e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800351c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003522:	4a04      	ldr	r2, [pc, #16]	; (8003534 <__NVIC_SetPriorityGrouping+0x44>)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	60d3      	str	r3, [r2, #12]
}
 8003528:	bf00      	nop
 800352a:	3714      	adds	r7, #20
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	e000ed00 	.word	0xe000ed00

08003538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800353c:	4b04      	ldr	r3, [pc, #16]	; (8003550 <__NVIC_GetPriorityGrouping+0x18>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	0a1b      	lsrs	r3, r3, #8
 8003542:	f003 0307 	and.w	r3, r3, #7
}
 8003546:	4618      	mov	r0, r3
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr
 8003550:	e000ed00 	.word	0xe000ed00

08003554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	4603      	mov	r3, r0
 800355c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800355e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003562:	2b00      	cmp	r3, #0
 8003564:	db0b      	blt.n	800357e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003566:	79fb      	ldrb	r3, [r7, #7]
 8003568:	f003 021f 	and.w	r2, r3, #31
 800356c:	4907      	ldr	r1, [pc, #28]	; (800358c <__NVIC_EnableIRQ+0x38>)
 800356e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003572:	095b      	lsrs	r3, r3, #5
 8003574:	2001      	movs	r0, #1
 8003576:	fa00 f202 	lsl.w	r2, r0, r2
 800357a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800357e:	bf00      	nop
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr
 800358a:	bf00      	nop
 800358c:	e000e100 	.word	0xe000e100

08003590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	6039      	str	r1, [r7, #0]
 800359a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800359c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	db0a      	blt.n	80035ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	b2da      	uxtb	r2, r3
 80035a8:	490c      	ldr	r1, [pc, #48]	; (80035dc <__NVIC_SetPriority+0x4c>)
 80035aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ae:	0112      	lsls	r2, r2, #4
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	440b      	add	r3, r1
 80035b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035b8:	e00a      	b.n	80035d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	b2da      	uxtb	r2, r3
 80035be:	4908      	ldr	r1, [pc, #32]	; (80035e0 <__NVIC_SetPriority+0x50>)
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	f003 030f 	and.w	r3, r3, #15
 80035c6:	3b04      	subs	r3, #4
 80035c8:	0112      	lsls	r2, r2, #4
 80035ca:	b2d2      	uxtb	r2, r2
 80035cc:	440b      	add	r3, r1
 80035ce:	761a      	strb	r2, [r3, #24]
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr
 80035dc:	e000e100 	.word	0xe000e100
 80035e0:	e000ed00 	.word	0xe000ed00

080035e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b089      	sub	sp, #36	; 0x24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	60b9      	str	r1, [r7, #8]
 80035ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f003 0307 	and.w	r3, r3, #7
 80035f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	f1c3 0307 	rsb	r3, r3, #7
 80035fe:	2b04      	cmp	r3, #4
 8003600:	bf28      	it	cs
 8003602:	2304      	movcs	r3, #4
 8003604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	3304      	adds	r3, #4
 800360a:	2b06      	cmp	r3, #6
 800360c:	d902      	bls.n	8003614 <NVIC_EncodePriority+0x30>
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	3b03      	subs	r3, #3
 8003612:	e000      	b.n	8003616 <NVIC_EncodePriority+0x32>
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003618:	f04f 32ff 	mov.w	r2, #4294967295
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	43da      	mvns	r2, r3
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	401a      	ands	r2, r3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800362c:	f04f 31ff 	mov.w	r1, #4294967295
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	fa01 f303 	lsl.w	r3, r1, r3
 8003636:	43d9      	mvns	r1, r3
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800363c:	4313      	orrs	r3, r2
         );
}
 800363e:	4618      	mov	r0, r3
 8003640:	3724      	adds	r7, #36	; 0x24
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3b01      	subs	r3, #1
 8003658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800365c:	d301      	bcc.n	8003662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800365e:	2301      	movs	r3, #1
 8003660:	e00f      	b.n	8003682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003662:	4a0a      	ldr	r2, [pc, #40]	; (800368c <SysTick_Config+0x40>)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	3b01      	subs	r3, #1
 8003668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800366a:	210f      	movs	r1, #15
 800366c:	f04f 30ff 	mov.w	r0, #4294967295
 8003670:	f7ff ff8e 	bl	8003590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003674:	4b05      	ldr	r3, [pc, #20]	; (800368c <SysTick_Config+0x40>)
 8003676:	2200      	movs	r2, #0
 8003678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800367a:	4b04      	ldr	r3, [pc, #16]	; (800368c <SysTick_Config+0x40>)
 800367c:	2207      	movs	r2, #7
 800367e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	e000e010 	.word	0xe000e010

08003690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f7ff ff29 	bl	80034f0 <__NVIC_SetPriorityGrouping>
}
 800369e:	bf00      	nop
 80036a0:	3708      	adds	r7, #8
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}

080036a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036a6:	b580      	push	{r7, lr}
 80036a8:	b086      	sub	sp, #24
 80036aa:	af00      	add	r7, sp, #0
 80036ac:	4603      	mov	r3, r0
 80036ae:	60b9      	str	r1, [r7, #8]
 80036b0:	607a      	str	r2, [r7, #4]
 80036b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036b8:	f7ff ff3e 	bl	8003538 <__NVIC_GetPriorityGrouping>
 80036bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	68b9      	ldr	r1, [r7, #8]
 80036c2:	6978      	ldr	r0, [r7, #20]
 80036c4:	f7ff ff8e 	bl	80035e4 <NVIC_EncodePriority>
 80036c8:	4602      	mov	r2, r0
 80036ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ce:	4611      	mov	r1, r2
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff ff5d 	bl	8003590 <__NVIC_SetPriority>
}
 80036d6:	bf00      	nop
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b082      	sub	sp, #8
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4603      	mov	r3, r0
 80036e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff ff31 	bl	8003554 <__NVIC_EnableIRQ>
}
 80036f2:	bf00      	nop
 80036f4:	3708      	adds	r7, #8
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}

080036fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7ff ffa2 	bl	800364c <SysTick_Config>
 8003708:	4603      	mov	r3, r0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003714:	b480      	push	{r7}
 8003716:	b089      	sub	sp, #36	; 0x24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003722:	2300      	movs	r3, #0
 8003724:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003726:	2300      	movs	r3, #0
 8003728:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	e16b      	b.n	8003a08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003730:	2201      	movs	r2, #1
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4013      	ands	r3, r2
 8003742:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	429a      	cmp	r2, r3
 800374a:	f040 815a 	bne.w	8003a02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b01      	cmp	r3, #1
 8003758:	d005      	beq.n	8003766 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003762:	2b02      	cmp	r3, #2
 8003764:	d130      	bne.n	80037c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	2203      	movs	r2, #3
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4013      	ands	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4313      	orrs	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800379c:	2201      	movs	r2, #1
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	091b      	lsrs	r3, r3, #4
 80037b2:	f003 0201 	and.w	r2, r3, #1
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4313      	orrs	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d017      	beq.n	8003804 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	2203      	movs	r2, #3
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d123      	bne.n	8003858 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	08da      	lsrs	r2, r3, #3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3208      	adds	r2, #8
 8003818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800381c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	220f      	movs	r2, #15
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	08da      	lsrs	r2, r3, #3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3208      	adds	r2, #8
 8003852:	69b9      	ldr	r1, [r7, #24]
 8003854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	2203      	movs	r2, #3
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4013      	ands	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 0203 	and.w	r2, r3, #3
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4313      	orrs	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80b4 	beq.w	8003a02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	4b60      	ldr	r3, [pc, #384]	; (8003a20 <HAL_GPIO_Init+0x30c>)
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	4a5f      	ldr	r2, [pc, #380]	; (8003a20 <HAL_GPIO_Init+0x30c>)
 80038a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038a8:	6453      	str	r3, [r2, #68]	; 0x44
 80038aa:	4b5d      	ldr	r3, [pc, #372]	; (8003a20 <HAL_GPIO_Init+0x30c>)
 80038ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038b6:	4a5b      	ldr	r2, [pc, #364]	; (8003a24 <HAL_GPIO_Init+0x310>)
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	089b      	lsrs	r3, r3, #2
 80038bc:	3302      	adds	r3, #2
 80038be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	220f      	movs	r2, #15
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43db      	mvns	r3, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4013      	ands	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a52      	ldr	r2, [pc, #328]	; (8003a28 <HAL_GPIO_Init+0x314>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d02b      	beq.n	800393a <HAL_GPIO_Init+0x226>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a51      	ldr	r2, [pc, #324]	; (8003a2c <HAL_GPIO_Init+0x318>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d025      	beq.n	8003936 <HAL_GPIO_Init+0x222>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a50      	ldr	r2, [pc, #320]	; (8003a30 <HAL_GPIO_Init+0x31c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01f      	beq.n	8003932 <HAL_GPIO_Init+0x21e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a4f      	ldr	r2, [pc, #316]	; (8003a34 <HAL_GPIO_Init+0x320>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d019      	beq.n	800392e <HAL_GPIO_Init+0x21a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a4e      	ldr	r2, [pc, #312]	; (8003a38 <HAL_GPIO_Init+0x324>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <HAL_GPIO_Init+0x216>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a4d      	ldr	r2, [pc, #308]	; (8003a3c <HAL_GPIO_Init+0x328>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00d      	beq.n	8003926 <HAL_GPIO_Init+0x212>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a4c      	ldr	r2, [pc, #304]	; (8003a40 <HAL_GPIO_Init+0x32c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d007      	beq.n	8003922 <HAL_GPIO_Init+0x20e>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a4b      	ldr	r2, [pc, #300]	; (8003a44 <HAL_GPIO_Init+0x330>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d101      	bne.n	800391e <HAL_GPIO_Init+0x20a>
 800391a:	2307      	movs	r3, #7
 800391c:	e00e      	b.n	800393c <HAL_GPIO_Init+0x228>
 800391e:	2308      	movs	r3, #8
 8003920:	e00c      	b.n	800393c <HAL_GPIO_Init+0x228>
 8003922:	2306      	movs	r3, #6
 8003924:	e00a      	b.n	800393c <HAL_GPIO_Init+0x228>
 8003926:	2305      	movs	r3, #5
 8003928:	e008      	b.n	800393c <HAL_GPIO_Init+0x228>
 800392a:	2304      	movs	r3, #4
 800392c:	e006      	b.n	800393c <HAL_GPIO_Init+0x228>
 800392e:	2303      	movs	r3, #3
 8003930:	e004      	b.n	800393c <HAL_GPIO_Init+0x228>
 8003932:	2302      	movs	r3, #2
 8003934:	e002      	b.n	800393c <HAL_GPIO_Init+0x228>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <HAL_GPIO_Init+0x228>
 800393a:	2300      	movs	r3, #0
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	f002 0203 	and.w	r2, r2, #3
 8003942:	0092      	lsls	r2, r2, #2
 8003944:	4093      	lsls	r3, r2
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4313      	orrs	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800394c:	4935      	ldr	r1, [pc, #212]	; (8003a24 <HAL_GPIO_Init+0x310>)
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	089b      	lsrs	r3, r3, #2
 8003952:	3302      	adds	r3, #2
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800395a:	4b3b      	ldr	r3, [pc, #236]	; (8003a48 <HAL_GPIO_Init+0x334>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	43db      	mvns	r3, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4013      	ands	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800397e:	4a32      	ldr	r2, [pc, #200]	; (8003a48 <HAL_GPIO_Init+0x334>)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003984:	4b30      	ldr	r3, [pc, #192]	; (8003a48 <HAL_GPIO_Init+0x334>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039a8:	4a27      	ldr	r2, [pc, #156]	; (8003a48 <HAL_GPIO_Init+0x334>)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039ae:	4b26      	ldr	r3, [pc, #152]	; (8003a48 <HAL_GPIO_Init+0x334>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	43db      	mvns	r3, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4013      	ands	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039d2:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <HAL_GPIO_Init+0x334>)
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039d8:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <HAL_GPIO_Init+0x334>)
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	43db      	mvns	r3, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039fc:	4a12      	ldr	r2, [pc, #72]	; (8003a48 <HAL_GPIO_Init+0x334>)
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3301      	adds	r3, #1
 8003a06:	61fb      	str	r3, [r7, #28]
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	2b0f      	cmp	r3, #15
 8003a0c:	f67f ae90 	bls.w	8003730 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a10:	bf00      	nop
 8003a12:	bf00      	nop
 8003a14:	3724      	adds	r7, #36	; 0x24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800
 8003a24:	40013800 	.word	0x40013800
 8003a28:	40020000 	.word	0x40020000
 8003a2c:	40020400 	.word	0x40020400
 8003a30:	40020800 	.word	0x40020800
 8003a34:	40020c00 	.word	0x40020c00
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	40021400 	.word	0x40021400
 8003a40:	40021800 	.word	0x40021800
 8003a44:	40021c00 	.word	0x40021c00
 8003a48:	40013c00 	.word	0x40013c00

08003a4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	807b      	strh	r3, [r7, #2]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a5c:	787b      	ldrb	r3, [r7, #1]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d003      	beq.n	8003a6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a62:	887a      	ldrh	r2, [r7, #2]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a68:	e003      	b.n	8003a72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a6a:	887b      	ldrh	r3, [r7, #2]
 8003a6c:	041a      	lsls	r2, r3, #16
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	619a      	str	r2, [r3, #24]
}
 8003a72:	bf00      	nop
 8003a74:	370c      	adds	r7, #12
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
	...

08003a80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e264      	b.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d075      	beq.n	8003b8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a9e:	4ba3      	ldr	r3, [pc, #652]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 030c 	and.w	r3, r3, #12
 8003aa6:	2b04      	cmp	r3, #4
 8003aa8:	d00c      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aaa:	4ba0      	ldr	r3, [pc, #640]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d112      	bne.n	8003adc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ab6:	4b9d      	ldr	r3, [pc, #628]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003ac2:	d10b      	bne.n	8003adc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ac4:	4b99      	ldr	r3, [pc, #612]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d05b      	beq.n	8003b88 <HAL_RCC_OscConfig+0x108>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d157      	bne.n	8003b88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e23f      	b.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae4:	d106      	bne.n	8003af4 <HAL_RCC_OscConfig+0x74>
 8003ae6:	4b91      	ldr	r3, [pc, #580]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a90      	ldr	r2, [pc, #576]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003af0:	6013      	str	r3, [r2, #0]
 8003af2:	e01d      	b.n	8003b30 <HAL_RCC_OscConfig+0xb0>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003afc:	d10c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x98>
 8003afe:	4b8b      	ldr	r3, [pc, #556]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a8a      	ldr	r2, [pc, #552]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	4b88      	ldr	r3, [pc, #544]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a87      	ldr	r2, [pc, #540]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b14:	6013      	str	r3, [r2, #0]
 8003b16:	e00b      	b.n	8003b30 <HAL_RCC_OscConfig+0xb0>
 8003b18:	4b84      	ldr	r3, [pc, #528]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a83      	ldr	r2, [pc, #524]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b22:	6013      	str	r3, [r2, #0]
 8003b24:	4b81      	ldr	r3, [pc, #516]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a80      	ldr	r2, [pc, #512]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d013      	beq.n	8003b60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b38:	f7ff f8ce 	bl	8002cd8 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b40:	f7ff f8ca 	bl	8002cd8 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	2b64      	cmp	r3, #100	; 0x64
 8003b4c:	d901      	bls.n	8003b52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b4e:	2303      	movs	r3, #3
 8003b50:	e204      	b.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b52:	4b76      	ldr	r3, [pc, #472]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0f0      	beq.n	8003b40 <HAL_RCC_OscConfig+0xc0>
 8003b5e:	e014      	b.n	8003b8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b60:	f7ff f8ba 	bl	8002cd8 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b66:	e008      	b.n	8003b7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b68:	f7ff f8b6 	bl	8002cd8 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	2b64      	cmp	r3, #100	; 0x64
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e1f0      	b.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7a:	4b6c      	ldr	r3, [pc, #432]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1f0      	bne.n	8003b68 <HAL_RCC_OscConfig+0xe8>
 8003b86:	e000      	b.n	8003b8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d063      	beq.n	8003c5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b96:	4b65      	ldr	r3, [pc, #404]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f003 030c 	and.w	r3, r3, #12
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ba2:	4b62      	ldr	r3, [pc, #392]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d11c      	bne.n	8003be8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bae:	4b5f      	ldr	r3, [pc, #380]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d116      	bne.n	8003be8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bba:	4b5c      	ldr	r3, [pc, #368]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d005      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x152>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d001      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e1c4      	b.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bd2:	4b56      	ldr	r3, [pc, #344]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4952      	ldr	r1, [pc, #328]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003be6:	e03a      	b.n	8003c5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d020      	beq.n	8003c32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bf0:	4b4f      	ldr	r3, [pc, #316]	; (8003d30 <HAL_RCC_OscConfig+0x2b0>)
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf6:	f7ff f86f 	bl	8002cd8 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bfe:	f7ff f86b 	bl	8002cd8 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e1a5      	b.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c10:	4b46      	ldr	r3, [pc, #280]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f0      	beq.n	8003bfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c1c:	4b43      	ldr	r3, [pc, #268]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4940      	ldr	r1, [pc, #256]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	600b      	str	r3, [r1, #0]
 8003c30:	e015      	b.n	8003c5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c32:	4b3f      	ldr	r3, [pc, #252]	; (8003d30 <HAL_RCC_OscConfig+0x2b0>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c38:	f7ff f84e 	bl	8002cd8 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c40:	f7ff f84a 	bl	8002cd8 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e184      	b.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c52:	4b36      	ldr	r3, [pc, #216]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0302 	and.w	r3, r3, #2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d030      	beq.n	8003ccc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d016      	beq.n	8003ca0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c72:	4b30      	ldr	r3, [pc, #192]	; (8003d34 <HAL_RCC_OscConfig+0x2b4>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c78:	f7ff f82e 	bl	8002cd8 <HAL_GetTick>
 8003c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c7e:	e008      	b.n	8003c92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c80:	f7ff f82a 	bl	8002cd8 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d901      	bls.n	8003c92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	e164      	b.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c92:	4b26      	ldr	r3, [pc, #152]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d0f0      	beq.n	8003c80 <HAL_RCC_OscConfig+0x200>
 8003c9e:	e015      	b.n	8003ccc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ca0:	4b24      	ldr	r3, [pc, #144]	; (8003d34 <HAL_RCC_OscConfig+0x2b4>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ca6:	f7ff f817 	bl	8002cd8 <HAL_GetTick>
 8003caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cac:	e008      	b.n	8003cc0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cae:	f7ff f813 	bl	8002cd8 <HAL_GetTick>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	1ad3      	subs	r3, r2, r3
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d901      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003cbc:	2303      	movs	r3, #3
 8003cbe:	e14d      	b.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc0:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc4:	f003 0302 	and.w	r3, r3, #2
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1f0      	bne.n	8003cae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0304 	and.w	r3, r3, #4
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80a0 	beq.w	8003e1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cde:	4b13      	ldr	r3, [pc, #76]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10f      	bne.n	8003d0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cea:	2300      	movs	r3, #0
 8003cec:	60bb      	str	r3, [r7, #8]
 8003cee:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	4a0e      	ldr	r2, [pc, #56]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8003cfa:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <HAL_RCC_OscConfig+0x2ac>)
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d02:	60bb      	str	r3, [r7, #8]
 8003d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d06:	2301      	movs	r3, #1
 8003d08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	; (8003d38 <HAL_RCC_OscConfig+0x2b8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d121      	bne.n	8003d5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d16:	4b08      	ldr	r3, [pc, #32]	; (8003d38 <HAL_RCC_OscConfig+0x2b8>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a07      	ldr	r2, [pc, #28]	; (8003d38 <HAL_RCC_OscConfig+0x2b8>)
 8003d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d22:	f7fe ffd9 	bl	8002cd8 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d28:	e011      	b.n	8003d4e <HAL_RCC_OscConfig+0x2ce>
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	42470000 	.word	0x42470000
 8003d34:	42470e80 	.word	0x42470e80
 8003d38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3c:	f7fe ffcc 	bl	8002cd8 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e106      	b.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4e:	4b85      	ldr	r3, [pc, #532]	; (8003f64 <HAL_RCC_OscConfig+0x4e4>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d106      	bne.n	8003d70 <HAL_RCC_OscConfig+0x2f0>
 8003d62:	4b81      	ldr	r3, [pc, #516]	; (8003f68 <HAL_RCC_OscConfig+0x4e8>)
 8003d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d66:	4a80      	ldr	r2, [pc, #512]	; (8003f68 <HAL_RCC_OscConfig+0x4e8>)
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d6e:	e01c      	b.n	8003daa <HAL_RCC_OscConfig+0x32a>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	2b05      	cmp	r3, #5
 8003d76:	d10c      	bne.n	8003d92 <HAL_RCC_OscConfig+0x312>
 8003d78:	4b7b      	ldr	r3, [pc, #492]	; (8003f68 <HAL_RCC_OscConfig+0x4e8>)
 8003d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7c:	4a7a      	ldr	r2, [pc, #488]	; (8003f68 <HAL_RCC_OscConfig+0x4e8>)
 8003d7e:	f043 0304 	orr.w	r3, r3, #4
 8003d82:	6713      	str	r3, [r2, #112]	; 0x70
 8003d84:	4b78      	ldr	r3, [pc, #480]	; (8003f68 <HAL_RCC_OscConfig+0x4e8>)
 8003d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d88:	4a77      	ldr	r2, [pc, #476]	; (8003f68 <HAL_RCC_OscConfig+0x4e8>)
 8003d8a:	f043 0301 	orr.w	r3, r3, #1
 8003d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d90:	e00b      	b.n	8003daa <HAL_RCC_OscConfig+0x32a>
 8003d92:	4b75      	ldr	r3, [pc, #468]	; (8003f68 <HAL_RCC_OscConfig+0x4e8>)
 8003d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d96:	4a74      	ldr	r2, [pc, #464]	; (8003f68 <HAL_RCC_OscConfig+0x4e8>)
 8003d98:	f023 0301 	bic.w	r3, r3, #1
 8003d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d9e:	4b72      	ldr	r3, [pc, #456]	; (8003f68 <HAL_RCC_OscConfig+0x4e8>)
 8003da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da2:	4a71      	ldr	r2, [pc, #452]	; (8003f68 <HAL_RCC_OscConfig+0x4e8>)
 8003da4:	f023 0304 	bic.w	r3, r3, #4
 8003da8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d015      	beq.n	8003dde <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003db2:	f7fe ff91 	bl	8002cd8 <HAL_GetTick>
 8003db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db8:	e00a      	b.n	8003dd0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dba:	f7fe ff8d 	bl	8002cd8 <HAL_GetTick>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d901      	bls.n	8003dd0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e0c5      	b.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd0:	4b65      	ldr	r3, [pc, #404]	; (8003f68 <HAL_RCC_OscConfig+0x4e8>)
 8003dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d0ee      	beq.n	8003dba <HAL_RCC_OscConfig+0x33a>
 8003ddc:	e014      	b.n	8003e08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dde:	f7fe ff7b 	bl	8002cd8 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de4:	e00a      	b.n	8003dfc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003de6:	f7fe ff77 	bl	8002cd8 <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e0af      	b.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dfc:	4b5a      	ldr	r3, [pc, #360]	; (8003f68 <HAL_RCC_OscConfig+0x4e8>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1ee      	bne.n	8003de6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e08:	7dfb      	ldrb	r3, [r7, #23]
 8003e0a:	2b01      	cmp	r3, #1
 8003e0c:	d105      	bne.n	8003e1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e0e:	4b56      	ldr	r3, [pc, #344]	; (8003f68 <HAL_RCC_OscConfig+0x4e8>)
 8003e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e12:	4a55      	ldr	r2, [pc, #340]	; (8003f68 <HAL_RCC_OscConfig+0x4e8>)
 8003e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	f000 809b 	beq.w	8003f5a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e24:	4b50      	ldr	r3, [pc, #320]	; (8003f68 <HAL_RCC_OscConfig+0x4e8>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 030c 	and.w	r3, r3, #12
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d05c      	beq.n	8003eea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d141      	bne.n	8003ebc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e38:	4b4c      	ldr	r3, [pc, #304]	; (8003f6c <HAL_RCC_OscConfig+0x4ec>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3e:	f7fe ff4b 	bl	8002cd8 <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e46:	f7fe ff47 	bl	8002cd8 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e081      	b.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e58:	4b43      	ldr	r3, [pc, #268]	; (8003f68 <HAL_RCC_OscConfig+0x4e8>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d1f0      	bne.n	8003e46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69da      	ldr	r2, [r3, #28]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	019b      	lsls	r3, r3, #6
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e7a:	085b      	lsrs	r3, r3, #1
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	041b      	lsls	r3, r3, #16
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e86:	061b      	lsls	r3, r3, #24
 8003e88:	4937      	ldr	r1, [pc, #220]	; (8003f68 <HAL_RCC_OscConfig+0x4e8>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e8e:	4b37      	ldr	r3, [pc, #220]	; (8003f6c <HAL_RCC_OscConfig+0x4ec>)
 8003e90:	2201      	movs	r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e94:	f7fe ff20 	bl	8002cd8 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7fe ff1c 	bl	8002cd8 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e056      	b.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eae:	4b2e      	ldr	r3, [pc, #184]	; (8003f68 <HAL_RCC_OscConfig+0x4e8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x41c>
 8003eba:	e04e      	b.n	8003f5a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ebc:	4b2b      	ldr	r3, [pc, #172]	; (8003f6c <HAL_RCC_OscConfig+0x4ec>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec2:	f7fe ff09 	bl	8002cd8 <HAL_GetTick>
 8003ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ec8:	e008      	b.n	8003edc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003eca:	f7fe ff05 	bl	8002cd8 <HAL_GetTick>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	1ad3      	subs	r3, r2, r3
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d901      	bls.n	8003edc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e03f      	b.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003edc:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <HAL_RCC_OscConfig+0x4e8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1f0      	bne.n	8003eca <HAL_RCC_OscConfig+0x44a>
 8003ee8:	e037      	b.n	8003f5a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e032      	b.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ef6:	4b1c      	ldr	r3, [pc, #112]	; (8003f68 <HAL_RCC_OscConfig+0x4e8>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d028      	beq.n	8003f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d121      	bne.n	8003f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d11a      	bne.n	8003f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f26:	4013      	ands	r3, r2
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f2c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d111      	bne.n	8003f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3c:	085b      	lsrs	r3, r3, #1
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d107      	bne.n	8003f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d001      	beq.n	8003f5a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e000      	b.n	8003f5c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3718      	adds	r7, #24
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	40007000 	.word	0x40007000
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	42470060 	.word	0x42470060

08003f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e0cc      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f84:	4b68      	ldr	r3, [pc, #416]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d90c      	bls.n	8003fac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f92:	4b65      	ldr	r3, [pc, #404]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9a:	4b63      	ldr	r3, [pc, #396]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	429a      	cmp	r2, r3
 8003fa6:	d001      	beq.n	8003fac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e0b8      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0302 	and.w	r3, r3, #2
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d020      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0304 	and.w	r3, r3, #4
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fc4:	4b59      	ldr	r3, [pc, #356]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	4a58      	ldr	r2, [pc, #352]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003fca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fdc:	4b53      	ldr	r3, [pc, #332]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	4a52      	ldr	r2, [pc, #328]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fe6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe8:	4b50      	ldr	r3, [pc, #320]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	494d      	ldr	r1, [pc, #308]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d044      	beq.n	8004090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d107      	bne.n	800401e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400e:	4b47      	ldr	r3, [pc, #284]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d119      	bne.n	800404e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e07f      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d003      	beq.n	800402e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800402a:	2b03      	cmp	r3, #3
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800402e:	4b3f      	ldr	r3, [pc, #252]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d109      	bne.n	800404e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e06f      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800403e:	4b3b      	ldr	r3, [pc, #236]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e067      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800404e:	4b37      	ldr	r3, [pc, #220]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f023 0203 	bic.w	r2, r3, #3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	4934      	ldr	r1, [pc, #208]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 800405c:	4313      	orrs	r3, r2
 800405e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004060:	f7fe fe3a 	bl	8002cd8 <HAL_GetTick>
 8004064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004066:	e00a      	b.n	800407e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004068:	f7fe fe36 	bl	8002cd8 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f241 3288 	movw	r2, #5000	; 0x1388
 8004076:	4293      	cmp	r3, r2
 8004078:	d901      	bls.n	800407e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e04f      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407e:	4b2b      	ldr	r3, [pc, #172]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f003 020c 	and.w	r2, r3, #12
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	429a      	cmp	r2, r3
 800408e:	d1eb      	bne.n	8004068 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004090:	4b25      	ldr	r3, [pc, #148]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	429a      	cmp	r2, r3
 800409c:	d20c      	bcs.n	80040b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409e:	4b22      	ldr	r3, [pc, #136]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 80040a0:	683a      	ldr	r2, [r7, #0]
 80040a2:	b2d2      	uxtb	r2, r2
 80040a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a6:	4b20      	ldr	r3, [pc, #128]	; (8004128 <HAL_RCC_ClockConfig+0x1b8>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0307 	and.w	r3, r3, #7
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e032      	b.n	800411e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c4:	4b19      	ldr	r3, [pc, #100]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4916      	ldr	r1, [pc, #88]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d009      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040e2:	4b12      	ldr	r3, [pc, #72]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	490e      	ldr	r1, [pc, #56]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040f6:	f000 f821 	bl	800413c <HAL_RCC_GetSysClockFreq>
 80040fa:	4602      	mov	r2, r0
 80040fc:	4b0b      	ldr	r3, [pc, #44]	; (800412c <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	091b      	lsrs	r3, r3, #4
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	490a      	ldr	r1, [pc, #40]	; (8004130 <HAL_RCC_ClockConfig+0x1c0>)
 8004108:	5ccb      	ldrb	r3, [r1, r3]
 800410a:	fa22 f303 	lsr.w	r3, r2, r3
 800410e:	4a09      	ldr	r2, [pc, #36]	; (8004134 <HAL_RCC_ClockConfig+0x1c4>)
 8004110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004112:	4b09      	ldr	r3, [pc, #36]	; (8004138 <HAL_RCC_ClockConfig+0x1c8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f7fe fd9a 	bl	8002c50 <HAL_InitTick>

  return HAL_OK;
 800411c:	2300      	movs	r3, #0
}
 800411e:	4618      	mov	r0, r3
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	40023c00 	.word	0x40023c00
 800412c:	40023800 	.word	0x40023800
 8004130:	08006bdc 	.word	0x08006bdc
 8004134:	20000000 	.word	0x20000000
 8004138:	20000004 	.word	0x20000004

0800413c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800413c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004140:	b084      	sub	sp, #16
 8004142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	607b      	str	r3, [r7, #4]
 8004148:	2300      	movs	r3, #0
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	2300      	movs	r3, #0
 800414e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004154:	4b67      	ldr	r3, [pc, #412]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 030c 	and.w	r3, r3, #12
 800415c:	2b08      	cmp	r3, #8
 800415e:	d00d      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x40>
 8004160:	2b08      	cmp	r3, #8
 8004162:	f200 80bd 	bhi.w	80042e0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <HAL_RCC_GetSysClockFreq+0x34>
 800416a:	2b04      	cmp	r3, #4
 800416c:	d003      	beq.n	8004176 <HAL_RCC_GetSysClockFreq+0x3a>
 800416e:	e0b7      	b.n	80042e0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004170:	4b61      	ldr	r3, [pc, #388]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004172:	60bb      	str	r3, [r7, #8]
       break;
 8004174:	e0b7      	b.n	80042e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004176:	4b60      	ldr	r3, [pc, #384]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004178:	60bb      	str	r3, [r7, #8]
      break;
 800417a:	e0b4      	b.n	80042e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800417c:	4b5d      	ldr	r3, [pc, #372]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004184:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004186:	4b5b      	ldr	r3, [pc, #364]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004188:	685b      	ldr	r3, [r3, #4]
 800418a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d04d      	beq.n	800422e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004192:	4b58      	ldr	r3, [pc, #352]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	099b      	lsrs	r3, r3, #6
 8004198:	461a      	mov	r2, r3
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041a2:	f04f 0100 	mov.w	r1, #0
 80041a6:	ea02 0800 	and.w	r8, r2, r0
 80041aa:	ea03 0901 	and.w	r9, r3, r1
 80041ae:	4640      	mov	r0, r8
 80041b0:	4649      	mov	r1, r9
 80041b2:	f04f 0200 	mov.w	r2, #0
 80041b6:	f04f 0300 	mov.w	r3, #0
 80041ba:	014b      	lsls	r3, r1, #5
 80041bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041c0:	0142      	lsls	r2, r0, #5
 80041c2:	4610      	mov	r0, r2
 80041c4:	4619      	mov	r1, r3
 80041c6:	ebb0 0008 	subs.w	r0, r0, r8
 80041ca:	eb61 0109 	sbc.w	r1, r1, r9
 80041ce:	f04f 0200 	mov.w	r2, #0
 80041d2:	f04f 0300 	mov.w	r3, #0
 80041d6:	018b      	lsls	r3, r1, #6
 80041d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041dc:	0182      	lsls	r2, r0, #6
 80041de:	1a12      	subs	r2, r2, r0
 80041e0:	eb63 0301 	sbc.w	r3, r3, r1
 80041e4:	f04f 0000 	mov.w	r0, #0
 80041e8:	f04f 0100 	mov.w	r1, #0
 80041ec:	00d9      	lsls	r1, r3, #3
 80041ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80041f2:	00d0      	lsls	r0, r2, #3
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	eb12 0208 	adds.w	r2, r2, r8
 80041fc:	eb43 0309 	adc.w	r3, r3, r9
 8004200:	f04f 0000 	mov.w	r0, #0
 8004204:	f04f 0100 	mov.w	r1, #0
 8004208:	0299      	lsls	r1, r3, #10
 800420a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800420e:	0290      	lsls	r0, r2, #10
 8004210:	4602      	mov	r2, r0
 8004212:	460b      	mov	r3, r1
 8004214:	4610      	mov	r0, r2
 8004216:	4619      	mov	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	461a      	mov	r2, r3
 800421c:	f04f 0300 	mov.w	r3, #0
 8004220:	f7fc fcba 	bl	8000b98 <__aeabi_uldivmod>
 8004224:	4602      	mov	r2, r0
 8004226:	460b      	mov	r3, r1
 8004228:	4613      	mov	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]
 800422c:	e04a      	b.n	80042c4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800422e:	4b31      	ldr	r3, [pc, #196]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	099b      	lsrs	r3, r3, #6
 8004234:	461a      	mov	r2, r3
 8004236:	f04f 0300 	mov.w	r3, #0
 800423a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800423e:	f04f 0100 	mov.w	r1, #0
 8004242:	ea02 0400 	and.w	r4, r2, r0
 8004246:	ea03 0501 	and.w	r5, r3, r1
 800424a:	4620      	mov	r0, r4
 800424c:	4629      	mov	r1, r5
 800424e:	f04f 0200 	mov.w	r2, #0
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	014b      	lsls	r3, r1, #5
 8004258:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800425c:	0142      	lsls	r2, r0, #5
 800425e:	4610      	mov	r0, r2
 8004260:	4619      	mov	r1, r3
 8004262:	1b00      	subs	r0, r0, r4
 8004264:	eb61 0105 	sbc.w	r1, r1, r5
 8004268:	f04f 0200 	mov.w	r2, #0
 800426c:	f04f 0300 	mov.w	r3, #0
 8004270:	018b      	lsls	r3, r1, #6
 8004272:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004276:	0182      	lsls	r2, r0, #6
 8004278:	1a12      	subs	r2, r2, r0
 800427a:	eb63 0301 	sbc.w	r3, r3, r1
 800427e:	f04f 0000 	mov.w	r0, #0
 8004282:	f04f 0100 	mov.w	r1, #0
 8004286:	00d9      	lsls	r1, r3, #3
 8004288:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800428c:	00d0      	lsls	r0, r2, #3
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	1912      	adds	r2, r2, r4
 8004294:	eb45 0303 	adc.w	r3, r5, r3
 8004298:	f04f 0000 	mov.w	r0, #0
 800429c:	f04f 0100 	mov.w	r1, #0
 80042a0:	0299      	lsls	r1, r3, #10
 80042a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80042a6:	0290      	lsls	r0, r2, #10
 80042a8:	4602      	mov	r2, r0
 80042aa:	460b      	mov	r3, r1
 80042ac:	4610      	mov	r0, r2
 80042ae:	4619      	mov	r1, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	461a      	mov	r2, r3
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	f7fc fc6e 	bl	8000b98 <__aeabi_uldivmod>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4613      	mov	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042c4:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	0c1b      	lsrs	r3, r3, #16
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	3301      	adds	r3, #1
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80042d4:	68fa      	ldr	r2, [r7, #12]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042dc:	60bb      	str	r3, [r7, #8]
      break;
 80042de:	e002      	b.n	80042e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042e0:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042e2:	60bb      	str	r3, [r7, #8]
      break;
 80042e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042e6:	68bb      	ldr	r3, [r7, #8]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80042f2:	bf00      	nop
 80042f4:	40023800 	.word	0x40023800
 80042f8:	00f42400 	.word	0x00f42400

080042fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042fc:	b480      	push	{r7}
 80042fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004300:	4b03      	ldr	r3, [pc, #12]	; (8004310 <HAL_RCC_GetHCLKFreq+0x14>)
 8004302:	681b      	ldr	r3, [r3, #0]
}
 8004304:	4618      	mov	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
 800430e:	bf00      	nop
 8004310:	20000000 	.word	0x20000000

08004314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004318:	f7ff fff0 	bl	80042fc <HAL_RCC_GetHCLKFreq>
 800431c:	4602      	mov	r2, r0
 800431e:	4b05      	ldr	r3, [pc, #20]	; (8004334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	0a9b      	lsrs	r3, r3, #10
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	4903      	ldr	r1, [pc, #12]	; (8004338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800432a:	5ccb      	ldrb	r3, [r1, r3]
 800432c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004330:	4618      	mov	r0, r3
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40023800 	.word	0x40023800
 8004338:	08006bec 	.word	0x08006bec

0800433c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004340:	f7ff ffdc 	bl	80042fc <HAL_RCC_GetHCLKFreq>
 8004344:	4602      	mov	r2, r0
 8004346:	4b05      	ldr	r3, [pc, #20]	; (800435c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	0b5b      	lsrs	r3, r3, #13
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	4903      	ldr	r1, [pc, #12]	; (8004360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004352:	5ccb      	ldrb	r3, [r1, r3]
 8004354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004358:	4618      	mov	r0, r3
 800435a:	bd80      	pop	{r7, pc}
 800435c:	40023800 	.word	0x40023800
 8004360:	08006bec 	.word	0x08006bec

08004364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e041      	b.n	80043fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fe faf4 	bl	8002978 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2202      	movs	r2, #2
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	3304      	adds	r3, #4
 80043a0:	4619      	mov	r1, r3
 80043a2:	4610      	mov	r0, r2
 80043a4:	f000 fac4 	bl	8004930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3708      	adds	r7, #8
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
	...

08004404 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	d001      	beq.n	800441c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e04e      	b.n	80044ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f042 0201 	orr.w	r2, r2, #1
 8004432:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a23      	ldr	r2, [pc, #140]	; (80044c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d022      	beq.n	8004484 <HAL_TIM_Base_Start_IT+0x80>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004446:	d01d      	beq.n	8004484 <HAL_TIM_Base_Start_IT+0x80>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1f      	ldr	r2, [pc, #124]	; (80044cc <HAL_TIM_Base_Start_IT+0xc8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d018      	beq.n	8004484 <HAL_TIM_Base_Start_IT+0x80>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a1e      	ldr	r2, [pc, #120]	; (80044d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d013      	beq.n	8004484 <HAL_TIM_Base_Start_IT+0x80>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a1c      	ldr	r2, [pc, #112]	; (80044d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00e      	beq.n	8004484 <HAL_TIM_Base_Start_IT+0x80>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a1b      	ldr	r2, [pc, #108]	; (80044d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d009      	beq.n	8004484 <HAL_TIM_Base_Start_IT+0x80>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a19      	ldr	r2, [pc, #100]	; (80044dc <HAL_TIM_Base_Start_IT+0xd8>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d004      	beq.n	8004484 <HAL_TIM_Base_Start_IT+0x80>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a18      	ldr	r2, [pc, #96]	; (80044e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d111      	bne.n	80044a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 0307 	and.w	r3, r3, #7
 800448e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2b06      	cmp	r3, #6
 8004494:	d010      	beq.n	80044b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0201 	orr.w	r2, r2, #1
 80044a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a6:	e007      	b.n	80044b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	40010000 	.word	0x40010000
 80044cc:	40000400 	.word	0x40000400
 80044d0:	40000800 	.word	0x40000800
 80044d4:	40000c00 	.word	0x40000c00
 80044d8:	40010400 	.word	0x40010400
 80044dc:	40014000 	.word	0x40014000
 80044e0:	40001800 	.word	0x40001800

080044e4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0201 	bic.w	r2, r2, #1
 80044fa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6a1a      	ldr	r2, [r3, #32]
 8004502:	f241 1311 	movw	r3, #4369	; 0x1111
 8004506:	4013      	ands	r3, r2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d10f      	bne.n	800452c <HAL_TIM_Base_Stop_IT+0x48>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6a1a      	ldr	r2, [r3, #32]
 8004512:	f240 4344 	movw	r3, #1092	; 0x444
 8004516:	4013      	ands	r3, r2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d107      	bne.n	800452c <HAL_TIM_Base_Stop_IT+0x48>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	370c      	adds	r7, #12
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004542:	b580      	push	{r7, lr}
 8004544:	b082      	sub	sp, #8
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b02      	cmp	r3, #2
 8004556:	d122      	bne.n	800459e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b02      	cmp	r3, #2
 8004564:	d11b      	bne.n	800459e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f06f 0202 	mvn.w	r2, #2
 800456e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	f003 0303 	and.w	r3, r3, #3
 8004580:	2b00      	cmp	r3, #0
 8004582:	d003      	beq.n	800458c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 f9b5 	bl	80048f4 <HAL_TIM_IC_CaptureCallback>
 800458a:	e005      	b.n	8004598 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f9a7 	bl	80048e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 f9b8 	bl	8004908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	691b      	ldr	r3, [r3, #16]
 80045a4:	f003 0304 	and.w	r3, r3, #4
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d122      	bne.n	80045f2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	f003 0304 	and.w	r3, r3, #4
 80045b6:	2b04      	cmp	r3, #4
 80045b8:	d11b      	bne.n	80045f2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f06f 0204 	mvn.w	r2, #4
 80045c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2202      	movs	r2, #2
 80045c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	699b      	ldr	r3, [r3, #24]
 80045d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d003      	beq.n	80045e0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f98b 	bl	80048f4 <HAL_TIM_IC_CaptureCallback>
 80045de:	e005      	b.n	80045ec <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f97d 	bl	80048e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f98e 	bl	8004908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	691b      	ldr	r3, [r3, #16]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b08      	cmp	r3, #8
 80045fe:	d122      	bne.n	8004646 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f003 0308 	and.w	r3, r3, #8
 800460a:	2b08      	cmp	r3, #8
 800460c:	d11b      	bne.n	8004646 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f06f 0208 	mvn.w	r2, #8
 8004616:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2204      	movs	r2, #4
 800461c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	69db      	ldr	r3, [r3, #28]
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f961 	bl	80048f4 <HAL_TIM_IC_CaptureCallback>
 8004632:	e005      	b.n	8004640 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f953 	bl	80048e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f964 	bl	8004908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b10      	cmp	r3, #16
 8004652:	d122      	bne.n	800469a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f003 0310 	and.w	r3, r3, #16
 800465e:	2b10      	cmp	r3, #16
 8004660:	d11b      	bne.n	800469a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f06f 0210 	mvn.w	r2, #16
 800466a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2208      	movs	r2, #8
 8004670:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69db      	ldr	r3, [r3, #28]
 8004678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f937 	bl	80048f4 <HAL_TIM_IC_CaptureCallback>
 8004686:	e005      	b.n	8004694 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f929 	bl	80048e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f93a 	bl	8004908 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d10e      	bne.n	80046c6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d107      	bne.n	80046c6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f06f 0201 	mvn.w	r2, #1
 80046be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7fd ffb5 	bl	8002630 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d0:	2b80      	cmp	r3, #128	; 0x80
 80046d2:	d10e      	bne.n	80046f2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046de:	2b80      	cmp	r3, #128	; 0x80
 80046e0:	d107      	bne.n	80046f2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 fadf 	bl	8004cb0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046fc:	2b40      	cmp	r3, #64	; 0x40
 80046fe:	d10e      	bne.n	800471e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800470a:	2b40      	cmp	r3, #64	; 0x40
 800470c:	d107      	bne.n	800471e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 f8ff 	bl	800491c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f003 0320 	and.w	r3, r3, #32
 8004728:	2b20      	cmp	r3, #32
 800472a:	d10e      	bne.n	800474a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	f003 0320 	and.w	r3, r3, #32
 8004736:	2b20      	cmp	r3, #32
 8004738:	d107      	bne.n	800474a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f06f 0220 	mvn.w	r2, #32
 8004742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 faa9 	bl	8004c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}

08004752 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b084      	sub	sp, #16
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
 800475a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800475c:	2300      	movs	r3, #0
 800475e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004766:	2b01      	cmp	r3, #1
 8004768:	d101      	bne.n	800476e <HAL_TIM_ConfigClockSource+0x1c>
 800476a:	2302      	movs	r3, #2
 800476c:	e0b4      	b.n	80048d8 <HAL_TIM_ConfigClockSource+0x186>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2202      	movs	r2, #2
 800477a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800478c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004794:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047a6:	d03e      	beq.n	8004826 <HAL_TIM_ConfigClockSource+0xd4>
 80047a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ac:	f200 8087 	bhi.w	80048be <HAL_TIM_ConfigClockSource+0x16c>
 80047b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047b4:	f000 8086 	beq.w	80048c4 <HAL_TIM_ConfigClockSource+0x172>
 80047b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047bc:	d87f      	bhi.n	80048be <HAL_TIM_ConfigClockSource+0x16c>
 80047be:	2b70      	cmp	r3, #112	; 0x70
 80047c0:	d01a      	beq.n	80047f8 <HAL_TIM_ConfigClockSource+0xa6>
 80047c2:	2b70      	cmp	r3, #112	; 0x70
 80047c4:	d87b      	bhi.n	80048be <HAL_TIM_ConfigClockSource+0x16c>
 80047c6:	2b60      	cmp	r3, #96	; 0x60
 80047c8:	d050      	beq.n	800486c <HAL_TIM_ConfigClockSource+0x11a>
 80047ca:	2b60      	cmp	r3, #96	; 0x60
 80047cc:	d877      	bhi.n	80048be <HAL_TIM_ConfigClockSource+0x16c>
 80047ce:	2b50      	cmp	r3, #80	; 0x50
 80047d0:	d03c      	beq.n	800484c <HAL_TIM_ConfigClockSource+0xfa>
 80047d2:	2b50      	cmp	r3, #80	; 0x50
 80047d4:	d873      	bhi.n	80048be <HAL_TIM_ConfigClockSource+0x16c>
 80047d6:	2b40      	cmp	r3, #64	; 0x40
 80047d8:	d058      	beq.n	800488c <HAL_TIM_ConfigClockSource+0x13a>
 80047da:	2b40      	cmp	r3, #64	; 0x40
 80047dc:	d86f      	bhi.n	80048be <HAL_TIM_ConfigClockSource+0x16c>
 80047de:	2b30      	cmp	r3, #48	; 0x30
 80047e0:	d064      	beq.n	80048ac <HAL_TIM_ConfigClockSource+0x15a>
 80047e2:	2b30      	cmp	r3, #48	; 0x30
 80047e4:	d86b      	bhi.n	80048be <HAL_TIM_ConfigClockSource+0x16c>
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	d060      	beq.n	80048ac <HAL_TIM_ConfigClockSource+0x15a>
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	d867      	bhi.n	80048be <HAL_TIM_ConfigClockSource+0x16c>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d05c      	beq.n	80048ac <HAL_TIM_ConfigClockSource+0x15a>
 80047f2:	2b10      	cmp	r3, #16
 80047f4:	d05a      	beq.n	80048ac <HAL_TIM_ConfigClockSource+0x15a>
 80047f6:	e062      	b.n	80048be <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6818      	ldr	r0, [r3, #0]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	6899      	ldr	r1, [r3, #8]
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f000 f9ac 	bl	8004b64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800481a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68ba      	ldr	r2, [r7, #8]
 8004822:	609a      	str	r2, [r3, #8]
      break;
 8004824:	e04f      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6818      	ldr	r0, [r3, #0]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	6899      	ldr	r1, [r3, #8]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	f000 f995 	bl	8004b64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004848:	609a      	str	r2, [r3, #8]
      break;
 800484a:	e03c      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6818      	ldr	r0, [r3, #0]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	6859      	ldr	r1, [r3, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	461a      	mov	r2, r3
 800485a:	f000 f909 	bl	8004a70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2150      	movs	r1, #80	; 0x50
 8004864:	4618      	mov	r0, r3
 8004866:	f000 f962 	bl	8004b2e <TIM_ITRx_SetConfig>
      break;
 800486a:	e02c      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6818      	ldr	r0, [r3, #0]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	6859      	ldr	r1, [r3, #4]
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	461a      	mov	r2, r3
 800487a:	f000 f928 	bl	8004ace <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2160      	movs	r1, #96	; 0x60
 8004884:	4618      	mov	r0, r3
 8004886:	f000 f952 	bl	8004b2e <TIM_ITRx_SetConfig>
      break;
 800488a:	e01c      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	6859      	ldr	r1, [r3, #4]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	461a      	mov	r2, r3
 800489a:	f000 f8e9 	bl	8004a70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2140      	movs	r1, #64	; 0x40
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 f942 	bl	8004b2e <TIM_ITRx_SetConfig>
      break;
 80048aa:	e00c      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4619      	mov	r1, r3
 80048b6:	4610      	mov	r0, r2
 80048b8:	f000 f939 	bl	8004b2e <TIM_ITRx_SetConfig>
      break;
 80048bc:	e003      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	73fb      	strb	r3, [r7, #15]
      break;
 80048c2:	e000      	b.n	80048c6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b083      	sub	sp, #12
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048e8:	bf00      	nop
 80048ea:	370c      	adds	r7, #12
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr

080048f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048fc:	bf00      	nop
 80048fe:	370c      	adds	r7, #12
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a40      	ldr	r2, [pc, #256]	; (8004a44 <TIM_Base_SetConfig+0x114>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d013      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494e:	d00f      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a3d      	ldr	r2, [pc, #244]	; (8004a48 <TIM_Base_SetConfig+0x118>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d00b      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a3c      	ldr	r2, [pc, #240]	; (8004a4c <TIM_Base_SetConfig+0x11c>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d007      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a3b      	ldr	r2, [pc, #236]	; (8004a50 <TIM_Base_SetConfig+0x120>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d003      	beq.n	8004970 <TIM_Base_SetConfig+0x40>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a3a      	ldr	r2, [pc, #232]	; (8004a54 <TIM_Base_SetConfig+0x124>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d108      	bne.n	8004982 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a2f      	ldr	r2, [pc, #188]	; (8004a44 <TIM_Base_SetConfig+0x114>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d02b      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004990:	d027      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a2c      	ldr	r2, [pc, #176]	; (8004a48 <TIM_Base_SetConfig+0x118>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d023      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a2b      	ldr	r2, [pc, #172]	; (8004a4c <TIM_Base_SetConfig+0x11c>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d01f      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a2a      	ldr	r2, [pc, #168]	; (8004a50 <TIM_Base_SetConfig+0x120>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d01b      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a29      	ldr	r2, [pc, #164]	; (8004a54 <TIM_Base_SetConfig+0x124>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d017      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a28      	ldr	r2, [pc, #160]	; (8004a58 <TIM_Base_SetConfig+0x128>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a27      	ldr	r2, [pc, #156]	; (8004a5c <TIM_Base_SetConfig+0x12c>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d00f      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a26      	ldr	r2, [pc, #152]	; (8004a60 <TIM_Base_SetConfig+0x130>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d00b      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a25      	ldr	r2, [pc, #148]	; (8004a64 <TIM_Base_SetConfig+0x134>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d007      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a24      	ldr	r2, [pc, #144]	; (8004a68 <TIM_Base_SetConfig+0x138>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d003      	beq.n	80049e2 <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a23      	ldr	r2, [pc, #140]	; (8004a6c <TIM_Base_SetConfig+0x13c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d108      	bne.n	80049f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4313      	orrs	r3, r2
 80049f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a0a      	ldr	r2, [pc, #40]	; (8004a44 <TIM_Base_SetConfig+0x114>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d003      	beq.n	8004a28 <TIM_Base_SetConfig+0xf8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	4a0c      	ldr	r2, [pc, #48]	; (8004a54 <TIM_Base_SetConfig+0x124>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d103      	bne.n	8004a30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	691a      	ldr	r2, [r3, #16]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	615a      	str	r2, [r3, #20]
}
 8004a36:	bf00      	nop
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	40010000 	.word	0x40010000
 8004a48:	40000400 	.word	0x40000400
 8004a4c:	40000800 	.word	0x40000800
 8004a50:	40000c00 	.word	0x40000c00
 8004a54:	40010400 	.word	0x40010400
 8004a58:	40014000 	.word	0x40014000
 8004a5c:	40014400 	.word	0x40014400
 8004a60:	40014800 	.word	0x40014800
 8004a64:	40001800 	.word	0x40001800
 8004a68:	40001c00 	.word	0x40001c00
 8004a6c:	40002000 	.word	0x40002000

08004a70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6a1b      	ldr	r3, [r3, #32]
 8004a80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f023 0201 	bic.w	r2, r3, #1
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	f023 030a 	bic.w	r3, r3, #10
 8004aac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	693a      	ldr	r2, [r7, #16]
 8004aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	621a      	str	r2, [r3, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b087      	sub	sp, #28
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	60f8      	str	r0, [r7, #12]
 8004ad6:	60b9      	str	r1, [r7, #8]
 8004ad8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f023 0210 	bic.w	r2, r3, #16
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004af8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	031b      	lsls	r3, r3, #12
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4313      	orrs	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	621a      	str	r2, [r3, #32]
}
 8004b22:	bf00      	nop
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b085      	sub	sp, #20
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
 8004b36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f043 0307 	orr.w	r3, r3, #7
 8004b50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	609a      	str	r2, [r3, #8]
}
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	021a      	lsls	r2, r3, #8
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	431a      	orrs	r2, r3
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	697a      	ldr	r2, [r7, #20]
 8004b96:	609a      	str	r2, [r3, #8]
}
 8004b98:	bf00      	nop
 8004b9a:	371c      	adds	r7, #28
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d101      	bne.n	8004bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bb8:	2302      	movs	r3, #2
 8004bba:	e05a      	b.n	8004c72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2201      	movs	r2, #1
 8004bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2202      	movs	r2, #2
 8004bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	4313      	orrs	r3, r2
 8004bec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68fa      	ldr	r2, [r7, #12]
 8004bf4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a21      	ldr	r2, [pc, #132]	; (8004c80 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d022      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c08:	d01d      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a1d      	ldr	r2, [pc, #116]	; (8004c84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d018      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a1b      	ldr	r2, [pc, #108]	; (8004c88 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d013      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a1a      	ldr	r2, [pc, #104]	; (8004c8c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d00e      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a18      	ldr	r2, [pc, #96]	; (8004c90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d009      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a17      	ldr	r2, [pc, #92]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d004      	beq.n	8004c46 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a15      	ldr	r2, [pc, #84]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d10c      	bne.n	8004c60 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c4c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	68ba      	ldr	r2, [r7, #8]
 8004c54:	4313      	orrs	r3, r2
 8004c56:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68ba      	ldr	r2, [r7, #8]
 8004c5e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	40010000 	.word	0x40010000
 8004c84:	40000400 	.word	0x40000400
 8004c88:	40000800 	.word	0x40000800
 8004c8c:	40000c00 	.word	0x40000c00
 8004c90:	40010400 	.word	0x40010400
 8004c94:	40014000 	.word	0x40014000
 8004c98:	40001800 	.word	0x40001800

08004c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ca4:	bf00      	nop
 8004ca6:	370c      	adds	r7, #12
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cae:	4770      	bx	lr

08004cb0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b083      	sub	sp, #12
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b082      	sub	sp, #8
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e03f      	b.n	8004d56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d106      	bne.n	8004cf0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f7fd fe6a 	bl	80029c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2224      	movs	r2, #36	; 0x24
 8004cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68da      	ldr	r2, [r3, #12]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 f929 	bl	8004f60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	695a      	ldr	r2, [r3, #20]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68da      	ldr	r2, [r3, #12]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2220      	movs	r2, #32
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d54:	2300      	movs	r3, #0
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3708      	adds	r7, #8
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b08a      	sub	sp, #40	; 0x28
 8004d62:	af02      	add	r7, sp, #8
 8004d64:	60f8      	str	r0, [r7, #12]
 8004d66:	60b9      	str	r1, [r7, #8]
 8004d68:	603b      	str	r3, [r7, #0]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d78:	b2db      	uxtb	r3, r3
 8004d7a:	2b20      	cmp	r3, #32
 8004d7c:	d17c      	bne.n	8004e78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <HAL_UART_Transmit+0x2c>
 8004d84:	88fb      	ldrh	r3, [r7, #6]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e075      	b.n	8004e7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d101      	bne.n	8004d9c <HAL_UART_Transmit+0x3e>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	e06e      	b.n	8004e7a <HAL_UART_Transmit+0x11c>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2221      	movs	r2, #33	; 0x21
 8004dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004db2:	f7fd ff91 	bl	8002cd8 <HAL_GetTick>
 8004db6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	88fa      	ldrh	r2, [r7, #6]
 8004dbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	88fa      	ldrh	r2, [r7, #6]
 8004dc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dcc:	d108      	bne.n	8004de0 <HAL_UART_Transmit+0x82>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d104      	bne.n	8004de0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	61bb      	str	r3, [r7, #24]
 8004dde:	e003      	b.n	8004de8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004df0:	e02a      	b.n	8004e48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2180      	movs	r1, #128	; 0x80
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f000 f840 	bl	8004e82 <UART_WaitOnFlagUntilTimeout>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e036      	b.n	8004e7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10b      	bne.n	8004e2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	461a      	mov	r2, r3
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	3302      	adds	r3, #2
 8004e26:	61bb      	str	r3, [r7, #24]
 8004e28:	e007      	b.n	8004e3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	781a      	ldrb	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	3301      	adds	r3, #1
 8004e38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1cf      	bne.n	8004df2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2140      	movs	r1, #64	; 0x40
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 f810 	bl	8004e82 <UART_WaitOnFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e006      	b.n	8004e7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004e74:	2300      	movs	r3, #0
 8004e76:	e000      	b.n	8004e7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004e78:	2302      	movs	r3, #2
  }
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3720      	adds	r7, #32
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b090      	sub	sp, #64	; 0x40
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	60f8      	str	r0, [r7, #12]
 8004e8a:	60b9      	str	r1, [r7, #8]
 8004e8c:	603b      	str	r3, [r7, #0]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e92:	e050      	b.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9a:	d04c      	beq.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d007      	beq.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ea2:	f7fd ff19 	bl	8002cd8 <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d241      	bcs.n	8004f36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	330c      	adds	r3, #12
 8004eb8:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebc:	e853 3f00 	ldrex	r3, [r3]
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ec8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	330c      	adds	r3, #12
 8004ed0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004ed2:	637a      	str	r2, [r7, #52]	; 0x34
 8004ed4:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004ed8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eda:	e841 2300 	strex	r3, r2, [r1]
 8004ede:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1e5      	bne.n	8004eb2 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	3314      	adds	r3, #20
 8004eec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	e853 3f00 	ldrex	r3, [r3]
 8004ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	f023 0301 	bic.w	r3, r3, #1
 8004efc:	63bb      	str	r3, [r7, #56]	; 0x38
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	3314      	adds	r3, #20
 8004f04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f06:	623a      	str	r2, [r7, #32]
 8004f08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f0a:	69f9      	ldr	r1, [r7, #28]
 8004f0c:	6a3a      	ldr	r2, [r7, #32]
 8004f0e:	e841 2300 	strex	r3, r2, [r1]
 8004f12:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1e5      	bne.n	8004ee6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2220      	movs	r2, #32
 8004f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f32:	2303      	movs	r3, #3
 8004f34:	e00f      	b.n	8004f56 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	4013      	ands	r3, r2
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	bf0c      	ite	eq
 8004f46:	2301      	moveq	r3, #1
 8004f48:	2300      	movne	r3, #0
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	79fb      	ldrb	r3, [r7, #7]
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d09f      	beq.n	8004e94 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3740      	adds	r7, #64	; 0x40
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f64:	b09f      	sub	sp, #124	; 0x7c
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f76:	68d9      	ldr	r1, [r3, #12]
 8004f78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	ea40 0301 	orr.w	r3, r0, r1
 8004f80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f84:	689a      	ldr	r2, [r3, #8]
 8004f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	431a      	orrs	r2, r3
 8004f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f94:	69db      	ldr	r3, [r3, #28]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004f9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004fa4:	f021 010c 	bic.w	r1, r1, #12
 8004fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004fae:	430b      	orrs	r3, r1
 8004fb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004fbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fbe:	6999      	ldr	r1, [r3, #24]
 8004fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	ea40 0301 	orr.w	r3, r0, r1
 8004fc8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4bc5      	ldr	r3, [pc, #788]	; (80052e4 <UART_SetConfig+0x384>)
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d004      	beq.n	8004fde <UART_SetConfig+0x7e>
 8004fd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd6:	681a      	ldr	r2, [r3, #0]
 8004fd8:	4bc3      	ldr	r3, [pc, #780]	; (80052e8 <UART_SetConfig+0x388>)
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d103      	bne.n	8004fe6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fde:	f7ff f9ad 	bl	800433c <HAL_RCC_GetPCLK2Freq>
 8004fe2:	6778      	str	r0, [r7, #116]	; 0x74
 8004fe4:	e002      	b.n	8004fec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fe6:	f7ff f995 	bl	8004314 <HAL_RCC_GetPCLK1Freq>
 8004fea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fee:	69db      	ldr	r3, [r3, #28]
 8004ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ff4:	f040 80b6 	bne.w	8005164 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ff8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ffa:	461c      	mov	r4, r3
 8004ffc:	f04f 0500 	mov.w	r5, #0
 8005000:	4622      	mov	r2, r4
 8005002:	462b      	mov	r3, r5
 8005004:	1891      	adds	r1, r2, r2
 8005006:	6439      	str	r1, [r7, #64]	; 0x40
 8005008:	415b      	adcs	r3, r3
 800500a:	647b      	str	r3, [r7, #68]	; 0x44
 800500c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005010:	1912      	adds	r2, r2, r4
 8005012:	eb45 0303 	adc.w	r3, r5, r3
 8005016:	f04f 0000 	mov.w	r0, #0
 800501a:	f04f 0100 	mov.w	r1, #0
 800501e:	00d9      	lsls	r1, r3, #3
 8005020:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005024:	00d0      	lsls	r0, r2, #3
 8005026:	4602      	mov	r2, r0
 8005028:	460b      	mov	r3, r1
 800502a:	1911      	adds	r1, r2, r4
 800502c:	6639      	str	r1, [r7, #96]	; 0x60
 800502e:	416b      	adcs	r3, r5
 8005030:	667b      	str	r3, [r7, #100]	; 0x64
 8005032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	461a      	mov	r2, r3
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	1891      	adds	r1, r2, r2
 800503e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005040:	415b      	adcs	r3, r3
 8005042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005044:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005048:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800504c:	f7fb fda4 	bl	8000b98 <__aeabi_uldivmod>
 8005050:	4602      	mov	r2, r0
 8005052:	460b      	mov	r3, r1
 8005054:	4ba5      	ldr	r3, [pc, #660]	; (80052ec <UART_SetConfig+0x38c>)
 8005056:	fba3 2302 	umull	r2, r3, r3, r2
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	011e      	lsls	r6, r3, #4
 800505e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005060:	461c      	mov	r4, r3
 8005062:	f04f 0500 	mov.w	r5, #0
 8005066:	4622      	mov	r2, r4
 8005068:	462b      	mov	r3, r5
 800506a:	1891      	adds	r1, r2, r2
 800506c:	6339      	str	r1, [r7, #48]	; 0x30
 800506e:	415b      	adcs	r3, r3
 8005070:	637b      	str	r3, [r7, #52]	; 0x34
 8005072:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005076:	1912      	adds	r2, r2, r4
 8005078:	eb45 0303 	adc.w	r3, r5, r3
 800507c:	f04f 0000 	mov.w	r0, #0
 8005080:	f04f 0100 	mov.w	r1, #0
 8005084:	00d9      	lsls	r1, r3, #3
 8005086:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800508a:	00d0      	lsls	r0, r2, #3
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	1911      	adds	r1, r2, r4
 8005092:	65b9      	str	r1, [r7, #88]	; 0x58
 8005094:	416b      	adcs	r3, r5
 8005096:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	461a      	mov	r2, r3
 800509e:	f04f 0300 	mov.w	r3, #0
 80050a2:	1891      	adds	r1, r2, r2
 80050a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80050a6:	415b      	adcs	r3, r3
 80050a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80050b2:	f7fb fd71 	bl	8000b98 <__aeabi_uldivmod>
 80050b6:	4602      	mov	r2, r0
 80050b8:	460b      	mov	r3, r1
 80050ba:	4b8c      	ldr	r3, [pc, #560]	; (80052ec <UART_SetConfig+0x38c>)
 80050bc:	fba3 1302 	umull	r1, r3, r3, r2
 80050c0:	095b      	lsrs	r3, r3, #5
 80050c2:	2164      	movs	r1, #100	; 0x64
 80050c4:	fb01 f303 	mul.w	r3, r1, r3
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	3332      	adds	r3, #50	; 0x32
 80050ce:	4a87      	ldr	r2, [pc, #540]	; (80052ec <UART_SetConfig+0x38c>)
 80050d0:	fba2 2303 	umull	r2, r3, r2, r3
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050dc:	441e      	add	r6, r3
 80050de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050e0:	4618      	mov	r0, r3
 80050e2:	f04f 0100 	mov.w	r1, #0
 80050e6:	4602      	mov	r2, r0
 80050e8:	460b      	mov	r3, r1
 80050ea:	1894      	adds	r4, r2, r2
 80050ec:	623c      	str	r4, [r7, #32]
 80050ee:	415b      	adcs	r3, r3
 80050f0:	627b      	str	r3, [r7, #36]	; 0x24
 80050f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050f6:	1812      	adds	r2, r2, r0
 80050f8:	eb41 0303 	adc.w	r3, r1, r3
 80050fc:	f04f 0400 	mov.w	r4, #0
 8005100:	f04f 0500 	mov.w	r5, #0
 8005104:	00dd      	lsls	r5, r3, #3
 8005106:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800510a:	00d4      	lsls	r4, r2, #3
 800510c:	4622      	mov	r2, r4
 800510e:	462b      	mov	r3, r5
 8005110:	1814      	adds	r4, r2, r0
 8005112:	653c      	str	r4, [r7, #80]	; 0x50
 8005114:	414b      	adcs	r3, r1
 8005116:	657b      	str	r3, [r7, #84]	; 0x54
 8005118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	461a      	mov	r2, r3
 800511e:	f04f 0300 	mov.w	r3, #0
 8005122:	1891      	adds	r1, r2, r2
 8005124:	61b9      	str	r1, [r7, #24]
 8005126:	415b      	adcs	r3, r3
 8005128:	61fb      	str	r3, [r7, #28]
 800512a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800512e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005132:	f7fb fd31 	bl	8000b98 <__aeabi_uldivmod>
 8005136:	4602      	mov	r2, r0
 8005138:	460b      	mov	r3, r1
 800513a:	4b6c      	ldr	r3, [pc, #432]	; (80052ec <UART_SetConfig+0x38c>)
 800513c:	fba3 1302 	umull	r1, r3, r3, r2
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	2164      	movs	r1, #100	; 0x64
 8005144:	fb01 f303 	mul.w	r3, r1, r3
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	3332      	adds	r3, #50	; 0x32
 800514e:	4a67      	ldr	r2, [pc, #412]	; (80052ec <UART_SetConfig+0x38c>)
 8005150:	fba2 2303 	umull	r2, r3, r2, r3
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	f003 0207 	and.w	r2, r3, #7
 800515a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4432      	add	r2, r6
 8005160:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005162:	e0b9      	b.n	80052d8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005164:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005166:	461c      	mov	r4, r3
 8005168:	f04f 0500 	mov.w	r5, #0
 800516c:	4622      	mov	r2, r4
 800516e:	462b      	mov	r3, r5
 8005170:	1891      	adds	r1, r2, r2
 8005172:	6139      	str	r1, [r7, #16]
 8005174:	415b      	adcs	r3, r3
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800517c:	1912      	adds	r2, r2, r4
 800517e:	eb45 0303 	adc.w	r3, r5, r3
 8005182:	f04f 0000 	mov.w	r0, #0
 8005186:	f04f 0100 	mov.w	r1, #0
 800518a:	00d9      	lsls	r1, r3, #3
 800518c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005190:	00d0      	lsls	r0, r2, #3
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	eb12 0804 	adds.w	r8, r2, r4
 800519a:	eb43 0905 	adc.w	r9, r3, r5
 800519e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	4618      	mov	r0, r3
 80051a4:	f04f 0100 	mov.w	r1, #0
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	008b      	lsls	r3, r1, #2
 80051b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80051b6:	0082      	lsls	r2, r0, #2
 80051b8:	4640      	mov	r0, r8
 80051ba:	4649      	mov	r1, r9
 80051bc:	f7fb fcec 	bl	8000b98 <__aeabi_uldivmod>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	4b49      	ldr	r3, [pc, #292]	; (80052ec <UART_SetConfig+0x38c>)
 80051c6:	fba3 2302 	umull	r2, r3, r3, r2
 80051ca:	095b      	lsrs	r3, r3, #5
 80051cc:	011e      	lsls	r6, r3, #4
 80051ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051d0:	4618      	mov	r0, r3
 80051d2:	f04f 0100 	mov.w	r1, #0
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	1894      	adds	r4, r2, r2
 80051dc:	60bc      	str	r4, [r7, #8]
 80051de:	415b      	adcs	r3, r3
 80051e0:	60fb      	str	r3, [r7, #12]
 80051e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051e6:	1812      	adds	r2, r2, r0
 80051e8:	eb41 0303 	adc.w	r3, r1, r3
 80051ec:	f04f 0400 	mov.w	r4, #0
 80051f0:	f04f 0500 	mov.w	r5, #0
 80051f4:	00dd      	lsls	r5, r3, #3
 80051f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051fa:	00d4      	lsls	r4, r2, #3
 80051fc:	4622      	mov	r2, r4
 80051fe:	462b      	mov	r3, r5
 8005200:	1814      	adds	r4, r2, r0
 8005202:	64bc      	str	r4, [r7, #72]	; 0x48
 8005204:	414b      	adcs	r3, r1
 8005206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	4618      	mov	r0, r3
 800520e:	f04f 0100 	mov.w	r1, #0
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	f04f 0300 	mov.w	r3, #0
 800521a:	008b      	lsls	r3, r1, #2
 800521c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005220:	0082      	lsls	r2, r0, #2
 8005222:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005226:	f7fb fcb7 	bl	8000b98 <__aeabi_uldivmod>
 800522a:	4602      	mov	r2, r0
 800522c:	460b      	mov	r3, r1
 800522e:	4b2f      	ldr	r3, [pc, #188]	; (80052ec <UART_SetConfig+0x38c>)
 8005230:	fba3 1302 	umull	r1, r3, r3, r2
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	2164      	movs	r1, #100	; 0x64
 8005238:	fb01 f303 	mul.w	r3, r1, r3
 800523c:	1ad3      	subs	r3, r2, r3
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	3332      	adds	r3, #50	; 0x32
 8005242:	4a2a      	ldr	r2, [pc, #168]	; (80052ec <UART_SetConfig+0x38c>)
 8005244:	fba2 2303 	umull	r2, r3, r2, r3
 8005248:	095b      	lsrs	r3, r3, #5
 800524a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800524e:	441e      	add	r6, r3
 8005250:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005252:	4618      	mov	r0, r3
 8005254:	f04f 0100 	mov.w	r1, #0
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	1894      	adds	r4, r2, r2
 800525e:	603c      	str	r4, [r7, #0]
 8005260:	415b      	adcs	r3, r3
 8005262:	607b      	str	r3, [r7, #4]
 8005264:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005268:	1812      	adds	r2, r2, r0
 800526a:	eb41 0303 	adc.w	r3, r1, r3
 800526e:	f04f 0400 	mov.w	r4, #0
 8005272:	f04f 0500 	mov.w	r5, #0
 8005276:	00dd      	lsls	r5, r3, #3
 8005278:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800527c:	00d4      	lsls	r4, r2, #3
 800527e:	4622      	mov	r2, r4
 8005280:	462b      	mov	r3, r5
 8005282:	eb12 0a00 	adds.w	sl, r2, r0
 8005286:	eb43 0b01 	adc.w	fp, r3, r1
 800528a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	4618      	mov	r0, r3
 8005290:	f04f 0100 	mov.w	r1, #0
 8005294:	f04f 0200 	mov.w	r2, #0
 8005298:	f04f 0300 	mov.w	r3, #0
 800529c:	008b      	lsls	r3, r1, #2
 800529e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052a2:	0082      	lsls	r2, r0, #2
 80052a4:	4650      	mov	r0, sl
 80052a6:	4659      	mov	r1, fp
 80052a8:	f7fb fc76 	bl	8000b98 <__aeabi_uldivmod>
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	4b0e      	ldr	r3, [pc, #56]	; (80052ec <UART_SetConfig+0x38c>)
 80052b2:	fba3 1302 	umull	r1, r3, r3, r2
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	2164      	movs	r1, #100	; 0x64
 80052ba:	fb01 f303 	mul.w	r3, r1, r3
 80052be:	1ad3      	subs	r3, r2, r3
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	3332      	adds	r3, #50	; 0x32
 80052c4:	4a09      	ldr	r2, [pc, #36]	; (80052ec <UART_SetConfig+0x38c>)
 80052c6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	f003 020f 	and.w	r2, r3, #15
 80052d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4432      	add	r2, r6
 80052d6:	609a      	str	r2, [r3, #8]
}
 80052d8:	bf00      	nop
 80052da:	377c      	adds	r7, #124	; 0x7c
 80052dc:	46bd      	mov	sp, r7
 80052de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e2:	bf00      	nop
 80052e4:	40011000 	.word	0x40011000
 80052e8:	40011400 	.word	0x40011400
 80052ec:	51eb851f 	.word	0x51eb851f

080052f0 <__errno>:
 80052f0:	4b01      	ldr	r3, [pc, #4]	; (80052f8 <__errno+0x8>)
 80052f2:	6818      	ldr	r0, [r3, #0]
 80052f4:	4770      	bx	lr
 80052f6:	bf00      	nop
 80052f8:	2000000c 	.word	0x2000000c

080052fc <__libc_init_array>:
 80052fc:	b570      	push	{r4, r5, r6, lr}
 80052fe:	4d0d      	ldr	r5, [pc, #52]	; (8005334 <__libc_init_array+0x38>)
 8005300:	4c0d      	ldr	r4, [pc, #52]	; (8005338 <__libc_init_array+0x3c>)
 8005302:	1b64      	subs	r4, r4, r5
 8005304:	10a4      	asrs	r4, r4, #2
 8005306:	2600      	movs	r6, #0
 8005308:	42a6      	cmp	r6, r4
 800530a:	d109      	bne.n	8005320 <__libc_init_array+0x24>
 800530c:	4d0b      	ldr	r5, [pc, #44]	; (800533c <__libc_init_array+0x40>)
 800530e:	4c0c      	ldr	r4, [pc, #48]	; (8005340 <__libc_init_array+0x44>)
 8005310:	f001 fc38 	bl	8006b84 <_init>
 8005314:	1b64      	subs	r4, r4, r5
 8005316:	10a4      	asrs	r4, r4, #2
 8005318:	2600      	movs	r6, #0
 800531a:	42a6      	cmp	r6, r4
 800531c:	d105      	bne.n	800532a <__libc_init_array+0x2e>
 800531e:	bd70      	pop	{r4, r5, r6, pc}
 8005320:	f855 3b04 	ldr.w	r3, [r5], #4
 8005324:	4798      	blx	r3
 8005326:	3601      	adds	r6, #1
 8005328:	e7ee      	b.n	8005308 <__libc_init_array+0xc>
 800532a:	f855 3b04 	ldr.w	r3, [r5], #4
 800532e:	4798      	blx	r3
 8005330:	3601      	adds	r6, #1
 8005332:	e7f2      	b.n	800531a <__libc_init_array+0x1e>
 8005334:	08006c70 	.word	0x08006c70
 8005338:	08006c70 	.word	0x08006c70
 800533c:	08006c70 	.word	0x08006c70
 8005340:	08006c74 	.word	0x08006c74

08005344 <memset>:
 8005344:	4402      	add	r2, r0
 8005346:	4603      	mov	r3, r0
 8005348:	4293      	cmp	r3, r2
 800534a:	d100      	bne.n	800534e <memset+0xa>
 800534c:	4770      	bx	lr
 800534e:	f803 1b01 	strb.w	r1, [r3], #1
 8005352:	e7f9      	b.n	8005348 <memset+0x4>

08005354 <siprintf>:
 8005354:	b40e      	push	{r1, r2, r3}
 8005356:	b500      	push	{lr}
 8005358:	b09c      	sub	sp, #112	; 0x70
 800535a:	ab1d      	add	r3, sp, #116	; 0x74
 800535c:	9002      	str	r0, [sp, #8]
 800535e:	9006      	str	r0, [sp, #24]
 8005360:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005364:	4809      	ldr	r0, [pc, #36]	; (800538c <siprintf+0x38>)
 8005366:	9107      	str	r1, [sp, #28]
 8005368:	9104      	str	r1, [sp, #16]
 800536a:	4909      	ldr	r1, [pc, #36]	; (8005390 <siprintf+0x3c>)
 800536c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005370:	9105      	str	r1, [sp, #20]
 8005372:	6800      	ldr	r0, [r0, #0]
 8005374:	9301      	str	r3, [sp, #4]
 8005376:	a902      	add	r1, sp, #8
 8005378:	f000 f868 	bl	800544c <_svfiprintf_r>
 800537c:	9b02      	ldr	r3, [sp, #8]
 800537e:	2200      	movs	r2, #0
 8005380:	701a      	strb	r2, [r3, #0]
 8005382:	b01c      	add	sp, #112	; 0x70
 8005384:	f85d eb04 	ldr.w	lr, [sp], #4
 8005388:	b003      	add	sp, #12
 800538a:	4770      	bx	lr
 800538c:	2000000c 	.word	0x2000000c
 8005390:	ffff0208 	.word	0xffff0208

08005394 <__ssputs_r>:
 8005394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005398:	688e      	ldr	r6, [r1, #8]
 800539a:	429e      	cmp	r6, r3
 800539c:	4682      	mov	sl, r0
 800539e:	460c      	mov	r4, r1
 80053a0:	4690      	mov	r8, r2
 80053a2:	461f      	mov	r7, r3
 80053a4:	d838      	bhi.n	8005418 <__ssputs_r+0x84>
 80053a6:	898a      	ldrh	r2, [r1, #12]
 80053a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80053ac:	d032      	beq.n	8005414 <__ssputs_r+0x80>
 80053ae:	6825      	ldr	r5, [r4, #0]
 80053b0:	6909      	ldr	r1, [r1, #16]
 80053b2:	eba5 0901 	sub.w	r9, r5, r1
 80053b6:	6965      	ldr	r5, [r4, #20]
 80053b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80053bc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80053c0:	3301      	adds	r3, #1
 80053c2:	444b      	add	r3, r9
 80053c4:	106d      	asrs	r5, r5, #1
 80053c6:	429d      	cmp	r5, r3
 80053c8:	bf38      	it	cc
 80053ca:	461d      	movcc	r5, r3
 80053cc:	0553      	lsls	r3, r2, #21
 80053ce:	d531      	bpl.n	8005434 <__ssputs_r+0xa0>
 80053d0:	4629      	mov	r1, r5
 80053d2:	f000 fb47 	bl	8005a64 <_malloc_r>
 80053d6:	4606      	mov	r6, r0
 80053d8:	b950      	cbnz	r0, 80053f0 <__ssputs_r+0x5c>
 80053da:	230c      	movs	r3, #12
 80053dc:	f8ca 3000 	str.w	r3, [sl]
 80053e0:	89a3      	ldrh	r3, [r4, #12]
 80053e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053e6:	81a3      	strh	r3, [r4, #12]
 80053e8:	f04f 30ff 	mov.w	r0, #4294967295
 80053ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053f0:	6921      	ldr	r1, [r4, #16]
 80053f2:	464a      	mov	r2, r9
 80053f4:	f000 fabe 	bl	8005974 <memcpy>
 80053f8:	89a3      	ldrh	r3, [r4, #12]
 80053fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005402:	81a3      	strh	r3, [r4, #12]
 8005404:	6126      	str	r6, [r4, #16]
 8005406:	6165      	str	r5, [r4, #20]
 8005408:	444e      	add	r6, r9
 800540a:	eba5 0509 	sub.w	r5, r5, r9
 800540e:	6026      	str	r6, [r4, #0]
 8005410:	60a5      	str	r5, [r4, #8]
 8005412:	463e      	mov	r6, r7
 8005414:	42be      	cmp	r6, r7
 8005416:	d900      	bls.n	800541a <__ssputs_r+0x86>
 8005418:	463e      	mov	r6, r7
 800541a:	4632      	mov	r2, r6
 800541c:	6820      	ldr	r0, [r4, #0]
 800541e:	4641      	mov	r1, r8
 8005420:	f000 fab6 	bl	8005990 <memmove>
 8005424:	68a3      	ldr	r3, [r4, #8]
 8005426:	6822      	ldr	r2, [r4, #0]
 8005428:	1b9b      	subs	r3, r3, r6
 800542a:	4432      	add	r2, r6
 800542c:	60a3      	str	r3, [r4, #8]
 800542e:	6022      	str	r2, [r4, #0]
 8005430:	2000      	movs	r0, #0
 8005432:	e7db      	b.n	80053ec <__ssputs_r+0x58>
 8005434:	462a      	mov	r2, r5
 8005436:	f000 fb6f 	bl	8005b18 <_realloc_r>
 800543a:	4606      	mov	r6, r0
 800543c:	2800      	cmp	r0, #0
 800543e:	d1e1      	bne.n	8005404 <__ssputs_r+0x70>
 8005440:	6921      	ldr	r1, [r4, #16]
 8005442:	4650      	mov	r0, sl
 8005444:	f000 fabe 	bl	80059c4 <_free_r>
 8005448:	e7c7      	b.n	80053da <__ssputs_r+0x46>
	...

0800544c <_svfiprintf_r>:
 800544c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005450:	4698      	mov	r8, r3
 8005452:	898b      	ldrh	r3, [r1, #12]
 8005454:	061b      	lsls	r3, r3, #24
 8005456:	b09d      	sub	sp, #116	; 0x74
 8005458:	4607      	mov	r7, r0
 800545a:	460d      	mov	r5, r1
 800545c:	4614      	mov	r4, r2
 800545e:	d50e      	bpl.n	800547e <_svfiprintf_r+0x32>
 8005460:	690b      	ldr	r3, [r1, #16]
 8005462:	b963      	cbnz	r3, 800547e <_svfiprintf_r+0x32>
 8005464:	2140      	movs	r1, #64	; 0x40
 8005466:	f000 fafd 	bl	8005a64 <_malloc_r>
 800546a:	6028      	str	r0, [r5, #0]
 800546c:	6128      	str	r0, [r5, #16]
 800546e:	b920      	cbnz	r0, 800547a <_svfiprintf_r+0x2e>
 8005470:	230c      	movs	r3, #12
 8005472:	603b      	str	r3, [r7, #0]
 8005474:	f04f 30ff 	mov.w	r0, #4294967295
 8005478:	e0d1      	b.n	800561e <_svfiprintf_r+0x1d2>
 800547a:	2340      	movs	r3, #64	; 0x40
 800547c:	616b      	str	r3, [r5, #20]
 800547e:	2300      	movs	r3, #0
 8005480:	9309      	str	r3, [sp, #36]	; 0x24
 8005482:	2320      	movs	r3, #32
 8005484:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005488:	f8cd 800c 	str.w	r8, [sp, #12]
 800548c:	2330      	movs	r3, #48	; 0x30
 800548e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005638 <_svfiprintf_r+0x1ec>
 8005492:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005496:	f04f 0901 	mov.w	r9, #1
 800549a:	4623      	mov	r3, r4
 800549c:	469a      	mov	sl, r3
 800549e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054a2:	b10a      	cbz	r2, 80054a8 <_svfiprintf_r+0x5c>
 80054a4:	2a25      	cmp	r2, #37	; 0x25
 80054a6:	d1f9      	bne.n	800549c <_svfiprintf_r+0x50>
 80054a8:	ebba 0b04 	subs.w	fp, sl, r4
 80054ac:	d00b      	beq.n	80054c6 <_svfiprintf_r+0x7a>
 80054ae:	465b      	mov	r3, fp
 80054b0:	4622      	mov	r2, r4
 80054b2:	4629      	mov	r1, r5
 80054b4:	4638      	mov	r0, r7
 80054b6:	f7ff ff6d 	bl	8005394 <__ssputs_r>
 80054ba:	3001      	adds	r0, #1
 80054bc:	f000 80aa 	beq.w	8005614 <_svfiprintf_r+0x1c8>
 80054c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054c2:	445a      	add	r2, fp
 80054c4:	9209      	str	r2, [sp, #36]	; 0x24
 80054c6:	f89a 3000 	ldrb.w	r3, [sl]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 80a2 	beq.w	8005614 <_svfiprintf_r+0x1c8>
 80054d0:	2300      	movs	r3, #0
 80054d2:	f04f 32ff 	mov.w	r2, #4294967295
 80054d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054da:	f10a 0a01 	add.w	sl, sl, #1
 80054de:	9304      	str	r3, [sp, #16]
 80054e0:	9307      	str	r3, [sp, #28]
 80054e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054e6:	931a      	str	r3, [sp, #104]	; 0x68
 80054e8:	4654      	mov	r4, sl
 80054ea:	2205      	movs	r2, #5
 80054ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054f0:	4851      	ldr	r0, [pc, #324]	; (8005638 <_svfiprintf_r+0x1ec>)
 80054f2:	f7fa fe6d 	bl	80001d0 <memchr>
 80054f6:	9a04      	ldr	r2, [sp, #16]
 80054f8:	b9d8      	cbnz	r0, 8005532 <_svfiprintf_r+0xe6>
 80054fa:	06d0      	lsls	r0, r2, #27
 80054fc:	bf44      	itt	mi
 80054fe:	2320      	movmi	r3, #32
 8005500:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005504:	0711      	lsls	r1, r2, #28
 8005506:	bf44      	itt	mi
 8005508:	232b      	movmi	r3, #43	; 0x2b
 800550a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800550e:	f89a 3000 	ldrb.w	r3, [sl]
 8005512:	2b2a      	cmp	r3, #42	; 0x2a
 8005514:	d015      	beq.n	8005542 <_svfiprintf_r+0xf6>
 8005516:	9a07      	ldr	r2, [sp, #28]
 8005518:	4654      	mov	r4, sl
 800551a:	2000      	movs	r0, #0
 800551c:	f04f 0c0a 	mov.w	ip, #10
 8005520:	4621      	mov	r1, r4
 8005522:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005526:	3b30      	subs	r3, #48	; 0x30
 8005528:	2b09      	cmp	r3, #9
 800552a:	d94e      	bls.n	80055ca <_svfiprintf_r+0x17e>
 800552c:	b1b0      	cbz	r0, 800555c <_svfiprintf_r+0x110>
 800552e:	9207      	str	r2, [sp, #28]
 8005530:	e014      	b.n	800555c <_svfiprintf_r+0x110>
 8005532:	eba0 0308 	sub.w	r3, r0, r8
 8005536:	fa09 f303 	lsl.w	r3, r9, r3
 800553a:	4313      	orrs	r3, r2
 800553c:	9304      	str	r3, [sp, #16]
 800553e:	46a2      	mov	sl, r4
 8005540:	e7d2      	b.n	80054e8 <_svfiprintf_r+0x9c>
 8005542:	9b03      	ldr	r3, [sp, #12]
 8005544:	1d19      	adds	r1, r3, #4
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	9103      	str	r1, [sp, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	bfbb      	ittet	lt
 800554e:	425b      	neglt	r3, r3
 8005550:	f042 0202 	orrlt.w	r2, r2, #2
 8005554:	9307      	strge	r3, [sp, #28]
 8005556:	9307      	strlt	r3, [sp, #28]
 8005558:	bfb8      	it	lt
 800555a:	9204      	strlt	r2, [sp, #16]
 800555c:	7823      	ldrb	r3, [r4, #0]
 800555e:	2b2e      	cmp	r3, #46	; 0x2e
 8005560:	d10c      	bne.n	800557c <_svfiprintf_r+0x130>
 8005562:	7863      	ldrb	r3, [r4, #1]
 8005564:	2b2a      	cmp	r3, #42	; 0x2a
 8005566:	d135      	bne.n	80055d4 <_svfiprintf_r+0x188>
 8005568:	9b03      	ldr	r3, [sp, #12]
 800556a:	1d1a      	adds	r2, r3, #4
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	9203      	str	r2, [sp, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	bfb8      	it	lt
 8005574:	f04f 33ff 	movlt.w	r3, #4294967295
 8005578:	3402      	adds	r4, #2
 800557a:	9305      	str	r3, [sp, #20]
 800557c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005648 <_svfiprintf_r+0x1fc>
 8005580:	7821      	ldrb	r1, [r4, #0]
 8005582:	2203      	movs	r2, #3
 8005584:	4650      	mov	r0, sl
 8005586:	f7fa fe23 	bl	80001d0 <memchr>
 800558a:	b140      	cbz	r0, 800559e <_svfiprintf_r+0x152>
 800558c:	2340      	movs	r3, #64	; 0x40
 800558e:	eba0 000a 	sub.w	r0, r0, sl
 8005592:	fa03 f000 	lsl.w	r0, r3, r0
 8005596:	9b04      	ldr	r3, [sp, #16]
 8005598:	4303      	orrs	r3, r0
 800559a:	3401      	adds	r4, #1
 800559c:	9304      	str	r3, [sp, #16]
 800559e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055a2:	4826      	ldr	r0, [pc, #152]	; (800563c <_svfiprintf_r+0x1f0>)
 80055a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80055a8:	2206      	movs	r2, #6
 80055aa:	f7fa fe11 	bl	80001d0 <memchr>
 80055ae:	2800      	cmp	r0, #0
 80055b0:	d038      	beq.n	8005624 <_svfiprintf_r+0x1d8>
 80055b2:	4b23      	ldr	r3, [pc, #140]	; (8005640 <_svfiprintf_r+0x1f4>)
 80055b4:	bb1b      	cbnz	r3, 80055fe <_svfiprintf_r+0x1b2>
 80055b6:	9b03      	ldr	r3, [sp, #12]
 80055b8:	3307      	adds	r3, #7
 80055ba:	f023 0307 	bic.w	r3, r3, #7
 80055be:	3308      	adds	r3, #8
 80055c0:	9303      	str	r3, [sp, #12]
 80055c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c4:	4433      	add	r3, r6
 80055c6:	9309      	str	r3, [sp, #36]	; 0x24
 80055c8:	e767      	b.n	800549a <_svfiprintf_r+0x4e>
 80055ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80055ce:	460c      	mov	r4, r1
 80055d0:	2001      	movs	r0, #1
 80055d2:	e7a5      	b.n	8005520 <_svfiprintf_r+0xd4>
 80055d4:	2300      	movs	r3, #0
 80055d6:	3401      	adds	r4, #1
 80055d8:	9305      	str	r3, [sp, #20]
 80055da:	4619      	mov	r1, r3
 80055dc:	f04f 0c0a 	mov.w	ip, #10
 80055e0:	4620      	mov	r0, r4
 80055e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055e6:	3a30      	subs	r2, #48	; 0x30
 80055e8:	2a09      	cmp	r2, #9
 80055ea:	d903      	bls.n	80055f4 <_svfiprintf_r+0x1a8>
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d0c5      	beq.n	800557c <_svfiprintf_r+0x130>
 80055f0:	9105      	str	r1, [sp, #20]
 80055f2:	e7c3      	b.n	800557c <_svfiprintf_r+0x130>
 80055f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80055f8:	4604      	mov	r4, r0
 80055fa:	2301      	movs	r3, #1
 80055fc:	e7f0      	b.n	80055e0 <_svfiprintf_r+0x194>
 80055fe:	ab03      	add	r3, sp, #12
 8005600:	9300      	str	r3, [sp, #0]
 8005602:	462a      	mov	r2, r5
 8005604:	4b0f      	ldr	r3, [pc, #60]	; (8005644 <_svfiprintf_r+0x1f8>)
 8005606:	a904      	add	r1, sp, #16
 8005608:	4638      	mov	r0, r7
 800560a:	f3af 8000 	nop.w
 800560e:	1c42      	adds	r2, r0, #1
 8005610:	4606      	mov	r6, r0
 8005612:	d1d6      	bne.n	80055c2 <_svfiprintf_r+0x176>
 8005614:	89ab      	ldrh	r3, [r5, #12]
 8005616:	065b      	lsls	r3, r3, #25
 8005618:	f53f af2c 	bmi.w	8005474 <_svfiprintf_r+0x28>
 800561c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800561e:	b01d      	add	sp, #116	; 0x74
 8005620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005624:	ab03      	add	r3, sp, #12
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	462a      	mov	r2, r5
 800562a:	4b06      	ldr	r3, [pc, #24]	; (8005644 <_svfiprintf_r+0x1f8>)
 800562c:	a904      	add	r1, sp, #16
 800562e:	4638      	mov	r0, r7
 8005630:	f000 f87a 	bl	8005728 <_printf_i>
 8005634:	e7eb      	b.n	800560e <_svfiprintf_r+0x1c2>
 8005636:	bf00      	nop
 8005638:	08006bf4 	.word	0x08006bf4
 800563c:	08006bfe 	.word	0x08006bfe
 8005640:	00000000 	.word	0x00000000
 8005644:	08005395 	.word	0x08005395
 8005648:	08006bfa 	.word	0x08006bfa

0800564c <_printf_common>:
 800564c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005650:	4616      	mov	r6, r2
 8005652:	4699      	mov	r9, r3
 8005654:	688a      	ldr	r2, [r1, #8]
 8005656:	690b      	ldr	r3, [r1, #16]
 8005658:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800565c:	4293      	cmp	r3, r2
 800565e:	bfb8      	it	lt
 8005660:	4613      	movlt	r3, r2
 8005662:	6033      	str	r3, [r6, #0]
 8005664:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005668:	4607      	mov	r7, r0
 800566a:	460c      	mov	r4, r1
 800566c:	b10a      	cbz	r2, 8005672 <_printf_common+0x26>
 800566e:	3301      	adds	r3, #1
 8005670:	6033      	str	r3, [r6, #0]
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	0699      	lsls	r1, r3, #26
 8005676:	bf42      	ittt	mi
 8005678:	6833      	ldrmi	r3, [r6, #0]
 800567a:	3302      	addmi	r3, #2
 800567c:	6033      	strmi	r3, [r6, #0]
 800567e:	6825      	ldr	r5, [r4, #0]
 8005680:	f015 0506 	ands.w	r5, r5, #6
 8005684:	d106      	bne.n	8005694 <_printf_common+0x48>
 8005686:	f104 0a19 	add.w	sl, r4, #25
 800568a:	68e3      	ldr	r3, [r4, #12]
 800568c:	6832      	ldr	r2, [r6, #0]
 800568e:	1a9b      	subs	r3, r3, r2
 8005690:	42ab      	cmp	r3, r5
 8005692:	dc26      	bgt.n	80056e2 <_printf_common+0x96>
 8005694:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005698:	1e13      	subs	r3, r2, #0
 800569a:	6822      	ldr	r2, [r4, #0]
 800569c:	bf18      	it	ne
 800569e:	2301      	movne	r3, #1
 80056a0:	0692      	lsls	r2, r2, #26
 80056a2:	d42b      	bmi.n	80056fc <_printf_common+0xb0>
 80056a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056a8:	4649      	mov	r1, r9
 80056aa:	4638      	mov	r0, r7
 80056ac:	47c0      	blx	r8
 80056ae:	3001      	adds	r0, #1
 80056b0:	d01e      	beq.n	80056f0 <_printf_common+0xa4>
 80056b2:	6823      	ldr	r3, [r4, #0]
 80056b4:	68e5      	ldr	r5, [r4, #12]
 80056b6:	6832      	ldr	r2, [r6, #0]
 80056b8:	f003 0306 	and.w	r3, r3, #6
 80056bc:	2b04      	cmp	r3, #4
 80056be:	bf08      	it	eq
 80056c0:	1aad      	subeq	r5, r5, r2
 80056c2:	68a3      	ldr	r3, [r4, #8]
 80056c4:	6922      	ldr	r2, [r4, #16]
 80056c6:	bf0c      	ite	eq
 80056c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056cc:	2500      	movne	r5, #0
 80056ce:	4293      	cmp	r3, r2
 80056d0:	bfc4      	itt	gt
 80056d2:	1a9b      	subgt	r3, r3, r2
 80056d4:	18ed      	addgt	r5, r5, r3
 80056d6:	2600      	movs	r6, #0
 80056d8:	341a      	adds	r4, #26
 80056da:	42b5      	cmp	r5, r6
 80056dc:	d11a      	bne.n	8005714 <_printf_common+0xc8>
 80056de:	2000      	movs	r0, #0
 80056e0:	e008      	b.n	80056f4 <_printf_common+0xa8>
 80056e2:	2301      	movs	r3, #1
 80056e4:	4652      	mov	r2, sl
 80056e6:	4649      	mov	r1, r9
 80056e8:	4638      	mov	r0, r7
 80056ea:	47c0      	blx	r8
 80056ec:	3001      	adds	r0, #1
 80056ee:	d103      	bne.n	80056f8 <_printf_common+0xac>
 80056f0:	f04f 30ff 	mov.w	r0, #4294967295
 80056f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056f8:	3501      	adds	r5, #1
 80056fa:	e7c6      	b.n	800568a <_printf_common+0x3e>
 80056fc:	18e1      	adds	r1, r4, r3
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	2030      	movs	r0, #48	; 0x30
 8005702:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005706:	4422      	add	r2, r4
 8005708:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800570c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005710:	3302      	adds	r3, #2
 8005712:	e7c7      	b.n	80056a4 <_printf_common+0x58>
 8005714:	2301      	movs	r3, #1
 8005716:	4622      	mov	r2, r4
 8005718:	4649      	mov	r1, r9
 800571a:	4638      	mov	r0, r7
 800571c:	47c0      	blx	r8
 800571e:	3001      	adds	r0, #1
 8005720:	d0e6      	beq.n	80056f0 <_printf_common+0xa4>
 8005722:	3601      	adds	r6, #1
 8005724:	e7d9      	b.n	80056da <_printf_common+0x8e>
	...

08005728 <_printf_i>:
 8005728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800572c:	460c      	mov	r4, r1
 800572e:	4691      	mov	r9, r2
 8005730:	7e27      	ldrb	r7, [r4, #24]
 8005732:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005734:	2f78      	cmp	r7, #120	; 0x78
 8005736:	4680      	mov	r8, r0
 8005738:	469a      	mov	sl, r3
 800573a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800573e:	d807      	bhi.n	8005750 <_printf_i+0x28>
 8005740:	2f62      	cmp	r7, #98	; 0x62
 8005742:	d80a      	bhi.n	800575a <_printf_i+0x32>
 8005744:	2f00      	cmp	r7, #0
 8005746:	f000 80d8 	beq.w	80058fa <_printf_i+0x1d2>
 800574a:	2f58      	cmp	r7, #88	; 0x58
 800574c:	f000 80a3 	beq.w	8005896 <_printf_i+0x16e>
 8005750:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005754:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005758:	e03a      	b.n	80057d0 <_printf_i+0xa8>
 800575a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800575e:	2b15      	cmp	r3, #21
 8005760:	d8f6      	bhi.n	8005750 <_printf_i+0x28>
 8005762:	a001      	add	r0, pc, #4	; (adr r0, 8005768 <_printf_i+0x40>)
 8005764:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005768:	080057c1 	.word	0x080057c1
 800576c:	080057d5 	.word	0x080057d5
 8005770:	08005751 	.word	0x08005751
 8005774:	08005751 	.word	0x08005751
 8005778:	08005751 	.word	0x08005751
 800577c:	08005751 	.word	0x08005751
 8005780:	080057d5 	.word	0x080057d5
 8005784:	08005751 	.word	0x08005751
 8005788:	08005751 	.word	0x08005751
 800578c:	08005751 	.word	0x08005751
 8005790:	08005751 	.word	0x08005751
 8005794:	080058e1 	.word	0x080058e1
 8005798:	08005805 	.word	0x08005805
 800579c:	080058c3 	.word	0x080058c3
 80057a0:	08005751 	.word	0x08005751
 80057a4:	08005751 	.word	0x08005751
 80057a8:	08005903 	.word	0x08005903
 80057ac:	08005751 	.word	0x08005751
 80057b0:	08005805 	.word	0x08005805
 80057b4:	08005751 	.word	0x08005751
 80057b8:	08005751 	.word	0x08005751
 80057bc:	080058cb 	.word	0x080058cb
 80057c0:	680b      	ldr	r3, [r1, #0]
 80057c2:	1d1a      	adds	r2, r3, #4
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	600a      	str	r2, [r1, #0]
 80057c8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80057cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057d0:	2301      	movs	r3, #1
 80057d2:	e0a3      	b.n	800591c <_printf_i+0x1f4>
 80057d4:	6825      	ldr	r5, [r4, #0]
 80057d6:	6808      	ldr	r0, [r1, #0]
 80057d8:	062e      	lsls	r6, r5, #24
 80057da:	f100 0304 	add.w	r3, r0, #4
 80057de:	d50a      	bpl.n	80057f6 <_printf_i+0xce>
 80057e0:	6805      	ldr	r5, [r0, #0]
 80057e2:	600b      	str	r3, [r1, #0]
 80057e4:	2d00      	cmp	r5, #0
 80057e6:	da03      	bge.n	80057f0 <_printf_i+0xc8>
 80057e8:	232d      	movs	r3, #45	; 0x2d
 80057ea:	426d      	negs	r5, r5
 80057ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80057f0:	485e      	ldr	r0, [pc, #376]	; (800596c <_printf_i+0x244>)
 80057f2:	230a      	movs	r3, #10
 80057f4:	e019      	b.n	800582a <_printf_i+0x102>
 80057f6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80057fa:	6805      	ldr	r5, [r0, #0]
 80057fc:	600b      	str	r3, [r1, #0]
 80057fe:	bf18      	it	ne
 8005800:	b22d      	sxthne	r5, r5
 8005802:	e7ef      	b.n	80057e4 <_printf_i+0xbc>
 8005804:	680b      	ldr	r3, [r1, #0]
 8005806:	6825      	ldr	r5, [r4, #0]
 8005808:	1d18      	adds	r0, r3, #4
 800580a:	6008      	str	r0, [r1, #0]
 800580c:	0628      	lsls	r0, r5, #24
 800580e:	d501      	bpl.n	8005814 <_printf_i+0xec>
 8005810:	681d      	ldr	r5, [r3, #0]
 8005812:	e002      	b.n	800581a <_printf_i+0xf2>
 8005814:	0669      	lsls	r1, r5, #25
 8005816:	d5fb      	bpl.n	8005810 <_printf_i+0xe8>
 8005818:	881d      	ldrh	r5, [r3, #0]
 800581a:	4854      	ldr	r0, [pc, #336]	; (800596c <_printf_i+0x244>)
 800581c:	2f6f      	cmp	r7, #111	; 0x6f
 800581e:	bf0c      	ite	eq
 8005820:	2308      	moveq	r3, #8
 8005822:	230a      	movne	r3, #10
 8005824:	2100      	movs	r1, #0
 8005826:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800582a:	6866      	ldr	r6, [r4, #4]
 800582c:	60a6      	str	r6, [r4, #8]
 800582e:	2e00      	cmp	r6, #0
 8005830:	bfa2      	ittt	ge
 8005832:	6821      	ldrge	r1, [r4, #0]
 8005834:	f021 0104 	bicge.w	r1, r1, #4
 8005838:	6021      	strge	r1, [r4, #0]
 800583a:	b90d      	cbnz	r5, 8005840 <_printf_i+0x118>
 800583c:	2e00      	cmp	r6, #0
 800583e:	d04d      	beq.n	80058dc <_printf_i+0x1b4>
 8005840:	4616      	mov	r6, r2
 8005842:	fbb5 f1f3 	udiv	r1, r5, r3
 8005846:	fb03 5711 	mls	r7, r3, r1, r5
 800584a:	5dc7      	ldrb	r7, [r0, r7]
 800584c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005850:	462f      	mov	r7, r5
 8005852:	42bb      	cmp	r3, r7
 8005854:	460d      	mov	r5, r1
 8005856:	d9f4      	bls.n	8005842 <_printf_i+0x11a>
 8005858:	2b08      	cmp	r3, #8
 800585a:	d10b      	bne.n	8005874 <_printf_i+0x14c>
 800585c:	6823      	ldr	r3, [r4, #0]
 800585e:	07df      	lsls	r7, r3, #31
 8005860:	d508      	bpl.n	8005874 <_printf_i+0x14c>
 8005862:	6923      	ldr	r3, [r4, #16]
 8005864:	6861      	ldr	r1, [r4, #4]
 8005866:	4299      	cmp	r1, r3
 8005868:	bfde      	ittt	le
 800586a:	2330      	movle	r3, #48	; 0x30
 800586c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005870:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005874:	1b92      	subs	r2, r2, r6
 8005876:	6122      	str	r2, [r4, #16]
 8005878:	f8cd a000 	str.w	sl, [sp]
 800587c:	464b      	mov	r3, r9
 800587e:	aa03      	add	r2, sp, #12
 8005880:	4621      	mov	r1, r4
 8005882:	4640      	mov	r0, r8
 8005884:	f7ff fee2 	bl	800564c <_printf_common>
 8005888:	3001      	adds	r0, #1
 800588a:	d14c      	bne.n	8005926 <_printf_i+0x1fe>
 800588c:	f04f 30ff 	mov.w	r0, #4294967295
 8005890:	b004      	add	sp, #16
 8005892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005896:	4835      	ldr	r0, [pc, #212]	; (800596c <_printf_i+0x244>)
 8005898:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	680e      	ldr	r6, [r1, #0]
 80058a0:	061f      	lsls	r7, r3, #24
 80058a2:	f856 5b04 	ldr.w	r5, [r6], #4
 80058a6:	600e      	str	r6, [r1, #0]
 80058a8:	d514      	bpl.n	80058d4 <_printf_i+0x1ac>
 80058aa:	07d9      	lsls	r1, r3, #31
 80058ac:	bf44      	itt	mi
 80058ae:	f043 0320 	orrmi.w	r3, r3, #32
 80058b2:	6023      	strmi	r3, [r4, #0]
 80058b4:	b91d      	cbnz	r5, 80058be <_printf_i+0x196>
 80058b6:	6823      	ldr	r3, [r4, #0]
 80058b8:	f023 0320 	bic.w	r3, r3, #32
 80058bc:	6023      	str	r3, [r4, #0]
 80058be:	2310      	movs	r3, #16
 80058c0:	e7b0      	b.n	8005824 <_printf_i+0xfc>
 80058c2:	6823      	ldr	r3, [r4, #0]
 80058c4:	f043 0320 	orr.w	r3, r3, #32
 80058c8:	6023      	str	r3, [r4, #0]
 80058ca:	2378      	movs	r3, #120	; 0x78
 80058cc:	4828      	ldr	r0, [pc, #160]	; (8005970 <_printf_i+0x248>)
 80058ce:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80058d2:	e7e3      	b.n	800589c <_printf_i+0x174>
 80058d4:	065e      	lsls	r6, r3, #25
 80058d6:	bf48      	it	mi
 80058d8:	b2ad      	uxthmi	r5, r5
 80058da:	e7e6      	b.n	80058aa <_printf_i+0x182>
 80058dc:	4616      	mov	r6, r2
 80058de:	e7bb      	b.n	8005858 <_printf_i+0x130>
 80058e0:	680b      	ldr	r3, [r1, #0]
 80058e2:	6826      	ldr	r6, [r4, #0]
 80058e4:	6960      	ldr	r0, [r4, #20]
 80058e6:	1d1d      	adds	r5, r3, #4
 80058e8:	600d      	str	r5, [r1, #0]
 80058ea:	0635      	lsls	r5, r6, #24
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	d501      	bpl.n	80058f4 <_printf_i+0x1cc>
 80058f0:	6018      	str	r0, [r3, #0]
 80058f2:	e002      	b.n	80058fa <_printf_i+0x1d2>
 80058f4:	0671      	lsls	r1, r6, #25
 80058f6:	d5fb      	bpl.n	80058f0 <_printf_i+0x1c8>
 80058f8:	8018      	strh	r0, [r3, #0]
 80058fa:	2300      	movs	r3, #0
 80058fc:	6123      	str	r3, [r4, #16]
 80058fe:	4616      	mov	r6, r2
 8005900:	e7ba      	b.n	8005878 <_printf_i+0x150>
 8005902:	680b      	ldr	r3, [r1, #0]
 8005904:	1d1a      	adds	r2, r3, #4
 8005906:	600a      	str	r2, [r1, #0]
 8005908:	681e      	ldr	r6, [r3, #0]
 800590a:	6862      	ldr	r2, [r4, #4]
 800590c:	2100      	movs	r1, #0
 800590e:	4630      	mov	r0, r6
 8005910:	f7fa fc5e 	bl	80001d0 <memchr>
 8005914:	b108      	cbz	r0, 800591a <_printf_i+0x1f2>
 8005916:	1b80      	subs	r0, r0, r6
 8005918:	6060      	str	r0, [r4, #4]
 800591a:	6863      	ldr	r3, [r4, #4]
 800591c:	6123      	str	r3, [r4, #16]
 800591e:	2300      	movs	r3, #0
 8005920:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005924:	e7a8      	b.n	8005878 <_printf_i+0x150>
 8005926:	6923      	ldr	r3, [r4, #16]
 8005928:	4632      	mov	r2, r6
 800592a:	4649      	mov	r1, r9
 800592c:	4640      	mov	r0, r8
 800592e:	47d0      	blx	sl
 8005930:	3001      	adds	r0, #1
 8005932:	d0ab      	beq.n	800588c <_printf_i+0x164>
 8005934:	6823      	ldr	r3, [r4, #0]
 8005936:	079b      	lsls	r3, r3, #30
 8005938:	d413      	bmi.n	8005962 <_printf_i+0x23a>
 800593a:	68e0      	ldr	r0, [r4, #12]
 800593c:	9b03      	ldr	r3, [sp, #12]
 800593e:	4298      	cmp	r0, r3
 8005940:	bfb8      	it	lt
 8005942:	4618      	movlt	r0, r3
 8005944:	e7a4      	b.n	8005890 <_printf_i+0x168>
 8005946:	2301      	movs	r3, #1
 8005948:	4632      	mov	r2, r6
 800594a:	4649      	mov	r1, r9
 800594c:	4640      	mov	r0, r8
 800594e:	47d0      	blx	sl
 8005950:	3001      	adds	r0, #1
 8005952:	d09b      	beq.n	800588c <_printf_i+0x164>
 8005954:	3501      	adds	r5, #1
 8005956:	68e3      	ldr	r3, [r4, #12]
 8005958:	9903      	ldr	r1, [sp, #12]
 800595a:	1a5b      	subs	r3, r3, r1
 800595c:	42ab      	cmp	r3, r5
 800595e:	dcf2      	bgt.n	8005946 <_printf_i+0x21e>
 8005960:	e7eb      	b.n	800593a <_printf_i+0x212>
 8005962:	2500      	movs	r5, #0
 8005964:	f104 0619 	add.w	r6, r4, #25
 8005968:	e7f5      	b.n	8005956 <_printf_i+0x22e>
 800596a:	bf00      	nop
 800596c:	08006c05 	.word	0x08006c05
 8005970:	08006c16 	.word	0x08006c16

08005974 <memcpy>:
 8005974:	440a      	add	r2, r1
 8005976:	4291      	cmp	r1, r2
 8005978:	f100 33ff 	add.w	r3, r0, #4294967295
 800597c:	d100      	bne.n	8005980 <memcpy+0xc>
 800597e:	4770      	bx	lr
 8005980:	b510      	push	{r4, lr}
 8005982:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005986:	f803 4f01 	strb.w	r4, [r3, #1]!
 800598a:	4291      	cmp	r1, r2
 800598c:	d1f9      	bne.n	8005982 <memcpy+0xe>
 800598e:	bd10      	pop	{r4, pc}

08005990 <memmove>:
 8005990:	4288      	cmp	r0, r1
 8005992:	b510      	push	{r4, lr}
 8005994:	eb01 0402 	add.w	r4, r1, r2
 8005998:	d902      	bls.n	80059a0 <memmove+0x10>
 800599a:	4284      	cmp	r4, r0
 800599c:	4623      	mov	r3, r4
 800599e:	d807      	bhi.n	80059b0 <memmove+0x20>
 80059a0:	1e43      	subs	r3, r0, #1
 80059a2:	42a1      	cmp	r1, r4
 80059a4:	d008      	beq.n	80059b8 <memmove+0x28>
 80059a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80059ae:	e7f8      	b.n	80059a2 <memmove+0x12>
 80059b0:	4402      	add	r2, r0
 80059b2:	4601      	mov	r1, r0
 80059b4:	428a      	cmp	r2, r1
 80059b6:	d100      	bne.n	80059ba <memmove+0x2a>
 80059b8:	bd10      	pop	{r4, pc}
 80059ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80059be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80059c2:	e7f7      	b.n	80059b4 <memmove+0x24>

080059c4 <_free_r>:
 80059c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80059c6:	2900      	cmp	r1, #0
 80059c8:	d048      	beq.n	8005a5c <_free_r+0x98>
 80059ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059ce:	9001      	str	r0, [sp, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f1a1 0404 	sub.w	r4, r1, #4
 80059d6:	bfb8      	it	lt
 80059d8:	18e4      	addlt	r4, r4, r3
 80059da:	f000 f8d3 	bl	8005b84 <__malloc_lock>
 80059de:	4a20      	ldr	r2, [pc, #128]	; (8005a60 <_free_r+0x9c>)
 80059e0:	9801      	ldr	r0, [sp, #4]
 80059e2:	6813      	ldr	r3, [r2, #0]
 80059e4:	4615      	mov	r5, r2
 80059e6:	b933      	cbnz	r3, 80059f6 <_free_r+0x32>
 80059e8:	6063      	str	r3, [r4, #4]
 80059ea:	6014      	str	r4, [r2, #0]
 80059ec:	b003      	add	sp, #12
 80059ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059f2:	f000 b8cd 	b.w	8005b90 <__malloc_unlock>
 80059f6:	42a3      	cmp	r3, r4
 80059f8:	d90b      	bls.n	8005a12 <_free_r+0x4e>
 80059fa:	6821      	ldr	r1, [r4, #0]
 80059fc:	1862      	adds	r2, r4, r1
 80059fe:	4293      	cmp	r3, r2
 8005a00:	bf04      	itt	eq
 8005a02:	681a      	ldreq	r2, [r3, #0]
 8005a04:	685b      	ldreq	r3, [r3, #4]
 8005a06:	6063      	str	r3, [r4, #4]
 8005a08:	bf04      	itt	eq
 8005a0a:	1852      	addeq	r2, r2, r1
 8005a0c:	6022      	streq	r2, [r4, #0]
 8005a0e:	602c      	str	r4, [r5, #0]
 8005a10:	e7ec      	b.n	80059ec <_free_r+0x28>
 8005a12:	461a      	mov	r2, r3
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	b10b      	cbz	r3, 8005a1c <_free_r+0x58>
 8005a18:	42a3      	cmp	r3, r4
 8005a1a:	d9fa      	bls.n	8005a12 <_free_r+0x4e>
 8005a1c:	6811      	ldr	r1, [r2, #0]
 8005a1e:	1855      	adds	r5, r2, r1
 8005a20:	42a5      	cmp	r5, r4
 8005a22:	d10b      	bne.n	8005a3c <_free_r+0x78>
 8005a24:	6824      	ldr	r4, [r4, #0]
 8005a26:	4421      	add	r1, r4
 8005a28:	1854      	adds	r4, r2, r1
 8005a2a:	42a3      	cmp	r3, r4
 8005a2c:	6011      	str	r1, [r2, #0]
 8005a2e:	d1dd      	bne.n	80059ec <_free_r+0x28>
 8005a30:	681c      	ldr	r4, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	6053      	str	r3, [r2, #4]
 8005a36:	4421      	add	r1, r4
 8005a38:	6011      	str	r1, [r2, #0]
 8005a3a:	e7d7      	b.n	80059ec <_free_r+0x28>
 8005a3c:	d902      	bls.n	8005a44 <_free_r+0x80>
 8005a3e:	230c      	movs	r3, #12
 8005a40:	6003      	str	r3, [r0, #0]
 8005a42:	e7d3      	b.n	80059ec <_free_r+0x28>
 8005a44:	6825      	ldr	r5, [r4, #0]
 8005a46:	1961      	adds	r1, r4, r5
 8005a48:	428b      	cmp	r3, r1
 8005a4a:	bf04      	itt	eq
 8005a4c:	6819      	ldreq	r1, [r3, #0]
 8005a4e:	685b      	ldreq	r3, [r3, #4]
 8005a50:	6063      	str	r3, [r4, #4]
 8005a52:	bf04      	itt	eq
 8005a54:	1949      	addeq	r1, r1, r5
 8005a56:	6021      	streq	r1, [r4, #0]
 8005a58:	6054      	str	r4, [r2, #4]
 8005a5a:	e7c7      	b.n	80059ec <_free_r+0x28>
 8005a5c:	b003      	add	sp, #12
 8005a5e:	bd30      	pop	{r4, r5, pc}
 8005a60:	20000178 	.word	0x20000178

08005a64 <_malloc_r>:
 8005a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a66:	1ccd      	adds	r5, r1, #3
 8005a68:	f025 0503 	bic.w	r5, r5, #3
 8005a6c:	3508      	adds	r5, #8
 8005a6e:	2d0c      	cmp	r5, #12
 8005a70:	bf38      	it	cc
 8005a72:	250c      	movcc	r5, #12
 8005a74:	2d00      	cmp	r5, #0
 8005a76:	4606      	mov	r6, r0
 8005a78:	db01      	blt.n	8005a7e <_malloc_r+0x1a>
 8005a7a:	42a9      	cmp	r1, r5
 8005a7c:	d903      	bls.n	8005a86 <_malloc_r+0x22>
 8005a7e:	230c      	movs	r3, #12
 8005a80:	6033      	str	r3, [r6, #0]
 8005a82:	2000      	movs	r0, #0
 8005a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a86:	f000 f87d 	bl	8005b84 <__malloc_lock>
 8005a8a:	4921      	ldr	r1, [pc, #132]	; (8005b10 <_malloc_r+0xac>)
 8005a8c:	680a      	ldr	r2, [r1, #0]
 8005a8e:	4614      	mov	r4, r2
 8005a90:	b99c      	cbnz	r4, 8005aba <_malloc_r+0x56>
 8005a92:	4f20      	ldr	r7, [pc, #128]	; (8005b14 <_malloc_r+0xb0>)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	b923      	cbnz	r3, 8005aa2 <_malloc_r+0x3e>
 8005a98:	4621      	mov	r1, r4
 8005a9a:	4630      	mov	r0, r6
 8005a9c:	f000 f862 	bl	8005b64 <_sbrk_r>
 8005aa0:	6038      	str	r0, [r7, #0]
 8005aa2:	4629      	mov	r1, r5
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	f000 f85d 	bl	8005b64 <_sbrk_r>
 8005aaa:	1c43      	adds	r3, r0, #1
 8005aac:	d123      	bne.n	8005af6 <_malloc_r+0x92>
 8005aae:	230c      	movs	r3, #12
 8005ab0:	6033      	str	r3, [r6, #0]
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	f000 f86c 	bl	8005b90 <__malloc_unlock>
 8005ab8:	e7e3      	b.n	8005a82 <_malloc_r+0x1e>
 8005aba:	6823      	ldr	r3, [r4, #0]
 8005abc:	1b5b      	subs	r3, r3, r5
 8005abe:	d417      	bmi.n	8005af0 <_malloc_r+0x8c>
 8005ac0:	2b0b      	cmp	r3, #11
 8005ac2:	d903      	bls.n	8005acc <_malloc_r+0x68>
 8005ac4:	6023      	str	r3, [r4, #0]
 8005ac6:	441c      	add	r4, r3
 8005ac8:	6025      	str	r5, [r4, #0]
 8005aca:	e004      	b.n	8005ad6 <_malloc_r+0x72>
 8005acc:	6863      	ldr	r3, [r4, #4]
 8005ace:	42a2      	cmp	r2, r4
 8005ad0:	bf0c      	ite	eq
 8005ad2:	600b      	streq	r3, [r1, #0]
 8005ad4:	6053      	strne	r3, [r2, #4]
 8005ad6:	4630      	mov	r0, r6
 8005ad8:	f000 f85a 	bl	8005b90 <__malloc_unlock>
 8005adc:	f104 000b 	add.w	r0, r4, #11
 8005ae0:	1d23      	adds	r3, r4, #4
 8005ae2:	f020 0007 	bic.w	r0, r0, #7
 8005ae6:	1ac2      	subs	r2, r0, r3
 8005ae8:	d0cc      	beq.n	8005a84 <_malloc_r+0x20>
 8005aea:	1a1b      	subs	r3, r3, r0
 8005aec:	50a3      	str	r3, [r4, r2]
 8005aee:	e7c9      	b.n	8005a84 <_malloc_r+0x20>
 8005af0:	4622      	mov	r2, r4
 8005af2:	6864      	ldr	r4, [r4, #4]
 8005af4:	e7cc      	b.n	8005a90 <_malloc_r+0x2c>
 8005af6:	1cc4      	adds	r4, r0, #3
 8005af8:	f024 0403 	bic.w	r4, r4, #3
 8005afc:	42a0      	cmp	r0, r4
 8005afe:	d0e3      	beq.n	8005ac8 <_malloc_r+0x64>
 8005b00:	1a21      	subs	r1, r4, r0
 8005b02:	4630      	mov	r0, r6
 8005b04:	f000 f82e 	bl	8005b64 <_sbrk_r>
 8005b08:	3001      	adds	r0, #1
 8005b0a:	d1dd      	bne.n	8005ac8 <_malloc_r+0x64>
 8005b0c:	e7cf      	b.n	8005aae <_malloc_r+0x4a>
 8005b0e:	bf00      	nop
 8005b10:	20000178 	.word	0x20000178
 8005b14:	2000017c 	.word	0x2000017c

08005b18 <_realloc_r>:
 8005b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1a:	4607      	mov	r7, r0
 8005b1c:	4614      	mov	r4, r2
 8005b1e:	460e      	mov	r6, r1
 8005b20:	b921      	cbnz	r1, 8005b2c <_realloc_r+0x14>
 8005b22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005b26:	4611      	mov	r1, r2
 8005b28:	f7ff bf9c 	b.w	8005a64 <_malloc_r>
 8005b2c:	b922      	cbnz	r2, 8005b38 <_realloc_r+0x20>
 8005b2e:	f7ff ff49 	bl	80059c4 <_free_r>
 8005b32:	4625      	mov	r5, r4
 8005b34:	4628      	mov	r0, r5
 8005b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b38:	f000 f830 	bl	8005b9c <_malloc_usable_size_r>
 8005b3c:	42a0      	cmp	r0, r4
 8005b3e:	d20f      	bcs.n	8005b60 <_realloc_r+0x48>
 8005b40:	4621      	mov	r1, r4
 8005b42:	4638      	mov	r0, r7
 8005b44:	f7ff ff8e 	bl	8005a64 <_malloc_r>
 8005b48:	4605      	mov	r5, r0
 8005b4a:	2800      	cmp	r0, #0
 8005b4c:	d0f2      	beq.n	8005b34 <_realloc_r+0x1c>
 8005b4e:	4631      	mov	r1, r6
 8005b50:	4622      	mov	r2, r4
 8005b52:	f7ff ff0f 	bl	8005974 <memcpy>
 8005b56:	4631      	mov	r1, r6
 8005b58:	4638      	mov	r0, r7
 8005b5a:	f7ff ff33 	bl	80059c4 <_free_r>
 8005b5e:	e7e9      	b.n	8005b34 <_realloc_r+0x1c>
 8005b60:	4635      	mov	r5, r6
 8005b62:	e7e7      	b.n	8005b34 <_realloc_r+0x1c>

08005b64 <_sbrk_r>:
 8005b64:	b538      	push	{r3, r4, r5, lr}
 8005b66:	4d06      	ldr	r5, [pc, #24]	; (8005b80 <_sbrk_r+0x1c>)
 8005b68:	2300      	movs	r3, #0
 8005b6a:	4604      	mov	r4, r0
 8005b6c:	4608      	mov	r0, r1
 8005b6e:	602b      	str	r3, [r5, #0]
 8005b70:	f7fc ffda 	bl	8002b28 <_sbrk>
 8005b74:	1c43      	adds	r3, r0, #1
 8005b76:	d102      	bne.n	8005b7e <_sbrk_r+0x1a>
 8005b78:	682b      	ldr	r3, [r5, #0]
 8005b7a:	b103      	cbz	r3, 8005b7e <_sbrk_r+0x1a>
 8005b7c:	6023      	str	r3, [r4, #0]
 8005b7e:	bd38      	pop	{r3, r4, r5, pc}
 8005b80:	200011cc 	.word	0x200011cc

08005b84 <__malloc_lock>:
 8005b84:	4801      	ldr	r0, [pc, #4]	; (8005b8c <__malloc_lock+0x8>)
 8005b86:	f000 b811 	b.w	8005bac <__retarget_lock_acquire_recursive>
 8005b8a:	bf00      	nop
 8005b8c:	200011d4 	.word	0x200011d4

08005b90 <__malloc_unlock>:
 8005b90:	4801      	ldr	r0, [pc, #4]	; (8005b98 <__malloc_unlock+0x8>)
 8005b92:	f000 b80c 	b.w	8005bae <__retarget_lock_release_recursive>
 8005b96:	bf00      	nop
 8005b98:	200011d4 	.word	0x200011d4

08005b9c <_malloc_usable_size_r>:
 8005b9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ba0:	1f18      	subs	r0, r3, #4
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	bfbc      	itt	lt
 8005ba6:	580b      	ldrlt	r3, [r1, r0]
 8005ba8:	18c0      	addlt	r0, r0, r3
 8005baa:	4770      	bx	lr

08005bac <__retarget_lock_acquire_recursive>:
 8005bac:	4770      	bx	lr

08005bae <__retarget_lock_release_recursive>:
 8005bae:	4770      	bx	lr

08005bb0 <pow>:
 8005bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bb4:	ec59 8b10 	vmov	r8, r9, d0
 8005bb8:	ec57 6b11 	vmov	r6, r7, d1
 8005bbc:	f000 f8dc 	bl	8005d78 <__ieee754_pow>
 8005bc0:	4b4e      	ldr	r3, [pc, #312]	; (8005cfc <pow+0x14c>)
 8005bc2:	f993 3000 	ldrsb.w	r3, [r3]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	ec55 4b10 	vmov	r4, r5, d0
 8005bcc:	d015      	beq.n	8005bfa <pow+0x4a>
 8005bce:	4632      	mov	r2, r6
 8005bd0:	463b      	mov	r3, r7
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	4639      	mov	r1, r7
 8005bd6:	f7fa ffa1 	bl	8000b1c <__aeabi_dcmpun>
 8005bda:	b970      	cbnz	r0, 8005bfa <pow+0x4a>
 8005bdc:	4642      	mov	r2, r8
 8005bde:	464b      	mov	r3, r9
 8005be0:	4640      	mov	r0, r8
 8005be2:	4649      	mov	r1, r9
 8005be4:	f7fa ff9a 	bl	8000b1c <__aeabi_dcmpun>
 8005be8:	2200      	movs	r2, #0
 8005bea:	2300      	movs	r3, #0
 8005bec:	b148      	cbz	r0, 8005c02 <pow+0x52>
 8005bee:	4630      	mov	r0, r6
 8005bf0:	4639      	mov	r1, r7
 8005bf2:	f7fa ff61 	bl	8000ab8 <__aeabi_dcmpeq>
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d17d      	bne.n	8005cf6 <pow+0x146>
 8005bfa:	ec45 4b10 	vmov	d0, r4, r5
 8005bfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c02:	4640      	mov	r0, r8
 8005c04:	4649      	mov	r1, r9
 8005c06:	f7fa ff57 	bl	8000ab8 <__aeabi_dcmpeq>
 8005c0a:	b1e0      	cbz	r0, 8005c46 <pow+0x96>
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2300      	movs	r3, #0
 8005c10:	4630      	mov	r0, r6
 8005c12:	4639      	mov	r1, r7
 8005c14:	f7fa ff50 	bl	8000ab8 <__aeabi_dcmpeq>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d16c      	bne.n	8005cf6 <pow+0x146>
 8005c1c:	ec47 6b10 	vmov	d0, r6, r7
 8005c20:	f000 fe89 	bl	8006936 <finite>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	d0e8      	beq.n	8005bfa <pow+0x4a>
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	4639      	mov	r1, r7
 8005c30:	f7fa ff4c 	bl	8000acc <__aeabi_dcmplt>
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d0e0      	beq.n	8005bfa <pow+0x4a>
 8005c38:	f7ff fb5a 	bl	80052f0 <__errno>
 8005c3c:	2321      	movs	r3, #33	; 0x21
 8005c3e:	6003      	str	r3, [r0, #0]
 8005c40:	2400      	movs	r4, #0
 8005c42:	4d2f      	ldr	r5, [pc, #188]	; (8005d00 <pow+0x150>)
 8005c44:	e7d9      	b.n	8005bfa <pow+0x4a>
 8005c46:	ec45 4b10 	vmov	d0, r4, r5
 8005c4a:	f000 fe74 	bl	8006936 <finite>
 8005c4e:	bbb8      	cbnz	r0, 8005cc0 <pow+0x110>
 8005c50:	ec49 8b10 	vmov	d0, r8, r9
 8005c54:	f000 fe6f 	bl	8006936 <finite>
 8005c58:	b390      	cbz	r0, 8005cc0 <pow+0x110>
 8005c5a:	ec47 6b10 	vmov	d0, r6, r7
 8005c5e:	f000 fe6a 	bl	8006936 <finite>
 8005c62:	b368      	cbz	r0, 8005cc0 <pow+0x110>
 8005c64:	4622      	mov	r2, r4
 8005c66:	462b      	mov	r3, r5
 8005c68:	4620      	mov	r0, r4
 8005c6a:	4629      	mov	r1, r5
 8005c6c:	f7fa ff56 	bl	8000b1c <__aeabi_dcmpun>
 8005c70:	b160      	cbz	r0, 8005c8c <pow+0xdc>
 8005c72:	f7ff fb3d 	bl	80052f0 <__errno>
 8005c76:	2321      	movs	r3, #33	; 0x21
 8005c78:	6003      	str	r3, [r0, #0]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	4610      	mov	r0, r2
 8005c80:	4619      	mov	r1, r3
 8005c82:	f7fa fddb 	bl	800083c <__aeabi_ddiv>
 8005c86:	4604      	mov	r4, r0
 8005c88:	460d      	mov	r5, r1
 8005c8a:	e7b6      	b.n	8005bfa <pow+0x4a>
 8005c8c:	f7ff fb30 	bl	80052f0 <__errno>
 8005c90:	2322      	movs	r3, #34	; 0x22
 8005c92:	6003      	str	r3, [r0, #0]
 8005c94:	2200      	movs	r2, #0
 8005c96:	2300      	movs	r3, #0
 8005c98:	4640      	mov	r0, r8
 8005c9a:	4649      	mov	r1, r9
 8005c9c:	f7fa ff16 	bl	8000acc <__aeabi_dcmplt>
 8005ca0:	2400      	movs	r4, #0
 8005ca2:	b158      	cbz	r0, 8005cbc <pow+0x10c>
 8005ca4:	ec47 6b10 	vmov	d0, r6, r7
 8005ca8:	f000 fe5a 	bl	8006960 <rint>
 8005cac:	4632      	mov	r2, r6
 8005cae:	ec51 0b10 	vmov	r0, r1, d0
 8005cb2:	463b      	mov	r3, r7
 8005cb4:	f7fa ff00 	bl	8000ab8 <__aeabi_dcmpeq>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	d0c2      	beq.n	8005c42 <pow+0x92>
 8005cbc:	4d11      	ldr	r5, [pc, #68]	; (8005d04 <pow+0x154>)
 8005cbe:	e79c      	b.n	8005bfa <pow+0x4a>
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	4620      	mov	r0, r4
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	f7fa fef6 	bl	8000ab8 <__aeabi_dcmpeq>
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	d094      	beq.n	8005bfa <pow+0x4a>
 8005cd0:	ec49 8b10 	vmov	d0, r8, r9
 8005cd4:	f000 fe2f 	bl	8006936 <finite>
 8005cd8:	2800      	cmp	r0, #0
 8005cda:	d08e      	beq.n	8005bfa <pow+0x4a>
 8005cdc:	ec47 6b10 	vmov	d0, r6, r7
 8005ce0:	f000 fe29 	bl	8006936 <finite>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d088      	beq.n	8005bfa <pow+0x4a>
 8005ce8:	f7ff fb02 	bl	80052f0 <__errno>
 8005cec:	2322      	movs	r3, #34	; 0x22
 8005cee:	6003      	str	r3, [r0, #0]
 8005cf0:	2400      	movs	r4, #0
 8005cf2:	2500      	movs	r5, #0
 8005cf4:	e781      	b.n	8005bfa <pow+0x4a>
 8005cf6:	4d04      	ldr	r5, [pc, #16]	; (8005d08 <pow+0x158>)
 8005cf8:	2400      	movs	r4, #0
 8005cfa:	e77e      	b.n	8005bfa <pow+0x4a>
 8005cfc:	20000070 	.word	0x20000070
 8005d00:	fff00000 	.word	0xfff00000
 8005d04:	7ff00000 	.word	0x7ff00000
 8005d08:	3ff00000 	.word	0x3ff00000

08005d0c <sqrt>:
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	ed2d 8b02 	vpush	{d8}
 8005d12:	ec55 4b10 	vmov	r4, r5, d0
 8005d16:	f000 fd51 	bl	80067bc <__ieee754_sqrt>
 8005d1a:	4b15      	ldr	r3, [pc, #84]	; (8005d70 <sqrt+0x64>)
 8005d1c:	eeb0 8a40 	vmov.f32	s16, s0
 8005d20:	eef0 8a60 	vmov.f32	s17, s1
 8005d24:	f993 3000 	ldrsb.w	r3, [r3]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	d019      	beq.n	8005d60 <sqrt+0x54>
 8005d2c:	4622      	mov	r2, r4
 8005d2e:	462b      	mov	r3, r5
 8005d30:	4620      	mov	r0, r4
 8005d32:	4629      	mov	r1, r5
 8005d34:	f7fa fef2 	bl	8000b1c <__aeabi_dcmpun>
 8005d38:	b990      	cbnz	r0, 8005d60 <sqrt+0x54>
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	4620      	mov	r0, r4
 8005d40:	4629      	mov	r1, r5
 8005d42:	f7fa fec3 	bl	8000acc <__aeabi_dcmplt>
 8005d46:	b158      	cbz	r0, 8005d60 <sqrt+0x54>
 8005d48:	f7ff fad2 	bl	80052f0 <__errno>
 8005d4c:	2321      	movs	r3, #33	; 0x21
 8005d4e:	6003      	str	r3, [r0, #0]
 8005d50:	2200      	movs	r2, #0
 8005d52:	2300      	movs	r3, #0
 8005d54:	4610      	mov	r0, r2
 8005d56:	4619      	mov	r1, r3
 8005d58:	f7fa fd70 	bl	800083c <__aeabi_ddiv>
 8005d5c:	ec41 0b18 	vmov	d8, r0, r1
 8005d60:	eeb0 0a48 	vmov.f32	s0, s16
 8005d64:	eef0 0a68 	vmov.f32	s1, s17
 8005d68:	ecbd 8b02 	vpop	{d8}
 8005d6c:	bd38      	pop	{r3, r4, r5, pc}
 8005d6e:	bf00      	nop
 8005d70:	20000070 	.word	0x20000070
 8005d74:	00000000 	.word	0x00000000

08005d78 <__ieee754_pow>:
 8005d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7c:	ed2d 8b06 	vpush	{d8-d10}
 8005d80:	b08d      	sub	sp, #52	; 0x34
 8005d82:	ed8d 1b02 	vstr	d1, [sp, #8]
 8005d86:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8005d8a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005d8e:	ea56 0100 	orrs.w	r1, r6, r0
 8005d92:	ec53 2b10 	vmov	r2, r3, d0
 8005d96:	f000 84d1 	beq.w	800673c <__ieee754_pow+0x9c4>
 8005d9a:	497f      	ldr	r1, [pc, #508]	; (8005f98 <__ieee754_pow+0x220>)
 8005d9c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8005da0:	428c      	cmp	r4, r1
 8005da2:	ee10 8a10 	vmov	r8, s0
 8005da6:	4699      	mov	r9, r3
 8005da8:	dc09      	bgt.n	8005dbe <__ieee754_pow+0x46>
 8005daa:	d103      	bne.n	8005db4 <__ieee754_pow+0x3c>
 8005dac:	b97a      	cbnz	r2, 8005dce <__ieee754_pow+0x56>
 8005dae:	42a6      	cmp	r6, r4
 8005db0:	dd02      	ble.n	8005db8 <__ieee754_pow+0x40>
 8005db2:	e00c      	b.n	8005dce <__ieee754_pow+0x56>
 8005db4:	428e      	cmp	r6, r1
 8005db6:	dc02      	bgt.n	8005dbe <__ieee754_pow+0x46>
 8005db8:	428e      	cmp	r6, r1
 8005dba:	d110      	bne.n	8005dde <__ieee754_pow+0x66>
 8005dbc:	b178      	cbz	r0, 8005dde <__ieee754_pow+0x66>
 8005dbe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005dc2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005dc6:	ea54 0308 	orrs.w	r3, r4, r8
 8005dca:	f000 84b7 	beq.w	800673c <__ieee754_pow+0x9c4>
 8005dce:	4873      	ldr	r0, [pc, #460]	; (8005f9c <__ieee754_pow+0x224>)
 8005dd0:	b00d      	add	sp, #52	; 0x34
 8005dd2:	ecbd 8b06 	vpop	{d8-d10}
 8005dd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dda:	f000 bdb9 	b.w	8006950 <nan>
 8005dde:	f1b9 0f00 	cmp.w	r9, #0
 8005de2:	da36      	bge.n	8005e52 <__ieee754_pow+0xda>
 8005de4:	496e      	ldr	r1, [pc, #440]	; (8005fa0 <__ieee754_pow+0x228>)
 8005de6:	428e      	cmp	r6, r1
 8005de8:	dc51      	bgt.n	8005e8e <__ieee754_pow+0x116>
 8005dea:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8005dee:	428e      	cmp	r6, r1
 8005df0:	f340 84af 	ble.w	8006752 <__ieee754_pow+0x9da>
 8005df4:	1531      	asrs	r1, r6, #20
 8005df6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8005dfa:	2914      	cmp	r1, #20
 8005dfc:	dd0f      	ble.n	8005e1e <__ieee754_pow+0xa6>
 8005dfe:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8005e02:	fa20 fc01 	lsr.w	ip, r0, r1
 8005e06:	fa0c f101 	lsl.w	r1, ip, r1
 8005e0a:	4281      	cmp	r1, r0
 8005e0c:	f040 84a1 	bne.w	8006752 <__ieee754_pow+0x9da>
 8005e10:	f00c 0c01 	and.w	ip, ip, #1
 8005e14:	f1cc 0102 	rsb	r1, ip, #2
 8005e18:	9100      	str	r1, [sp, #0]
 8005e1a:	b180      	cbz	r0, 8005e3e <__ieee754_pow+0xc6>
 8005e1c:	e059      	b.n	8005ed2 <__ieee754_pow+0x15a>
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	d155      	bne.n	8005ece <__ieee754_pow+0x156>
 8005e22:	f1c1 0114 	rsb	r1, r1, #20
 8005e26:	fa46 fc01 	asr.w	ip, r6, r1
 8005e2a:	fa0c f101 	lsl.w	r1, ip, r1
 8005e2e:	42b1      	cmp	r1, r6
 8005e30:	f040 848c 	bne.w	800674c <__ieee754_pow+0x9d4>
 8005e34:	f00c 0c01 	and.w	ip, ip, #1
 8005e38:	f1cc 0102 	rsb	r1, ip, #2
 8005e3c:	9100      	str	r1, [sp, #0]
 8005e3e:	4959      	ldr	r1, [pc, #356]	; (8005fa4 <__ieee754_pow+0x22c>)
 8005e40:	428e      	cmp	r6, r1
 8005e42:	d12d      	bne.n	8005ea0 <__ieee754_pow+0x128>
 8005e44:	2f00      	cmp	r7, #0
 8005e46:	da79      	bge.n	8005f3c <__ieee754_pow+0x1c4>
 8005e48:	4956      	ldr	r1, [pc, #344]	; (8005fa4 <__ieee754_pow+0x22c>)
 8005e4a:	2000      	movs	r0, #0
 8005e4c:	f7fa fcf6 	bl	800083c <__aeabi_ddiv>
 8005e50:	e016      	b.n	8005e80 <__ieee754_pow+0x108>
 8005e52:	2100      	movs	r1, #0
 8005e54:	9100      	str	r1, [sp, #0]
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d13b      	bne.n	8005ed2 <__ieee754_pow+0x15a>
 8005e5a:	494f      	ldr	r1, [pc, #316]	; (8005f98 <__ieee754_pow+0x220>)
 8005e5c:	428e      	cmp	r6, r1
 8005e5e:	d1ee      	bne.n	8005e3e <__ieee754_pow+0xc6>
 8005e60:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8005e64:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005e68:	ea53 0308 	orrs.w	r3, r3, r8
 8005e6c:	f000 8466 	beq.w	800673c <__ieee754_pow+0x9c4>
 8005e70:	4b4d      	ldr	r3, [pc, #308]	; (8005fa8 <__ieee754_pow+0x230>)
 8005e72:	429c      	cmp	r4, r3
 8005e74:	dd0d      	ble.n	8005e92 <__ieee754_pow+0x11a>
 8005e76:	2f00      	cmp	r7, #0
 8005e78:	f280 8464 	bge.w	8006744 <__ieee754_pow+0x9cc>
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	2100      	movs	r1, #0
 8005e80:	ec41 0b10 	vmov	d0, r0, r1
 8005e84:	b00d      	add	sp, #52	; 0x34
 8005e86:	ecbd 8b06 	vpop	{d8-d10}
 8005e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e8e:	2102      	movs	r1, #2
 8005e90:	e7e0      	b.n	8005e54 <__ieee754_pow+0xdc>
 8005e92:	2f00      	cmp	r7, #0
 8005e94:	daf2      	bge.n	8005e7c <__ieee754_pow+0x104>
 8005e96:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8005e9a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005e9e:	e7ef      	b.n	8005e80 <__ieee754_pow+0x108>
 8005ea0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8005ea4:	d104      	bne.n	8005eb0 <__ieee754_pow+0x138>
 8005ea6:	4610      	mov	r0, r2
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	f7fa fb9d 	bl	80005e8 <__aeabi_dmul>
 8005eae:	e7e7      	b.n	8005e80 <__ieee754_pow+0x108>
 8005eb0:	493e      	ldr	r1, [pc, #248]	; (8005fac <__ieee754_pow+0x234>)
 8005eb2:	428f      	cmp	r7, r1
 8005eb4:	d10d      	bne.n	8005ed2 <__ieee754_pow+0x15a>
 8005eb6:	f1b9 0f00 	cmp.w	r9, #0
 8005eba:	db0a      	blt.n	8005ed2 <__ieee754_pow+0x15a>
 8005ebc:	ec43 2b10 	vmov	d0, r2, r3
 8005ec0:	b00d      	add	sp, #52	; 0x34
 8005ec2:	ecbd 8b06 	vpop	{d8-d10}
 8005ec6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eca:	f000 bc77 	b.w	80067bc <__ieee754_sqrt>
 8005ece:	2100      	movs	r1, #0
 8005ed0:	9100      	str	r1, [sp, #0]
 8005ed2:	ec43 2b10 	vmov	d0, r2, r3
 8005ed6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005eda:	f000 fd23 	bl	8006924 <fabs>
 8005ede:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ee2:	ec51 0b10 	vmov	r0, r1, d0
 8005ee6:	f1b8 0f00 	cmp.w	r8, #0
 8005eea:	d12a      	bne.n	8005f42 <__ieee754_pow+0x1ca>
 8005eec:	b12c      	cbz	r4, 8005efa <__ieee754_pow+0x182>
 8005eee:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8005fa4 <__ieee754_pow+0x22c>
 8005ef2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8005ef6:	45e6      	cmp	lr, ip
 8005ef8:	d123      	bne.n	8005f42 <__ieee754_pow+0x1ca>
 8005efa:	2f00      	cmp	r7, #0
 8005efc:	da05      	bge.n	8005f0a <__ieee754_pow+0x192>
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	2000      	movs	r0, #0
 8005f04:	4927      	ldr	r1, [pc, #156]	; (8005fa4 <__ieee754_pow+0x22c>)
 8005f06:	f7fa fc99 	bl	800083c <__aeabi_ddiv>
 8005f0a:	f1b9 0f00 	cmp.w	r9, #0
 8005f0e:	dab7      	bge.n	8005e80 <__ieee754_pow+0x108>
 8005f10:	9b00      	ldr	r3, [sp, #0]
 8005f12:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005f16:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005f1a:	4323      	orrs	r3, r4
 8005f1c:	d108      	bne.n	8005f30 <__ieee754_pow+0x1b8>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	4610      	mov	r0, r2
 8005f24:	4619      	mov	r1, r3
 8005f26:	f7fa f9a7 	bl	8000278 <__aeabi_dsub>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	e78d      	b.n	8005e4c <__ieee754_pow+0xd4>
 8005f30:	9b00      	ldr	r3, [sp, #0]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d1a4      	bne.n	8005e80 <__ieee754_pow+0x108>
 8005f36:	4602      	mov	r2, r0
 8005f38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f3c:	4610      	mov	r0, r2
 8005f3e:	4619      	mov	r1, r3
 8005f40:	e79e      	b.n	8005e80 <__ieee754_pow+0x108>
 8005f42:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8005f46:	f10c 35ff 	add.w	r5, ip, #4294967295
 8005f4a:	950a      	str	r5, [sp, #40]	; 0x28
 8005f4c:	9d00      	ldr	r5, [sp, #0]
 8005f4e:	46ac      	mov	ip, r5
 8005f50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005f52:	ea5c 0505 	orrs.w	r5, ip, r5
 8005f56:	d0e4      	beq.n	8005f22 <__ieee754_pow+0x1aa>
 8005f58:	4b15      	ldr	r3, [pc, #84]	; (8005fb0 <__ieee754_pow+0x238>)
 8005f5a:	429e      	cmp	r6, r3
 8005f5c:	f340 80fc 	ble.w	8006158 <__ieee754_pow+0x3e0>
 8005f60:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8005f64:	429e      	cmp	r6, r3
 8005f66:	4b10      	ldr	r3, [pc, #64]	; (8005fa8 <__ieee754_pow+0x230>)
 8005f68:	dd07      	ble.n	8005f7a <__ieee754_pow+0x202>
 8005f6a:	429c      	cmp	r4, r3
 8005f6c:	dc0a      	bgt.n	8005f84 <__ieee754_pow+0x20c>
 8005f6e:	2f00      	cmp	r7, #0
 8005f70:	da84      	bge.n	8005e7c <__ieee754_pow+0x104>
 8005f72:	a307      	add	r3, pc, #28	; (adr r3, 8005f90 <__ieee754_pow+0x218>)
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	e795      	b.n	8005ea6 <__ieee754_pow+0x12e>
 8005f7a:	429c      	cmp	r4, r3
 8005f7c:	dbf7      	blt.n	8005f6e <__ieee754_pow+0x1f6>
 8005f7e:	4b09      	ldr	r3, [pc, #36]	; (8005fa4 <__ieee754_pow+0x22c>)
 8005f80:	429c      	cmp	r4, r3
 8005f82:	dd17      	ble.n	8005fb4 <__ieee754_pow+0x23c>
 8005f84:	2f00      	cmp	r7, #0
 8005f86:	dcf4      	bgt.n	8005f72 <__ieee754_pow+0x1fa>
 8005f88:	e778      	b.n	8005e7c <__ieee754_pow+0x104>
 8005f8a:	bf00      	nop
 8005f8c:	f3af 8000 	nop.w
 8005f90:	8800759c 	.word	0x8800759c
 8005f94:	7e37e43c 	.word	0x7e37e43c
 8005f98:	7ff00000 	.word	0x7ff00000
 8005f9c:	08006bf9 	.word	0x08006bf9
 8005fa0:	433fffff 	.word	0x433fffff
 8005fa4:	3ff00000 	.word	0x3ff00000
 8005fa8:	3fefffff 	.word	0x3fefffff
 8005fac:	3fe00000 	.word	0x3fe00000
 8005fb0:	41e00000 	.word	0x41e00000
 8005fb4:	4b64      	ldr	r3, [pc, #400]	; (8006148 <__ieee754_pow+0x3d0>)
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f7fa f95e 	bl	8000278 <__aeabi_dsub>
 8005fbc:	a356      	add	r3, pc, #344	; (adr r3, 8006118 <__ieee754_pow+0x3a0>)
 8005fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc2:	4604      	mov	r4, r0
 8005fc4:	460d      	mov	r5, r1
 8005fc6:	f7fa fb0f 	bl	80005e8 <__aeabi_dmul>
 8005fca:	a355      	add	r3, pc, #340	; (adr r3, 8006120 <__ieee754_pow+0x3a8>)
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	4606      	mov	r6, r0
 8005fd2:	460f      	mov	r7, r1
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	4629      	mov	r1, r5
 8005fd8:	f7fa fb06 	bl	80005e8 <__aeabi_dmul>
 8005fdc:	4b5b      	ldr	r3, [pc, #364]	; (800614c <__ieee754_pow+0x3d4>)
 8005fde:	4682      	mov	sl, r0
 8005fe0:	468b      	mov	fp, r1
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	4620      	mov	r0, r4
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	f7fa fafe 	bl	80005e8 <__aeabi_dmul>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	a14d      	add	r1, pc, #308	; (adr r1, 8006128 <__ieee754_pow+0x3b0>)
 8005ff2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ff6:	f7fa f93f 	bl	8000278 <__aeabi_dsub>
 8005ffa:	4622      	mov	r2, r4
 8005ffc:	462b      	mov	r3, r5
 8005ffe:	f7fa faf3 	bl	80005e8 <__aeabi_dmul>
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	2000      	movs	r0, #0
 8006008:	4951      	ldr	r1, [pc, #324]	; (8006150 <__ieee754_pow+0x3d8>)
 800600a:	f7fa f935 	bl	8000278 <__aeabi_dsub>
 800600e:	4622      	mov	r2, r4
 8006010:	4680      	mov	r8, r0
 8006012:	4689      	mov	r9, r1
 8006014:	462b      	mov	r3, r5
 8006016:	4620      	mov	r0, r4
 8006018:	4629      	mov	r1, r5
 800601a:	f7fa fae5 	bl	80005e8 <__aeabi_dmul>
 800601e:	4602      	mov	r2, r0
 8006020:	460b      	mov	r3, r1
 8006022:	4640      	mov	r0, r8
 8006024:	4649      	mov	r1, r9
 8006026:	f7fa fadf 	bl	80005e8 <__aeabi_dmul>
 800602a:	a341      	add	r3, pc, #260	; (adr r3, 8006130 <__ieee754_pow+0x3b8>)
 800602c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006030:	f7fa fada 	bl	80005e8 <__aeabi_dmul>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4650      	mov	r0, sl
 800603a:	4659      	mov	r1, fp
 800603c:	f7fa f91c 	bl	8000278 <__aeabi_dsub>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4680      	mov	r8, r0
 8006046:	4689      	mov	r9, r1
 8006048:	4630      	mov	r0, r6
 800604a:	4639      	mov	r1, r7
 800604c:	f7fa f916 	bl	800027c <__adddf3>
 8006050:	2400      	movs	r4, #0
 8006052:	4632      	mov	r2, r6
 8006054:	463b      	mov	r3, r7
 8006056:	4620      	mov	r0, r4
 8006058:	460d      	mov	r5, r1
 800605a:	f7fa f90d 	bl	8000278 <__aeabi_dsub>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4640      	mov	r0, r8
 8006064:	4649      	mov	r1, r9
 8006066:	f7fa f907 	bl	8000278 <__aeabi_dsub>
 800606a:	9b00      	ldr	r3, [sp, #0]
 800606c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800606e:	3b01      	subs	r3, #1
 8006070:	4313      	orrs	r3, r2
 8006072:	4682      	mov	sl, r0
 8006074:	468b      	mov	fp, r1
 8006076:	f040 81f1 	bne.w	800645c <__ieee754_pow+0x6e4>
 800607a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8006138 <__ieee754_pow+0x3c0>
 800607e:	eeb0 8a47 	vmov.f32	s16, s14
 8006082:	eef0 8a67 	vmov.f32	s17, s15
 8006086:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800608a:	2600      	movs	r6, #0
 800608c:	4632      	mov	r2, r6
 800608e:	463b      	mov	r3, r7
 8006090:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006094:	f7fa f8f0 	bl	8000278 <__aeabi_dsub>
 8006098:	4622      	mov	r2, r4
 800609a:	462b      	mov	r3, r5
 800609c:	f7fa faa4 	bl	80005e8 <__aeabi_dmul>
 80060a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80060a4:	4680      	mov	r8, r0
 80060a6:	4689      	mov	r9, r1
 80060a8:	4650      	mov	r0, sl
 80060aa:	4659      	mov	r1, fp
 80060ac:	f7fa fa9c 	bl	80005e8 <__aeabi_dmul>
 80060b0:	4602      	mov	r2, r0
 80060b2:	460b      	mov	r3, r1
 80060b4:	4640      	mov	r0, r8
 80060b6:	4649      	mov	r1, r9
 80060b8:	f7fa f8e0 	bl	800027c <__adddf3>
 80060bc:	4632      	mov	r2, r6
 80060be:	463b      	mov	r3, r7
 80060c0:	4680      	mov	r8, r0
 80060c2:	4689      	mov	r9, r1
 80060c4:	4620      	mov	r0, r4
 80060c6:	4629      	mov	r1, r5
 80060c8:	f7fa fa8e 	bl	80005e8 <__aeabi_dmul>
 80060cc:	460b      	mov	r3, r1
 80060ce:	4604      	mov	r4, r0
 80060d0:	460d      	mov	r5, r1
 80060d2:	4602      	mov	r2, r0
 80060d4:	4649      	mov	r1, r9
 80060d6:	4640      	mov	r0, r8
 80060d8:	f7fa f8d0 	bl	800027c <__adddf3>
 80060dc:	4b1d      	ldr	r3, [pc, #116]	; (8006154 <__ieee754_pow+0x3dc>)
 80060de:	4299      	cmp	r1, r3
 80060e0:	ec45 4b19 	vmov	d9, r4, r5
 80060e4:	4606      	mov	r6, r0
 80060e6:	460f      	mov	r7, r1
 80060e8:	468b      	mov	fp, r1
 80060ea:	f340 82fe 	ble.w	80066ea <__ieee754_pow+0x972>
 80060ee:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80060f2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80060f6:	4303      	orrs	r3, r0
 80060f8:	f000 81f0 	beq.w	80064dc <__ieee754_pow+0x764>
 80060fc:	a310      	add	r3, pc, #64	; (adr r3, 8006140 <__ieee754_pow+0x3c8>)
 80060fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006102:	ec51 0b18 	vmov	r0, r1, d8
 8006106:	f7fa fa6f 	bl	80005e8 <__aeabi_dmul>
 800610a:	a30d      	add	r3, pc, #52	; (adr r3, 8006140 <__ieee754_pow+0x3c8>)
 800610c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006110:	e6cb      	b.n	8005eaa <__ieee754_pow+0x132>
 8006112:	bf00      	nop
 8006114:	f3af 8000 	nop.w
 8006118:	60000000 	.word	0x60000000
 800611c:	3ff71547 	.word	0x3ff71547
 8006120:	f85ddf44 	.word	0xf85ddf44
 8006124:	3e54ae0b 	.word	0x3e54ae0b
 8006128:	55555555 	.word	0x55555555
 800612c:	3fd55555 	.word	0x3fd55555
 8006130:	652b82fe 	.word	0x652b82fe
 8006134:	3ff71547 	.word	0x3ff71547
 8006138:	00000000 	.word	0x00000000
 800613c:	bff00000 	.word	0xbff00000
 8006140:	8800759c 	.word	0x8800759c
 8006144:	7e37e43c 	.word	0x7e37e43c
 8006148:	3ff00000 	.word	0x3ff00000
 800614c:	3fd00000 	.word	0x3fd00000
 8006150:	3fe00000 	.word	0x3fe00000
 8006154:	408fffff 	.word	0x408fffff
 8006158:	4bd7      	ldr	r3, [pc, #860]	; (80064b8 <__ieee754_pow+0x740>)
 800615a:	ea03 0309 	and.w	r3, r3, r9
 800615e:	2200      	movs	r2, #0
 8006160:	b92b      	cbnz	r3, 800616e <__ieee754_pow+0x3f6>
 8006162:	4bd6      	ldr	r3, [pc, #856]	; (80064bc <__ieee754_pow+0x744>)
 8006164:	f7fa fa40 	bl	80005e8 <__aeabi_dmul>
 8006168:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800616c:	460c      	mov	r4, r1
 800616e:	1523      	asrs	r3, r4, #20
 8006170:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006174:	4413      	add	r3, r2
 8006176:	9309      	str	r3, [sp, #36]	; 0x24
 8006178:	4bd1      	ldr	r3, [pc, #836]	; (80064c0 <__ieee754_pow+0x748>)
 800617a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800617e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006182:	429c      	cmp	r4, r3
 8006184:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006188:	dd08      	ble.n	800619c <__ieee754_pow+0x424>
 800618a:	4bce      	ldr	r3, [pc, #824]	; (80064c4 <__ieee754_pow+0x74c>)
 800618c:	429c      	cmp	r4, r3
 800618e:	f340 8163 	ble.w	8006458 <__ieee754_pow+0x6e0>
 8006192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006194:	3301      	adds	r3, #1
 8006196:	9309      	str	r3, [sp, #36]	; 0x24
 8006198:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800619c:	2400      	movs	r4, #0
 800619e:	00e3      	lsls	r3, r4, #3
 80061a0:	930b      	str	r3, [sp, #44]	; 0x2c
 80061a2:	4bc9      	ldr	r3, [pc, #804]	; (80064c8 <__ieee754_pow+0x750>)
 80061a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80061a8:	ed93 7b00 	vldr	d7, [r3]
 80061ac:	4629      	mov	r1, r5
 80061ae:	ec53 2b17 	vmov	r2, r3, d7
 80061b2:	eeb0 8a47 	vmov.f32	s16, s14
 80061b6:	eef0 8a67 	vmov.f32	s17, s15
 80061ba:	4682      	mov	sl, r0
 80061bc:	f7fa f85c 	bl	8000278 <__aeabi_dsub>
 80061c0:	4652      	mov	r2, sl
 80061c2:	4606      	mov	r6, r0
 80061c4:	460f      	mov	r7, r1
 80061c6:	462b      	mov	r3, r5
 80061c8:	ec51 0b18 	vmov	r0, r1, d8
 80061cc:	f7fa f856 	bl	800027c <__adddf3>
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	2000      	movs	r0, #0
 80061d6:	49bd      	ldr	r1, [pc, #756]	; (80064cc <__ieee754_pow+0x754>)
 80061d8:	f7fa fb30 	bl	800083c <__aeabi_ddiv>
 80061dc:	ec41 0b19 	vmov	d9, r0, r1
 80061e0:	4602      	mov	r2, r0
 80061e2:	460b      	mov	r3, r1
 80061e4:	4630      	mov	r0, r6
 80061e6:	4639      	mov	r1, r7
 80061e8:	f7fa f9fe 	bl	80005e8 <__aeabi_dmul>
 80061ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80061f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80061f8:	2300      	movs	r3, #0
 80061fa:	9304      	str	r3, [sp, #16]
 80061fc:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006200:	46ab      	mov	fp, r5
 8006202:	106d      	asrs	r5, r5, #1
 8006204:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8006208:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800620c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8006210:	2200      	movs	r2, #0
 8006212:	4640      	mov	r0, r8
 8006214:	4649      	mov	r1, r9
 8006216:	4614      	mov	r4, r2
 8006218:	461d      	mov	r5, r3
 800621a:	f7fa f9e5 	bl	80005e8 <__aeabi_dmul>
 800621e:	4602      	mov	r2, r0
 8006220:	460b      	mov	r3, r1
 8006222:	4630      	mov	r0, r6
 8006224:	4639      	mov	r1, r7
 8006226:	f7fa f827 	bl	8000278 <__aeabi_dsub>
 800622a:	ec53 2b18 	vmov	r2, r3, d8
 800622e:	4606      	mov	r6, r0
 8006230:	460f      	mov	r7, r1
 8006232:	4620      	mov	r0, r4
 8006234:	4629      	mov	r1, r5
 8006236:	f7fa f81f 	bl	8000278 <__aeabi_dsub>
 800623a:	4602      	mov	r2, r0
 800623c:	460b      	mov	r3, r1
 800623e:	4650      	mov	r0, sl
 8006240:	4659      	mov	r1, fp
 8006242:	f7fa f819 	bl	8000278 <__aeabi_dsub>
 8006246:	4642      	mov	r2, r8
 8006248:	464b      	mov	r3, r9
 800624a:	f7fa f9cd 	bl	80005e8 <__aeabi_dmul>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4630      	mov	r0, r6
 8006254:	4639      	mov	r1, r7
 8006256:	f7fa f80f 	bl	8000278 <__aeabi_dsub>
 800625a:	ec53 2b19 	vmov	r2, r3, d9
 800625e:	f7fa f9c3 	bl	80005e8 <__aeabi_dmul>
 8006262:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006266:	ec41 0b18 	vmov	d8, r0, r1
 800626a:	4610      	mov	r0, r2
 800626c:	4619      	mov	r1, r3
 800626e:	f7fa f9bb 	bl	80005e8 <__aeabi_dmul>
 8006272:	a37d      	add	r3, pc, #500	; (adr r3, 8006468 <__ieee754_pow+0x6f0>)
 8006274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006278:	4604      	mov	r4, r0
 800627a:	460d      	mov	r5, r1
 800627c:	f7fa f9b4 	bl	80005e8 <__aeabi_dmul>
 8006280:	a37b      	add	r3, pc, #492	; (adr r3, 8006470 <__ieee754_pow+0x6f8>)
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	f7f9 fff9 	bl	800027c <__adddf3>
 800628a:	4622      	mov	r2, r4
 800628c:	462b      	mov	r3, r5
 800628e:	f7fa f9ab 	bl	80005e8 <__aeabi_dmul>
 8006292:	a379      	add	r3, pc, #484	; (adr r3, 8006478 <__ieee754_pow+0x700>)
 8006294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006298:	f7f9 fff0 	bl	800027c <__adddf3>
 800629c:	4622      	mov	r2, r4
 800629e:	462b      	mov	r3, r5
 80062a0:	f7fa f9a2 	bl	80005e8 <__aeabi_dmul>
 80062a4:	a376      	add	r3, pc, #472	; (adr r3, 8006480 <__ieee754_pow+0x708>)
 80062a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062aa:	f7f9 ffe7 	bl	800027c <__adddf3>
 80062ae:	4622      	mov	r2, r4
 80062b0:	462b      	mov	r3, r5
 80062b2:	f7fa f999 	bl	80005e8 <__aeabi_dmul>
 80062b6:	a374      	add	r3, pc, #464	; (adr r3, 8006488 <__ieee754_pow+0x710>)
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	f7f9 ffde 	bl	800027c <__adddf3>
 80062c0:	4622      	mov	r2, r4
 80062c2:	462b      	mov	r3, r5
 80062c4:	f7fa f990 	bl	80005e8 <__aeabi_dmul>
 80062c8:	a371      	add	r3, pc, #452	; (adr r3, 8006490 <__ieee754_pow+0x718>)
 80062ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ce:	f7f9 ffd5 	bl	800027c <__adddf3>
 80062d2:	4622      	mov	r2, r4
 80062d4:	4606      	mov	r6, r0
 80062d6:	460f      	mov	r7, r1
 80062d8:	462b      	mov	r3, r5
 80062da:	4620      	mov	r0, r4
 80062dc:	4629      	mov	r1, r5
 80062de:	f7fa f983 	bl	80005e8 <__aeabi_dmul>
 80062e2:	4602      	mov	r2, r0
 80062e4:	460b      	mov	r3, r1
 80062e6:	4630      	mov	r0, r6
 80062e8:	4639      	mov	r1, r7
 80062ea:	f7fa f97d 	bl	80005e8 <__aeabi_dmul>
 80062ee:	4642      	mov	r2, r8
 80062f0:	4604      	mov	r4, r0
 80062f2:	460d      	mov	r5, r1
 80062f4:	464b      	mov	r3, r9
 80062f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062fa:	f7f9 ffbf 	bl	800027c <__adddf3>
 80062fe:	ec53 2b18 	vmov	r2, r3, d8
 8006302:	f7fa f971 	bl	80005e8 <__aeabi_dmul>
 8006306:	4622      	mov	r2, r4
 8006308:	462b      	mov	r3, r5
 800630a:	f7f9 ffb7 	bl	800027c <__adddf3>
 800630e:	4642      	mov	r2, r8
 8006310:	4682      	mov	sl, r0
 8006312:	468b      	mov	fp, r1
 8006314:	464b      	mov	r3, r9
 8006316:	4640      	mov	r0, r8
 8006318:	4649      	mov	r1, r9
 800631a:	f7fa f965 	bl	80005e8 <__aeabi_dmul>
 800631e:	4b6c      	ldr	r3, [pc, #432]	; (80064d0 <__ieee754_pow+0x758>)
 8006320:	2200      	movs	r2, #0
 8006322:	4606      	mov	r6, r0
 8006324:	460f      	mov	r7, r1
 8006326:	f7f9 ffa9 	bl	800027c <__adddf3>
 800632a:	4652      	mov	r2, sl
 800632c:	465b      	mov	r3, fp
 800632e:	f7f9 ffa5 	bl	800027c <__adddf3>
 8006332:	9c04      	ldr	r4, [sp, #16]
 8006334:	460d      	mov	r5, r1
 8006336:	4622      	mov	r2, r4
 8006338:	460b      	mov	r3, r1
 800633a:	4640      	mov	r0, r8
 800633c:	4649      	mov	r1, r9
 800633e:	f7fa f953 	bl	80005e8 <__aeabi_dmul>
 8006342:	4b63      	ldr	r3, [pc, #396]	; (80064d0 <__ieee754_pow+0x758>)
 8006344:	4680      	mov	r8, r0
 8006346:	4689      	mov	r9, r1
 8006348:	2200      	movs	r2, #0
 800634a:	4620      	mov	r0, r4
 800634c:	4629      	mov	r1, r5
 800634e:	f7f9 ff93 	bl	8000278 <__aeabi_dsub>
 8006352:	4632      	mov	r2, r6
 8006354:	463b      	mov	r3, r7
 8006356:	f7f9 ff8f 	bl	8000278 <__aeabi_dsub>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4650      	mov	r0, sl
 8006360:	4659      	mov	r1, fp
 8006362:	f7f9 ff89 	bl	8000278 <__aeabi_dsub>
 8006366:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800636a:	f7fa f93d 	bl	80005e8 <__aeabi_dmul>
 800636e:	4622      	mov	r2, r4
 8006370:	4606      	mov	r6, r0
 8006372:	460f      	mov	r7, r1
 8006374:	462b      	mov	r3, r5
 8006376:	ec51 0b18 	vmov	r0, r1, d8
 800637a:	f7fa f935 	bl	80005e8 <__aeabi_dmul>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	4630      	mov	r0, r6
 8006384:	4639      	mov	r1, r7
 8006386:	f7f9 ff79 	bl	800027c <__adddf3>
 800638a:	4606      	mov	r6, r0
 800638c:	460f      	mov	r7, r1
 800638e:	4602      	mov	r2, r0
 8006390:	460b      	mov	r3, r1
 8006392:	4640      	mov	r0, r8
 8006394:	4649      	mov	r1, r9
 8006396:	f7f9 ff71 	bl	800027c <__adddf3>
 800639a:	9c04      	ldr	r4, [sp, #16]
 800639c:	a33e      	add	r3, pc, #248	; (adr r3, 8006498 <__ieee754_pow+0x720>)
 800639e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a2:	4620      	mov	r0, r4
 80063a4:	460d      	mov	r5, r1
 80063a6:	f7fa f91f 	bl	80005e8 <__aeabi_dmul>
 80063aa:	4642      	mov	r2, r8
 80063ac:	ec41 0b18 	vmov	d8, r0, r1
 80063b0:	464b      	mov	r3, r9
 80063b2:	4620      	mov	r0, r4
 80063b4:	4629      	mov	r1, r5
 80063b6:	f7f9 ff5f 	bl	8000278 <__aeabi_dsub>
 80063ba:	4602      	mov	r2, r0
 80063bc:	460b      	mov	r3, r1
 80063be:	4630      	mov	r0, r6
 80063c0:	4639      	mov	r1, r7
 80063c2:	f7f9 ff59 	bl	8000278 <__aeabi_dsub>
 80063c6:	a336      	add	r3, pc, #216	; (adr r3, 80064a0 <__ieee754_pow+0x728>)
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	f7fa f90c 	bl	80005e8 <__aeabi_dmul>
 80063d0:	a335      	add	r3, pc, #212	; (adr r3, 80064a8 <__ieee754_pow+0x730>)
 80063d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d6:	4606      	mov	r6, r0
 80063d8:	460f      	mov	r7, r1
 80063da:	4620      	mov	r0, r4
 80063dc:	4629      	mov	r1, r5
 80063de:	f7fa f903 	bl	80005e8 <__aeabi_dmul>
 80063e2:	4602      	mov	r2, r0
 80063e4:	460b      	mov	r3, r1
 80063e6:	4630      	mov	r0, r6
 80063e8:	4639      	mov	r1, r7
 80063ea:	f7f9 ff47 	bl	800027c <__adddf3>
 80063ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80063f0:	4b38      	ldr	r3, [pc, #224]	; (80064d4 <__ieee754_pow+0x75c>)
 80063f2:	4413      	add	r3, r2
 80063f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f8:	f7f9 ff40 	bl	800027c <__adddf3>
 80063fc:	4682      	mov	sl, r0
 80063fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006400:	468b      	mov	fp, r1
 8006402:	f7fa f887 	bl	8000514 <__aeabi_i2d>
 8006406:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006408:	4b33      	ldr	r3, [pc, #204]	; (80064d8 <__ieee754_pow+0x760>)
 800640a:	4413      	add	r3, r2
 800640c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006410:	4606      	mov	r6, r0
 8006412:	460f      	mov	r7, r1
 8006414:	4652      	mov	r2, sl
 8006416:	465b      	mov	r3, fp
 8006418:	ec51 0b18 	vmov	r0, r1, d8
 800641c:	f7f9 ff2e 	bl	800027c <__adddf3>
 8006420:	4642      	mov	r2, r8
 8006422:	464b      	mov	r3, r9
 8006424:	f7f9 ff2a 	bl	800027c <__adddf3>
 8006428:	4632      	mov	r2, r6
 800642a:	463b      	mov	r3, r7
 800642c:	f7f9 ff26 	bl	800027c <__adddf3>
 8006430:	9c04      	ldr	r4, [sp, #16]
 8006432:	4632      	mov	r2, r6
 8006434:	463b      	mov	r3, r7
 8006436:	4620      	mov	r0, r4
 8006438:	460d      	mov	r5, r1
 800643a:	f7f9 ff1d 	bl	8000278 <__aeabi_dsub>
 800643e:	4642      	mov	r2, r8
 8006440:	464b      	mov	r3, r9
 8006442:	f7f9 ff19 	bl	8000278 <__aeabi_dsub>
 8006446:	ec53 2b18 	vmov	r2, r3, d8
 800644a:	f7f9 ff15 	bl	8000278 <__aeabi_dsub>
 800644e:	4602      	mov	r2, r0
 8006450:	460b      	mov	r3, r1
 8006452:	4650      	mov	r0, sl
 8006454:	4659      	mov	r1, fp
 8006456:	e606      	b.n	8006066 <__ieee754_pow+0x2ee>
 8006458:	2401      	movs	r4, #1
 800645a:	e6a0      	b.n	800619e <__ieee754_pow+0x426>
 800645c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80064b0 <__ieee754_pow+0x738>
 8006460:	e60d      	b.n	800607e <__ieee754_pow+0x306>
 8006462:	bf00      	nop
 8006464:	f3af 8000 	nop.w
 8006468:	4a454eef 	.word	0x4a454eef
 800646c:	3fca7e28 	.word	0x3fca7e28
 8006470:	93c9db65 	.word	0x93c9db65
 8006474:	3fcd864a 	.word	0x3fcd864a
 8006478:	a91d4101 	.word	0xa91d4101
 800647c:	3fd17460 	.word	0x3fd17460
 8006480:	518f264d 	.word	0x518f264d
 8006484:	3fd55555 	.word	0x3fd55555
 8006488:	db6fabff 	.word	0xdb6fabff
 800648c:	3fdb6db6 	.word	0x3fdb6db6
 8006490:	33333303 	.word	0x33333303
 8006494:	3fe33333 	.word	0x3fe33333
 8006498:	e0000000 	.word	0xe0000000
 800649c:	3feec709 	.word	0x3feec709
 80064a0:	dc3a03fd 	.word	0xdc3a03fd
 80064a4:	3feec709 	.word	0x3feec709
 80064a8:	145b01f5 	.word	0x145b01f5
 80064ac:	be3e2fe0 	.word	0xbe3e2fe0
 80064b0:	00000000 	.word	0x00000000
 80064b4:	3ff00000 	.word	0x3ff00000
 80064b8:	7ff00000 	.word	0x7ff00000
 80064bc:	43400000 	.word	0x43400000
 80064c0:	0003988e 	.word	0x0003988e
 80064c4:	000bb679 	.word	0x000bb679
 80064c8:	08006c28 	.word	0x08006c28
 80064cc:	3ff00000 	.word	0x3ff00000
 80064d0:	40080000 	.word	0x40080000
 80064d4:	08006c48 	.word	0x08006c48
 80064d8:	08006c38 	.word	0x08006c38
 80064dc:	a3b5      	add	r3, pc, #724	; (adr r3, 80067b4 <__ieee754_pow+0xa3c>)
 80064de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e2:	4640      	mov	r0, r8
 80064e4:	4649      	mov	r1, r9
 80064e6:	f7f9 fec9 	bl	800027c <__adddf3>
 80064ea:	4622      	mov	r2, r4
 80064ec:	ec41 0b1a 	vmov	d10, r0, r1
 80064f0:	462b      	mov	r3, r5
 80064f2:	4630      	mov	r0, r6
 80064f4:	4639      	mov	r1, r7
 80064f6:	f7f9 febf 	bl	8000278 <__aeabi_dsub>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	ec51 0b1a 	vmov	r0, r1, d10
 8006502:	f7fa fb01 	bl	8000b08 <__aeabi_dcmpgt>
 8006506:	2800      	cmp	r0, #0
 8006508:	f47f adf8 	bne.w	80060fc <__ieee754_pow+0x384>
 800650c:	4aa4      	ldr	r2, [pc, #656]	; (80067a0 <__ieee754_pow+0xa28>)
 800650e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006512:	4293      	cmp	r3, r2
 8006514:	f340 810b 	ble.w	800672e <__ieee754_pow+0x9b6>
 8006518:	151b      	asrs	r3, r3, #20
 800651a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800651e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006522:	fa4a f303 	asr.w	r3, sl, r3
 8006526:	445b      	add	r3, fp
 8006528:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800652c:	4e9d      	ldr	r6, [pc, #628]	; (80067a4 <__ieee754_pow+0xa2c>)
 800652e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8006532:	4116      	asrs	r6, r2
 8006534:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8006538:	2000      	movs	r0, #0
 800653a:	ea23 0106 	bic.w	r1, r3, r6
 800653e:	f1c2 0214 	rsb	r2, r2, #20
 8006542:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006546:	fa4a fa02 	asr.w	sl, sl, r2
 800654a:	f1bb 0f00 	cmp.w	fp, #0
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	4620      	mov	r0, r4
 8006554:	4629      	mov	r1, r5
 8006556:	bfb8      	it	lt
 8006558:	f1ca 0a00 	rsblt	sl, sl, #0
 800655c:	f7f9 fe8c 	bl	8000278 <__aeabi_dsub>
 8006560:	ec41 0b19 	vmov	d9, r0, r1
 8006564:	4642      	mov	r2, r8
 8006566:	464b      	mov	r3, r9
 8006568:	ec51 0b19 	vmov	r0, r1, d9
 800656c:	f7f9 fe86 	bl	800027c <__adddf3>
 8006570:	2400      	movs	r4, #0
 8006572:	a379      	add	r3, pc, #484	; (adr r3, 8006758 <__ieee754_pow+0x9e0>)
 8006574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006578:	4620      	mov	r0, r4
 800657a:	460d      	mov	r5, r1
 800657c:	f7fa f834 	bl	80005e8 <__aeabi_dmul>
 8006580:	ec53 2b19 	vmov	r2, r3, d9
 8006584:	4606      	mov	r6, r0
 8006586:	460f      	mov	r7, r1
 8006588:	4620      	mov	r0, r4
 800658a:	4629      	mov	r1, r5
 800658c:	f7f9 fe74 	bl	8000278 <__aeabi_dsub>
 8006590:	4602      	mov	r2, r0
 8006592:	460b      	mov	r3, r1
 8006594:	4640      	mov	r0, r8
 8006596:	4649      	mov	r1, r9
 8006598:	f7f9 fe6e 	bl	8000278 <__aeabi_dsub>
 800659c:	a370      	add	r3, pc, #448	; (adr r3, 8006760 <__ieee754_pow+0x9e8>)
 800659e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a2:	f7fa f821 	bl	80005e8 <__aeabi_dmul>
 80065a6:	a370      	add	r3, pc, #448	; (adr r3, 8006768 <__ieee754_pow+0x9f0>)
 80065a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ac:	4680      	mov	r8, r0
 80065ae:	4689      	mov	r9, r1
 80065b0:	4620      	mov	r0, r4
 80065b2:	4629      	mov	r1, r5
 80065b4:	f7fa f818 	bl	80005e8 <__aeabi_dmul>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4640      	mov	r0, r8
 80065be:	4649      	mov	r1, r9
 80065c0:	f7f9 fe5c 	bl	800027c <__adddf3>
 80065c4:	4604      	mov	r4, r0
 80065c6:	460d      	mov	r5, r1
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	4630      	mov	r0, r6
 80065ce:	4639      	mov	r1, r7
 80065d0:	f7f9 fe54 	bl	800027c <__adddf3>
 80065d4:	4632      	mov	r2, r6
 80065d6:	463b      	mov	r3, r7
 80065d8:	4680      	mov	r8, r0
 80065da:	4689      	mov	r9, r1
 80065dc:	f7f9 fe4c 	bl	8000278 <__aeabi_dsub>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	4620      	mov	r0, r4
 80065e6:	4629      	mov	r1, r5
 80065e8:	f7f9 fe46 	bl	8000278 <__aeabi_dsub>
 80065ec:	4642      	mov	r2, r8
 80065ee:	4606      	mov	r6, r0
 80065f0:	460f      	mov	r7, r1
 80065f2:	464b      	mov	r3, r9
 80065f4:	4640      	mov	r0, r8
 80065f6:	4649      	mov	r1, r9
 80065f8:	f7f9 fff6 	bl	80005e8 <__aeabi_dmul>
 80065fc:	a35c      	add	r3, pc, #368	; (adr r3, 8006770 <__ieee754_pow+0x9f8>)
 80065fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006602:	4604      	mov	r4, r0
 8006604:	460d      	mov	r5, r1
 8006606:	f7f9 ffef 	bl	80005e8 <__aeabi_dmul>
 800660a:	a35b      	add	r3, pc, #364	; (adr r3, 8006778 <__ieee754_pow+0xa00>)
 800660c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006610:	f7f9 fe32 	bl	8000278 <__aeabi_dsub>
 8006614:	4622      	mov	r2, r4
 8006616:	462b      	mov	r3, r5
 8006618:	f7f9 ffe6 	bl	80005e8 <__aeabi_dmul>
 800661c:	a358      	add	r3, pc, #352	; (adr r3, 8006780 <__ieee754_pow+0xa08>)
 800661e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006622:	f7f9 fe2b 	bl	800027c <__adddf3>
 8006626:	4622      	mov	r2, r4
 8006628:	462b      	mov	r3, r5
 800662a:	f7f9 ffdd 	bl	80005e8 <__aeabi_dmul>
 800662e:	a356      	add	r3, pc, #344	; (adr r3, 8006788 <__ieee754_pow+0xa10>)
 8006630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006634:	f7f9 fe20 	bl	8000278 <__aeabi_dsub>
 8006638:	4622      	mov	r2, r4
 800663a:	462b      	mov	r3, r5
 800663c:	f7f9 ffd4 	bl	80005e8 <__aeabi_dmul>
 8006640:	a353      	add	r3, pc, #332	; (adr r3, 8006790 <__ieee754_pow+0xa18>)
 8006642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006646:	f7f9 fe19 	bl	800027c <__adddf3>
 800664a:	4622      	mov	r2, r4
 800664c:	462b      	mov	r3, r5
 800664e:	f7f9 ffcb 	bl	80005e8 <__aeabi_dmul>
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	4640      	mov	r0, r8
 8006658:	4649      	mov	r1, r9
 800665a:	f7f9 fe0d 	bl	8000278 <__aeabi_dsub>
 800665e:	4604      	mov	r4, r0
 8006660:	460d      	mov	r5, r1
 8006662:	4602      	mov	r2, r0
 8006664:	460b      	mov	r3, r1
 8006666:	4640      	mov	r0, r8
 8006668:	4649      	mov	r1, r9
 800666a:	f7f9 ffbd 	bl	80005e8 <__aeabi_dmul>
 800666e:	2200      	movs	r2, #0
 8006670:	ec41 0b19 	vmov	d9, r0, r1
 8006674:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006678:	4620      	mov	r0, r4
 800667a:	4629      	mov	r1, r5
 800667c:	f7f9 fdfc 	bl	8000278 <__aeabi_dsub>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	ec51 0b19 	vmov	r0, r1, d9
 8006688:	f7fa f8d8 	bl	800083c <__aeabi_ddiv>
 800668c:	4632      	mov	r2, r6
 800668e:	4604      	mov	r4, r0
 8006690:	460d      	mov	r5, r1
 8006692:	463b      	mov	r3, r7
 8006694:	4640      	mov	r0, r8
 8006696:	4649      	mov	r1, r9
 8006698:	f7f9 ffa6 	bl	80005e8 <__aeabi_dmul>
 800669c:	4632      	mov	r2, r6
 800669e:	463b      	mov	r3, r7
 80066a0:	f7f9 fdec 	bl	800027c <__adddf3>
 80066a4:	4602      	mov	r2, r0
 80066a6:	460b      	mov	r3, r1
 80066a8:	4620      	mov	r0, r4
 80066aa:	4629      	mov	r1, r5
 80066ac:	f7f9 fde4 	bl	8000278 <__aeabi_dsub>
 80066b0:	4642      	mov	r2, r8
 80066b2:	464b      	mov	r3, r9
 80066b4:	f7f9 fde0 	bl	8000278 <__aeabi_dsub>
 80066b8:	460b      	mov	r3, r1
 80066ba:	4602      	mov	r2, r0
 80066bc:	493a      	ldr	r1, [pc, #232]	; (80067a8 <__ieee754_pow+0xa30>)
 80066be:	2000      	movs	r0, #0
 80066c0:	f7f9 fdda 	bl	8000278 <__aeabi_dsub>
 80066c4:	e9cd 0100 	strd	r0, r1, [sp]
 80066c8:	9b01      	ldr	r3, [sp, #4]
 80066ca:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80066ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066d2:	da2f      	bge.n	8006734 <__ieee754_pow+0x9bc>
 80066d4:	4650      	mov	r0, sl
 80066d6:	ed9d 0b00 	vldr	d0, [sp]
 80066da:	f000 f9cd 	bl	8006a78 <scalbn>
 80066de:	ec51 0b10 	vmov	r0, r1, d0
 80066e2:	ec53 2b18 	vmov	r2, r3, d8
 80066e6:	f7ff bbe0 	b.w	8005eaa <__ieee754_pow+0x132>
 80066ea:	4b30      	ldr	r3, [pc, #192]	; (80067ac <__ieee754_pow+0xa34>)
 80066ec:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80066f0:	429e      	cmp	r6, r3
 80066f2:	f77f af0b 	ble.w	800650c <__ieee754_pow+0x794>
 80066f6:	4b2e      	ldr	r3, [pc, #184]	; (80067b0 <__ieee754_pow+0xa38>)
 80066f8:	440b      	add	r3, r1
 80066fa:	4303      	orrs	r3, r0
 80066fc:	d00b      	beq.n	8006716 <__ieee754_pow+0x99e>
 80066fe:	a326      	add	r3, pc, #152	; (adr r3, 8006798 <__ieee754_pow+0xa20>)
 8006700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006704:	ec51 0b18 	vmov	r0, r1, d8
 8006708:	f7f9 ff6e 	bl	80005e8 <__aeabi_dmul>
 800670c:	a322      	add	r3, pc, #136	; (adr r3, 8006798 <__ieee754_pow+0xa20>)
 800670e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006712:	f7ff bbca 	b.w	8005eaa <__ieee754_pow+0x132>
 8006716:	4622      	mov	r2, r4
 8006718:	462b      	mov	r3, r5
 800671a:	f7f9 fdad 	bl	8000278 <__aeabi_dsub>
 800671e:	4642      	mov	r2, r8
 8006720:	464b      	mov	r3, r9
 8006722:	f7fa f9e7 	bl	8000af4 <__aeabi_dcmpge>
 8006726:	2800      	cmp	r0, #0
 8006728:	f43f aef0 	beq.w	800650c <__ieee754_pow+0x794>
 800672c:	e7e7      	b.n	80066fe <__ieee754_pow+0x986>
 800672e:	f04f 0a00 	mov.w	sl, #0
 8006732:	e717      	b.n	8006564 <__ieee754_pow+0x7ec>
 8006734:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006738:	4619      	mov	r1, r3
 800673a:	e7d2      	b.n	80066e2 <__ieee754_pow+0x96a>
 800673c:	491a      	ldr	r1, [pc, #104]	; (80067a8 <__ieee754_pow+0xa30>)
 800673e:	2000      	movs	r0, #0
 8006740:	f7ff bb9e 	b.w	8005e80 <__ieee754_pow+0x108>
 8006744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006748:	f7ff bb9a 	b.w	8005e80 <__ieee754_pow+0x108>
 800674c:	9000      	str	r0, [sp, #0]
 800674e:	f7ff bb76 	b.w	8005e3e <__ieee754_pow+0xc6>
 8006752:	2100      	movs	r1, #0
 8006754:	f7ff bb60 	b.w	8005e18 <__ieee754_pow+0xa0>
 8006758:	00000000 	.word	0x00000000
 800675c:	3fe62e43 	.word	0x3fe62e43
 8006760:	fefa39ef 	.word	0xfefa39ef
 8006764:	3fe62e42 	.word	0x3fe62e42
 8006768:	0ca86c39 	.word	0x0ca86c39
 800676c:	be205c61 	.word	0xbe205c61
 8006770:	72bea4d0 	.word	0x72bea4d0
 8006774:	3e663769 	.word	0x3e663769
 8006778:	c5d26bf1 	.word	0xc5d26bf1
 800677c:	3ebbbd41 	.word	0x3ebbbd41
 8006780:	af25de2c 	.word	0xaf25de2c
 8006784:	3f11566a 	.word	0x3f11566a
 8006788:	16bebd93 	.word	0x16bebd93
 800678c:	3f66c16c 	.word	0x3f66c16c
 8006790:	5555553e 	.word	0x5555553e
 8006794:	3fc55555 	.word	0x3fc55555
 8006798:	c2f8f359 	.word	0xc2f8f359
 800679c:	01a56e1f 	.word	0x01a56e1f
 80067a0:	3fe00000 	.word	0x3fe00000
 80067a4:	000fffff 	.word	0x000fffff
 80067a8:	3ff00000 	.word	0x3ff00000
 80067ac:	4090cbff 	.word	0x4090cbff
 80067b0:	3f6f3400 	.word	0x3f6f3400
 80067b4:	652b82fe 	.word	0x652b82fe
 80067b8:	3c971547 	.word	0x3c971547

080067bc <__ieee754_sqrt>:
 80067bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067c0:	ec55 4b10 	vmov	r4, r5, d0
 80067c4:	4e56      	ldr	r6, [pc, #344]	; (8006920 <__ieee754_sqrt+0x164>)
 80067c6:	43ae      	bics	r6, r5
 80067c8:	ee10 0a10 	vmov	r0, s0
 80067cc:	ee10 3a10 	vmov	r3, s0
 80067d0:	4629      	mov	r1, r5
 80067d2:	462a      	mov	r2, r5
 80067d4:	d110      	bne.n	80067f8 <__ieee754_sqrt+0x3c>
 80067d6:	ee10 2a10 	vmov	r2, s0
 80067da:	462b      	mov	r3, r5
 80067dc:	f7f9 ff04 	bl	80005e8 <__aeabi_dmul>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	4620      	mov	r0, r4
 80067e6:	4629      	mov	r1, r5
 80067e8:	f7f9 fd48 	bl	800027c <__adddf3>
 80067ec:	4604      	mov	r4, r0
 80067ee:	460d      	mov	r5, r1
 80067f0:	ec45 4b10 	vmov	d0, r4, r5
 80067f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067f8:	2d00      	cmp	r5, #0
 80067fa:	dc10      	bgt.n	800681e <__ieee754_sqrt+0x62>
 80067fc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006800:	4330      	orrs	r0, r6
 8006802:	d0f5      	beq.n	80067f0 <__ieee754_sqrt+0x34>
 8006804:	b15d      	cbz	r5, 800681e <__ieee754_sqrt+0x62>
 8006806:	ee10 2a10 	vmov	r2, s0
 800680a:	462b      	mov	r3, r5
 800680c:	ee10 0a10 	vmov	r0, s0
 8006810:	f7f9 fd32 	bl	8000278 <__aeabi_dsub>
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	f7fa f810 	bl	800083c <__aeabi_ddiv>
 800681c:	e7e6      	b.n	80067ec <__ieee754_sqrt+0x30>
 800681e:	1509      	asrs	r1, r1, #20
 8006820:	d076      	beq.n	8006910 <__ieee754_sqrt+0x154>
 8006822:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006826:	07ce      	lsls	r6, r1, #31
 8006828:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800682c:	bf5e      	ittt	pl
 800682e:	0fda      	lsrpl	r2, r3, #31
 8006830:	005b      	lslpl	r3, r3, #1
 8006832:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8006836:	0fda      	lsrs	r2, r3, #31
 8006838:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800683c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006840:	2000      	movs	r0, #0
 8006842:	106d      	asrs	r5, r5, #1
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	f04f 0e16 	mov.w	lr, #22
 800684a:	4684      	mov	ip, r0
 800684c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006850:	eb0c 0401 	add.w	r4, ip, r1
 8006854:	4294      	cmp	r4, r2
 8006856:	bfde      	ittt	le
 8006858:	1b12      	suble	r2, r2, r4
 800685a:	eb04 0c01 	addle.w	ip, r4, r1
 800685e:	1840      	addle	r0, r0, r1
 8006860:	0052      	lsls	r2, r2, #1
 8006862:	f1be 0e01 	subs.w	lr, lr, #1
 8006866:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800686a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800686e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006872:	d1ed      	bne.n	8006850 <__ieee754_sqrt+0x94>
 8006874:	4671      	mov	r1, lr
 8006876:	2720      	movs	r7, #32
 8006878:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800687c:	4562      	cmp	r2, ip
 800687e:	eb04 060e 	add.w	r6, r4, lr
 8006882:	dc02      	bgt.n	800688a <__ieee754_sqrt+0xce>
 8006884:	d113      	bne.n	80068ae <__ieee754_sqrt+0xf2>
 8006886:	429e      	cmp	r6, r3
 8006888:	d811      	bhi.n	80068ae <__ieee754_sqrt+0xf2>
 800688a:	2e00      	cmp	r6, #0
 800688c:	eb06 0e04 	add.w	lr, r6, r4
 8006890:	da43      	bge.n	800691a <__ieee754_sqrt+0x15e>
 8006892:	f1be 0f00 	cmp.w	lr, #0
 8006896:	db40      	blt.n	800691a <__ieee754_sqrt+0x15e>
 8006898:	f10c 0801 	add.w	r8, ip, #1
 800689c:	eba2 020c 	sub.w	r2, r2, ip
 80068a0:	429e      	cmp	r6, r3
 80068a2:	bf88      	it	hi
 80068a4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80068a8:	1b9b      	subs	r3, r3, r6
 80068aa:	4421      	add	r1, r4
 80068ac:	46c4      	mov	ip, r8
 80068ae:	0052      	lsls	r2, r2, #1
 80068b0:	3f01      	subs	r7, #1
 80068b2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80068b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80068ba:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80068be:	d1dd      	bne.n	800687c <__ieee754_sqrt+0xc0>
 80068c0:	4313      	orrs	r3, r2
 80068c2:	d006      	beq.n	80068d2 <__ieee754_sqrt+0x116>
 80068c4:	1c4c      	adds	r4, r1, #1
 80068c6:	bf13      	iteet	ne
 80068c8:	3101      	addne	r1, #1
 80068ca:	3001      	addeq	r0, #1
 80068cc:	4639      	moveq	r1, r7
 80068ce:	f021 0101 	bicne.w	r1, r1, #1
 80068d2:	1043      	asrs	r3, r0, #1
 80068d4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80068d8:	0849      	lsrs	r1, r1, #1
 80068da:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80068de:	07c2      	lsls	r2, r0, #31
 80068e0:	bf48      	it	mi
 80068e2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80068e6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80068ea:	460c      	mov	r4, r1
 80068ec:	463d      	mov	r5, r7
 80068ee:	e77f      	b.n	80067f0 <__ieee754_sqrt+0x34>
 80068f0:	0ada      	lsrs	r2, r3, #11
 80068f2:	3815      	subs	r0, #21
 80068f4:	055b      	lsls	r3, r3, #21
 80068f6:	2a00      	cmp	r2, #0
 80068f8:	d0fa      	beq.n	80068f0 <__ieee754_sqrt+0x134>
 80068fa:	02d7      	lsls	r7, r2, #11
 80068fc:	d50a      	bpl.n	8006914 <__ieee754_sqrt+0x158>
 80068fe:	f1c1 0420 	rsb	r4, r1, #32
 8006902:	fa23 f404 	lsr.w	r4, r3, r4
 8006906:	1e4d      	subs	r5, r1, #1
 8006908:	408b      	lsls	r3, r1
 800690a:	4322      	orrs	r2, r4
 800690c:	1b41      	subs	r1, r0, r5
 800690e:	e788      	b.n	8006822 <__ieee754_sqrt+0x66>
 8006910:	4608      	mov	r0, r1
 8006912:	e7f0      	b.n	80068f6 <__ieee754_sqrt+0x13a>
 8006914:	0052      	lsls	r2, r2, #1
 8006916:	3101      	adds	r1, #1
 8006918:	e7ef      	b.n	80068fa <__ieee754_sqrt+0x13e>
 800691a:	46e0      	mov	r8, ip
 800691c:	e7be      	b.n	800689c <__ieee754_sqrt+0xe0>
 800691e:	bf00      	nop
 8006920:	7ff00000 	.word	0x7ff00000

08006924 <fabs>:
 8006924:	ec51 0b10 	vmov	r0, r1, d0
 8006928:	ee10 2a10 	vmov	r2, s0
 800692c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006930:	ec43 2b10 	vmov	d0, r2, r3
 8006934:	4770      	bx	lr

08006936 <finite>:
 8006936:	b082      	sub	sp, #8
 8006938:	ed8d 0b00 	vstr	d0, [sp]
 800693c:	9801      	ldr	r0, [sp, #4]
 800693e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8006942:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006946:	0fc0      	lsrs	r0, r0, #31
 8006948:	b002      	add	sp, #8
 800694a:	4770      	bx	lr
 800694c:	0000      	movs	r0, r0
	...

08006950 <nan>:
 8006950:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006958 <nan+0x8>
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	00000000 	.word	0x00000000
 800695c:	7ff80000 	.word	0x7ff80000

08006960 <rint>:
 8006960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006962:	ec51 0b10 	vmov	r0, r1, d0
 8006966:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800696a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800696e:	2e13      	cmp	r6, #19
 8006970:	ee10 4a10 	vmov	r4, s0
 8006974:	460b      	mov	r3, r1
 8006976:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800697a:	dc58      	bgt.n	8006a2e <rint+0xce>
 800697c:	2e00      	cmp	r6, #0
 800697e:	da2b      	bge.n	80069d8 <rint+0x78>
 8006980:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006984:	4302      	orrs	r2, r0
 8006986:	d023      	beq.n	80069d0 <rint+0x70>
 8006988:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800698c:	4302      	orrs	r2, r0
 800698e:	4254      	negs	r4, r2
 8006990:	4314      	orrs	r4, r2
 8006992:	0c4b      	lsrs	r3, r1, #17
 8006994:	0b24      	lsrs	r4, r4, #12
 8006996:	045b      	lsls	r3, r3, #17
 8006998:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800699c:	ea44 0103 	orr.w	r1, r4, r3
 80069a0:	4b32      	ldr	r3, [pc, #200]	; (8006a6c <rint+0x10c>)
 80069a2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80069a6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	4630      	mov	r0, r6
 80069b0:	4639      	mov	r1, r7
 80069b2:	f7f9 fc63 	bl	800027c <__adddf3>
 80069b6:	e9cd 0100 	strd	r0, r1, [sp]
 80069ba:	463b      	mov	r3, r7
 80069bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80069c0:	4632      	mov	r2, r6
 80069c2:	f7f9 fc59 	bl	8000278 <__aeabi_dsub>
 80069c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80069ca:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80069ce:	4639      	mov	r1, r7
 80069d0:	ec41 0b10 	vmov	d0, r0, r1
 80069d4:	b003      	add	sp, #12
 80069d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069d8:	4a25      	ldr	r2, [pc, #148]	; (8006a70 <rint+0x110>)
 80069da:	4132      	asrs	r2, r6
 80069dc:	ea01 0702 	and.w	r7, r1, r2
 80069e0:	4307      	orrs	r7, r0
 80069e2:	d0f5      	beq.n	80069d0 <rint+0x70>
 80069e4:	0851      	lsrs	r1, r2, #1
 80069e6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80069ea:	4314      	orrs	r4, r2
 80069ec:	d00c      	beq.n	8006a08 <rint+0xa8>
 80069ee:	ea23 0201 	bic.w	r2, r3, r1
 80069f2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80069f6:	2e13      	cmp	r6, #19
 80069f8:	fa43 f606 	asr.w	r6, r3, r6
 80069fc:	bf0c      	ite	eq
 80069fe:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8006a02:	2400      	movne	r4, #0
 8006a04:	ea42 0306 	orr.w	r3, r2, r6
 8006a08:	4918      	ldr	r1, [pc, #96]	; (8006a6c <rint+0x10c>)
 8006a0a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8006a0e:	4622      	mov	r2, r4
 8006a10:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006a14:	4620      	mov	r0, r4
 8006a16:	4629      	mov	r1, r5
 8006a18:	f7f9 fc30 	bl	800027c <__adddf3>
 8006a1c:	e9cd 0100 	strd	r0, r1, [sp]
 8006a20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006a24:	4622      	mov	r2, r4
 8006a26:	462b      	mov	r3, r5
 8006a28:	f7f9 fc26 	bl	8000278 <__aeabi_dsub>
 8006a2c:	e7d0      	b.n	80069d0 <rint+0x70>
 8006a2e:	2e33      	cmp	r6, #51	; 0x33
 8006a30:	dd07      	ble.n	8006a42 <rint+0xe2>
 8006a32:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006a36:	d1cb      	bne.n	80069d0 <rint+0x70>
 8006a38:	ee10 2a10 	vmov	r2, s0
 8006a3c:	f7f9 fc1e 	bl	800027c <__adddf3>
 8006a40:	e7c6      	b.n	80069d0 <rint+0x70>
 8006a42:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8006a46:	f04f 36ff 	mov.w	r6, #4294967295
 8006a4a:	40d6      	lsrs	r6, r2
 8006a4c:	4230      	tst	r0, r6
 8006a4e:	d0bf      	beq.n	80069d0 <rint+0x70>
 8006a50:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8006a54:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8006a58:	bf1f      	itttt	ne
 8006a5a:	ea24 0101 	bicne.w	r1, r4, r1
 8006a5e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8006a62:	fa44 f202 	asrne.w	r2, r4, r2
 8006a66:	ea41 0402 	orrne.w	r4, r1, r2
 8006a6a:	e7cd      	b.n	8006a08 <rint+0xa8>
 8006a6c:	08006c58 	.word	0x08006c58
 8006a70:	000fffff 	.word	0x000fffff
 8006a74:	00000000 	.word	0x00000000

08006a78 <scalbn>:
 8006a78:	b570      	push	{r4, r5, r6, lr}
 8006a7a:	ec55 4b10 	vmov	r4, r5, d0
 8006a7e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006a82:	4606      	mov	r6, r0
 8006a84:	462b      	mov	r3, r5
 8006a86:	b99a      	cbnz	r2, 8006ab0 <scalbn+0x38>
 8006a88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006a8c:	4323      	orrs	r3, r4
 8006a8e:	d036      	beq.n	8006afe <scalbn+0x86>
 8006a90:	4b39      	ldr	r3, [pc, #228]	; (8006b78 <scalbn+0x100>)
 8006a92:	4629      	mov	r1, r5
 8006a94:	ee10 0a10 	vmov	r0, s0
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f7f9 fda5 	bl	80005e8 <__aeabi_dmul>
 8006a9e:	4b37      	ldr	r3, [pc, #220]	; (8006b7c <scalbn+0x104>)
 8006aa0:	429e      	cmp	r6, r3
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	460d      	mov	r5, r1
 8006aa6:	da10      	bge.n	8006aca <scalbn+0x52>
 8006aa8:	a32b      	add	r3, pc, #172	; (adr r3, 8006b58 <scalbn+0xe0>)
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	e03a      	b.n	8006b26 <scalbn+0xae>
 8006ab0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006ab4:	428a      	cmp	r2, r1
 8006ab6:	d10c      	bne.n	8006ad2 <scalbn+0x5a>
 8006ab8:	ee10 2a10 	vmov	r2, s0
 8006abc:	4620      	mov	r0, r4
 8006abe:	4629      	mov	r1, r5
 8006ac0:	f7f9 fbdc 	bl	800027c <__adddf3>
 8006ac4:	4604      	mov	r4, r0
 8006ac6:	460d      	mov	r5, r1
 8006ac8:	e019      	b.n	8006afe <scalbn+0x86>
 8006aca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006ace:	460b      	mov	r3, r1
 8006ad0:	3a36      	subs	r2, #54	; 0x36
 8006ad2:	4432      	add	r2, r6
 8006ad4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006ad8:	428a      	cmp	r2, r1
 8006ada:	dd08      	ble.n	8006aee <scalbn+0x76>
 8006adc:	2d00      	cmp	r5, #0
 8006ade:	a120      	add	r1, pc, #128	; (adr r1, 8006b60 <scalbn+0xe8>)
 8006ae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ae4:	da1c      	bge.n	8006b20 <scalbn+0xa8>
 8006ae6:	a120      	add	r1, pc, #128	; (adr r1, 8006b68 <scalbn+0xf0>)
 8006ae8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aec:	e018      	b.n	8006b20 <scalbn+0xa8>
 8006aee:	2a00      	cmp	r2, #0
 8006af0:	dd08      	ble.n	8006b04 <scalbn+0x8c>
 8006af2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006af6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006afa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006afe:	ec45 4b10 	vmov	d0, r4, r5
 8006b02:	bd70      	pop	{r4, r5, r6, pc}
 8006b04:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006b08:	da19      	bge.n	8006b3e <scalbn+0xc6>
 8006b0a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006b0e:	429e      	cmp	r6, r3
 8006b10:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8006b14:	dd0a      	ble.n	8006b2c <scalbn+0xb4>
 8006b16:	a112      	add	r1, pc, #72	; (adr r1, 8006b60 <scalbn+0xe8>)
 8006b18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1e2      	bne.n	8006ae6 <scalbn+0x6e>
 8006b20:	a30f      	add	r3, pc, #60	; (adr r3, 8006b60 <scalbn+0xe8>)
 8006b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b26:	f7f9 fd5f 	bl	80005e8 <__aeabi_dmul>
 8006b2a:	e7cb      	b.n	8006ac4 <scalbn+0x4c>
 8006b2c:	a10a      	add	r1, pc, #40	; (adr r1, 8006b58 <scalbn+0xe0>)
 8006b2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0b8      	beq.n	8006aa8 <scalbn+0x30>
 8006b36:	a10e      	add	r1, pc, #56	; (adr r1, 8006b70 <scalbn+0xf8>)
 8006b38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b3c:	e7b4      	b.n	8006aa8 <scalbn+0x30>
 8006b3e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006b42:	3236      	adds	r2, #54	; 0x36
 8006b44:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006b48:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	4b0c      	ldr	r3, [pc, #48]	; (8006b80 <scalbn+0x108>)
 8006b50:	2200      	movs	r2, #0
 8006b52:	e7e8      	b.n	8006b26 <scalbn+0xae>
 8006b54:	f3af 8000 	nop.w
 8006b58:	c2f8f359 	.word	0xc2f8f359
 8006b5c:	01a56e1f 	.word	0x01a56e1f
 8006b60:	8800759c 	.word	0x8800759c
 8006b64:	7e37e43c 	.word	0x7e37e43c
 8006b68:	8800759c 	.word	0x8800759c
 8006b6c:	fe37e43c 	.word	0xfe37e43c
 8006b70:	c2f8f359 	.word	0xc2f8f359
 8006b74:	81a56e1f 	.word	0x81a56e1f
 8006b78:	43500000 	.word	0x43500000
 8006b7c:	ffff3cb0 	.word	0xffff3cb0
 8006b80:	3c900000 	.word	0x3c900000

08006b84 <_init>:
 8006b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b86:	bf00      	nop
 8006b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b8a:	bc08      	pop	{r3}
 8006b8c:	469e      	mov	lr, r3
 8006b8e:	4770      	bx	lr

08006b90 <_fini>:
 8006b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b92:	bf00      	nop
 8006b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b96:	bc08      	pop	{r3}
 8006b98:	469e      	mov	lr, r3
 8006b9a:	4770      	bx	lr
